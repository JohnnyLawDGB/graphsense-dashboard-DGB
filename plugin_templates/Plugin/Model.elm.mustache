module Plugin.Model exposing (..)

{{#plugins}}
import {{package}}.Model
{{/plugins}}

type alias Flags =
    { {{#plugins}}{{name}} : {{package}}.Model.Flags
    {{^last}}, {{/last}}{{/plugins}}
    }
    

type alias ModelState =
    { {{#plugins}}{{name}} : Maybe {{package}}.Model.Model
    {{^last}}, {{/last}}{{/plugins}}
    }


type alias AddressState =
    { {{#plugins}}{{name}} : Maybe {{package}}.Model.AddressState
    {{^last}}, {{/last}}{{/plugins}}
    }


type alias EntityState =
    { {{#plugins}}{{name}} : Maybe {{package}}.Model.EntityState
    {{^last}}, {{/last}}{{/plugins}}
    }


type PluginType
    = {{^plugins}}PluginType{{/plugins}}{{#plugins}}{{package}}
    {{^last}}| {{/last}}{{/plugins}}


type Dialog
    = {{^plugins}}Dialog{{/plugins}}{{#plugins}}Dialog{{package}}
    {{^last}}| {{/last}}{{/plugins}}


pluginTypeToNamespace : PluginType -> String
pluginTypeToNamespace type_ =
    {{#plugins.length}}case type_ of{{/plugins.length}}{{^plugins}}""{{/plugins}}
{{#plugins}}
        {{package}} ->
            "{{name}}"
{{/plugins}}


namespaceToPluginType : String -> Maybe PluginType
namespaceToPluginType str =
    {{#plugins.length}}case str of{{/plugins.length}}{{^plugins}}case "" of{{/plugins}}
{{#plugins}}
        "{{name}}" ->
            Just {{package}}
{{/plugins}}

        _ ->
            Nothing
