module Plugin.View exposing (..)

{{#plugins}}
import {{package}}.Model
import {{package}}.Msg
{{/plugins}}
import Config.View as View
import Html.Styled as Html exposing (Html)
import Model
import Model.Graph.Address exposing (Address)
import Util.View
import Msg.Graph as Graph
import Msg.Search as Search
import Plugin.Model
import Plugin.Msg
import PluginInterface.View
import Svg.Styled as Svg exposing (Svg)
import Tuple exposing (..)


type alias Plugins =
    { {{#plugins}}{{name}} : Maybe (PluginInterface.View.View {{package}}.Model.Model {{package}}.Model.AddressState {{package}}.Model.EntityState {{package}}.Msg.Msg)
    {{^last}}, {{/last}}{{/plugins}}
    }


addressFlags : Plugins -> Plugin.Model.AddressState -> View.Config -> (Float, List (Svg Graph.Msg))
addressFlags plugins addressState vc =
    [ {{#plugins}}plugins.{{name}}
        |> Maybe.andThen
            (\plugin ->
                Maybe.map2
                    (\fun state ->
                        fun vc state
                    )
                    plugin.addressFlags
                    addressState.{{name}}
                    |> Maybe.map (mapSecond (List.map (Svg.map Plugin.Msg.{{package}}Msg)))
            )
    {{^last}}, {{/last}}{{/plugins}}
    ]
        |> List.filterMap identity
        |> List.foldl
            (\( width, flags ) ( accWidth, accFlags ) ->
                ( accWidth + width, accFlags ++ flags )
            )
            ( 0, [] )
        |> mapSecond (List.map (Svg.map Graph.PluginMsg))


entityFlags : Plugins -> Plugin.Model.EntityState -> View.Config -> (Float, List (Svg Graph.Msg))
entityFlags plugins entityState vc =
    [ {{#plugins}}plugins.{{name}}
        |> Maybe.andThen
            (\plugin ->
                Maybe.map2
                    (\fun state ->
                        fun vc state
                    )
                    plugin.entityFlags
                    entityState.{{name}}
                    |> Maybe.map (mapSecond (List.map (Svg.map Plugin.Msg.{{package}}Msg)))
            )
    {{^last}}, {{/last}}{{/plugins}}
    ]
        |> List.filterMap identity
        |> List.foldl
            (\( width, flags ) ( accWidth, accFlags ) ->
                ( accWidth + width, accFlags ++ flags )
            )
            ( 0, [] )
        |> mapSecond (List.map (Svg.map Graph.PluginMsg))


addressContextMenu : Plugins -> Plugin.Model.ModelState -> View.Config -> Address -> List (Html Graph.Msg)
addressContextMenu plugins states vc address =
    [ {{#plugins}}plugins.{{name}}
        |> Maybe.andThen
            (\plugin ->
                Maybe.map3
                    (\fun ->
                        fun vc address
                    )
                    plugin.addressContextMenu
                    states.{{name}}
                    address.plugins.{{name}}
                    |> Maybe.map (List.map (Html.map Plugin.Msg.{{package}}Msg))
            )
    {{^last}}, {{/last}}{{/plugins}}
    ]
        |> List.filterMap identity
        |> List.map ((++) (Util.View.contextMenuRule vc))
        |> List.concat
        |> List.map (Html.map Graph.PluginMsg)


addressProperties : Plugins -> Plugin.Model.ModelState -> Plugin.Model.AddressState -> View.Config -> List (Html Graph.Msg)
addressProperties plugins states addressStates vc =
    [ {{#plugins}}plugins.{{name}}
        |> Maybe.andThen
            (\plugin ->
                Maybe.map3
                    (\fun ->
                        fun vc
                    )
                    plugin.addressProperties
                    states.{{name}}
                    addressStates.{{name}}
                    |> Maybe.map (List.map (Html.map Plugin.Msg.{{package}}Msg))
            )
    {{^last}}, {{/last}}{{/plugins}}
    ]
        |> List.filterMap identity
        |> List.concat
        |> List.map (Html.map Graph.PluginMsg)


entityProperties : Plugins -> Plugin.Model.ModelState -> Plugin.Model.EntityState -> View.Config -> List (Html Graph.Msg)
entityProperties plugins states entityStates vc =
    [ {{#plugins}}plugins.{{name}}
        |> Maybe.andThen
            (\plugin ->
                Maybe.map3
                    (\fun ->
                        fun vc
                    )
                    plugin.entityProperties
                    states.{{name}}
                    entityStates.{{name}}
                    |> Maybe.map (List.map (Html.map Plugin.Msg.{{package}}Msg))
            )
    {{^last}}, {{/last}}{{/plugins}}
    ]
        |> List.filterMap identity
        |> List.concat
        |> List.map (Html.map Graph.PluginMsg)


browser : Plugins -> View.Config -> Plugin.Model.ModelState -> List (Html Graph.Msg)
browser plugins vc states =
    [ {{#plugins}}plugins.{{name}}
        |> Maybe.andThen
            (\plugin ->
                Maybe.map2
                    (\fun state ->
                        fun vc state
                    )
                    plugin.browser
                    states.{{name}}
                    |> Maybe.map (List.map (Html.map Plugin.Msg.{{package}}Msg))
            )
    {{^last}}, {{/last}}{{/plugins}}
    ]
        |> List.filterMap identity
        |> List.concat
        |> List.map (Html.map Graph.PluginMsg)


graphNavbarLeft : Plugins -> Plugin.Model.ModelState -> View.Config -> List (Html Graph.Msg)
graphNavbarLeft plugins states vc =
    [ {{#plugins}}plugins.{{name}}
        |> Maybe.andThen
            (\plugin ->
                Maybe.map2
                    (\fun state ->
                        fun vc state
                    )
                    plugin.graphNavbarLeft
                    states.{{name}}
                    |> Maybe.map (List.map (Html.map Plugin.Msg.{{package}}Msg))
            )
    {{^last}}, {{/last}}{{/plugins}}
    ]
        |> List.filterMap identity
        |> List.concat
        |> List.map (Html.map Graph.PluginMsg)


searchPlaceholder : Plugins -> View.Config -> List String
searchPlaceholder plugins vc =
    [ {{#plugins}}plugins.{{name}} |> Maybe.andThen .searchPlaceholder |> Maybe.map (\fun -> fun vc)
    {{^last}}, {{/last}}{{/plugins}}
    ]
        |> List.filterMap identity


searchResultList : Plugins -> Plugin.Model.ModelState -> View.Config -> List (Html Search.Msg)
searchResultList plugins states vc =
    [ {{#plugins}}plugins.{{name}}
        |> Maybe.andThen
            (\plugin ->
                Maybe.map2
                    (\fun state ->
                        fun vc state
                    )
                    plugin.searchResultList
                    states.{{name}}
                    |> Maybe.map (List.map (Html.map Plugin.Msg.{{package}}Msg))
            )
    {{^last}}, {{/last}}{{/plugins}}
    ]
        |> List.filterMap identity
        |> List.concat
        |> List.map (Html.map Search.PluginMsg)


sidebar : Plugins -> Plugin.Model.ModelState -> Model.Page -> View.Config -> List (Html Model.Msg)
sidebar plugins states page vc =
    [ {{#plugins}}plugins.{{name}}
        |> Maybe.andThen
            (\plugin ->
                Maybe.map2
                    (\fun ->
                        page
                            == Model.Plugin Plugin.Model.{{package}}
                            |> fun vc
                    )
                    plugin.sidebar
                    states.{{name}}
            )
        |> Maybe.map (List.map (Html.map Plugin.Msg.{{package}}Msg))
    {{^last}}, {{/last}}{{/plugins}}
    ]
        |> List.filterMap identity
        |> List.concat
        |> List.map (Html.map Model.PluginMsg)


contents : Plugins -> Plugin.Model.ModelState -> Plugin.Model.PluginType -> View.Config -> Maybe (List (Html Model.Msg))
contents plugins states type_ vc =
    {{^plugins}}Nothing{{/plugins}}{{#plugins.length}}case type_ of{{#plugins}} 
        Plugin.Model.{{package}} ->
            plugins.{{name}}
                |> Maybe.andThen
                    (\plugin ->
                        Maybe.map2
                            (\fun ->
                                fun vc
                            )
                            plugin.contents
                            states.{{name}}
                            |> Maybe.map (List.map (Html.map Plugin.Msg.{{package}}Msg))
                    )
                |> Maybe.map (List.map (Html.map Model.PluginMsg))
{{/plugins}}
{{/plugins.length}}


navbar : Plugins -> Plugin.Model.ModelState -> Plugin.Model.PluginType -> View.Config -> Maybe (List (Html Model.Msg))
navbar plugins states type_ vc =
    {{^plugins}}Nothing{{/plugins}}{{#plugins.length}}case type_ of{{#plugins}} 
        Plugin.Model.{{package}} ->
            plugins.{{name}}
                |> Maybe.andThen
                    (\plugin ->
                        Maybe.map2
                            (\fun ->
                                fun vc
                            )
                            plugin.navbar
                            states.{{name}}
                            |> Maybe.map (List.map (Html.map Plugin.Msg.{{package}}Msg))
                    )
                |> Maybe.map (List.map (Html.map Model.PluginMsg))
{{/plugins}}
{{/plugins.length}}


hovercards : Plugins -> Plugin.Model.ModelState -> View.Config -> List (Html Graph.Msg)
hovercards plugins states vc =
    [ {{#plugins}}plugins.{{name}}
        |> Maybe.andThen
            (\plugin ->
                Maybe.map2
                    (\fun ->
                        fun vc
                    )
                    plugin.hovercards
                    states.{{name}}
                    |> Maybe.map (List.map (Html.map Plugin.Msg.{{package}}Msg))
            )
    {{^last}}, {{/last}}{{/plugins}}
    ]
        |> List.filterMap identity
        |> List.concat
        |> List.map (Html.map Graph.PluginMsg)


title : Plugins -> Plugin.Model.ModelState -> View.Config -> List String
title plugins states vc =
    [ {{#plugins}}plugins.{{name}}
        |> Maybe.andThen
            (\plugin ->
                Maybe.map2
                    (\fun ->
                        fun vc
                    )
                    plugin.title
                    states.{{name}}
            )
    {{^last}}, {{/last}}{{/plugins}}
    ]
        |> List.filterMap identity
        |> List.concat


profile : Plugins -> Plugin.Model.ModelState -> View.Config -> List (String, Html Model.Msg)
profile plugins states vc =
    [ {{#plugins}}plugins.{{name}}
        |> Maybe.andThen
            (\plugin ->
                Maybe.map2
                    (\fun ->
                        fun vc
                    )
                    plugin.profile
                    states.{{name}}
                    |> Maybe.map (List.map (mapSecond (Html.map Plugin.Msg.{{package}}Msg)))
            )
    {{^last}}, {{/last}}{{/plugins}}
    ]
        |> List.filterMap identity
        |> List.concat
        |> List.map (mapSecond (Html.map Model.PluginMsg))


login : Plugins -> Plugin.Model.ModelState -> View.Config -> List (Html Model.Msg)
login plugins states vc =
    [ {{#plugins}}plugins.{{name}}
        |> Maybe.andThen
            (\plugin ->
                Maybe.map2
                    (\fun ->
                        fun vc
                    )
                    plugin.login
                    states.{{name}}
                    |> Maybe.map (List.map (Html.map Plugin.Msg.{{package}}Msg))
            )
    {{^last}}, {{/last}}{{/plugins}}
    ]
        |> List.filterMap identity
        |> List.concat
        |> List.map (Html.map Model.PluginMsg)
