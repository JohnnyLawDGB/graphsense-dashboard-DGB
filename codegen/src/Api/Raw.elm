{-
   Figma API
   This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

   The version of the OpenAPI document: 0.13.0
   Contact: support@figma.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Raw exposing
    ( ArcData
    , BasePaint
    , BaseShadowEffect
    , BaseShadowEffectBoundVariables
    , BlendMode(..)
    , BlurEffect
    , BlurEffectBoundVariables
    , BlurEffectType(..)
    , CanvasNode
    , CanvasNodeType(..)
    , ColorStop
    , ColorStopBoundVariables
    , Component
    , ComponentNode
    , ComponentNodeType(..)
    , ComponentPropertiesTrait
    , ComponentProperty
    , ComponentPropertyBoundVariables
    , ComponentPropertyDefinition
    , ComponentPropertyDefinitionDefaultValue(..)
    , ComponentPropertyDefinitions
    , ComponentPropertyReferences
    , ComponentPropertyType(..)
    , ComponentPropertyValue(..)
    , ComponentSet
    , ComponentSetNode
    , ComponentSetNodeType(..)
    , Components
    , ConnectorEndpoint(..)
    , ConnectorEndpointOneOf
    , ConnectorEndpointOneOf1
    , ConnectorEndpointOneOf1Magnet(..)
    , ConnectorLineType(..)
    , ConnectorNode
    , ConnectorNodeConnectorEndStrokeCap(..)
    , ConnectorNodeConnectorStartStrokeCap(..)
    , ConnectorNodeType(..)
    , ConnectorTextBackground
    , Constraint
    , ConstraintType(..)
    , CornerRadiusShapeTraits
    , CornerTrait
    , CounterAxisAlignContent(..)
    , CounterAxisAlignItems(..)
    , CounterAxisSizingMode(..)
    , Transform
    , DefaultShapeTraits
    , DefaultShapeTraitsMaskType(..)
    , DocumentNode
    , DocumentNodeType(..)
    , DocumentationLink
    , DropShadowEffect
    , DropShadowEffectType(..)
    , EasingType(..)
    , Effect(..)
    , EllipseNode
    , EllipseNodeType(..)
    , FrameInfo
    , FrameNode
    , FrameNodeType(..)
    , FrameTraits
    , GradientPaint
    , GradientPaintType(..)
    , GroupNode
    , GroupNodeType(..)
    , HasBlendModeAndOpacityTrait
    , HasChildrenTrait
    , HasEffectsTrait
    , HasFramePropertiesTrait
    , HasGeometryTrait
    , HasGeometryTraitAllOfFillOverrideTable(..)
    , HasLayoutTrait
    , HasMaskTrait
    , HasMaskTraitMaskType(..)
    , HasTextSublayerTrait
    , Hyperlink
    , HyperlinkType(..)
    , ImageFilters
    , ImagePaint
    , ImagePaintScaleMode(..)
    , ImagePaintType(..)
    , IndividualStrokesTrait
    , InnerShadowEffect
    , InnerShadowEffectType(..)
    , InstanceNode
    , InstanceNodeType(..)
    , InstanceSwapPreferredValue
    , InstanceSwapPreferredValueType(..)
    , IsLayerTrait
    , IsLayerTraitBoundVariables
    , IsLayerTraitBoundVariablesIndividualStrokeWeights
    , IsLayerTraitBoundVariablesSize
    , IsLayerTraitScrollBehavior(..)
    , LayoutAlign(..)
    , LayoutConstraint
    , LayoutConstraintHorizontal(..)
    , LayoutConstraintVertical(..)
    , LayoutGrid
    , LayoutGridAlignment(..)
    , LayoutGridBoundVariables
    , LayoutGridPattern(..)
    , LayoutGrow(..)
    , LayoutMode(..)
    , LayoutPositioning(..)
    , LayoutSizingHorizontal(..)
    , LayoutSizingVertical(..)
    , LayoutWrap(..)
    , LineNode
    , LineNodeType(..)
    , LinkUnfurlNode
    , LinkUnfurlNodeType(..)
    , LocalVariable
    , LocalVariableCollection
    , LocalVariableCollectionModesInner
    , LocalVariableResolvedType(..)
    , LocalVariableValuesByModeValue(..)
    , MaskType(..)
    , MinimalFillsTrait
    , MinimalStrokesTrait
    , Node(..)
    , OverflowDirection(..)
    , Overrides
    , Paint(..)
    , PaintOverride
    , Path
    , PathWindingRule(..)
    , PaymentInformation
    , PaymentInformationResourceType(..)
    , PaymentStatus
    , PaymentStatusType(..)
    , PostVariablesRequest
    , PrimaryAxisAlignItems(..)
    , PrimaryAxisSizingMode(..)
    , Project
    , PublishedComponent
    , PublishedComponentSet
    , PublishedStyle
    , PublishedVariable
    , PublishedVariableCollection
    , PublishedVariableResolvedDataType(..)
    , RGB
    , RGBA
    , Reaction
    , Rectangle
    , RectangleNode
    , RectangleNodeType(..)
    , RectangularShapeTraits
    , RegularPolygonNode
    , RegularPolygonNodeType(..)
    , SectionNode
    , SectionNodeType(..)
    , ShapeType(..)
    , ShapeWithTextNode
    , ShapeWithTextNodeMaskType(..)
    , ShapeWithTextNodeType(..)
    , Size
    , SliceNode
    , SliceNodeType(..)
    , SolidPaint
    , SolidPaintAllOfBoundVariables
    , SolidPaintType(..)
    , StarNode
    , StarNodeType(..)
    , StickyNode
    , StickyNodeMaskType(..)
    , StickyNodeType(..)
    , StrokeAlign(..)
    , StrokeCap(..)
    , StrokeJoin(..)
    , StrokeWeights
    , Style
    , StyleType(..)
    , SubcanvasNode(..)
    , TableCellNode
    , TableCellNodeType(..)
    , TableNode
    , TableNodeType(..)
    , TextNode
    , TextNodeLineTypes(..)
    , TextNodeType(..)
    , TransitionSourceTrait
    , TypePropertiesTrait
    , TypePropertiesTraitLineTypes(..)
    , TypeStyle
    , TypeStyleBoundVariables
    , TypeStyleLineHeightUnit(..)
    , TypeStyleTextAlignHorizontal(..)
    , TypeStyleTextAlignVertical(..)
    , TypeStyleTextAutoResize(..)
    , TypeStyleTextCase(..)
    , TypeStyleTextDecoration(..)
    , TypeStyleTextTruncation(..)
    , User
    , VariableAlias
    , VariableAliasType(..)
    , VariableChange(..)
    , VariableCodeSyntax
    , VariableCollectionChange(..)
    , VariableCollectionCreate
    , VariableCollectionCreateAction(..)
    , VariableCollectionDelete
    , VariableCollectionDeleteAction(..)
    , VariableCollectionUpdate
    , VariableCollectionUpdateAction(..)
    , VariableCreate
    , VariableCreateAction(..)
    , VariableCreateResolvedType(..)
    , VariableDelete
    , VariableDeleteAction(..)
    , VariableModeChange(..)
    , VariableModeCreate
    , VariableModeCreateAction(..)
    , VariableModeDelete
    , VariableModeDeleteAction(..)
    , VariableModeUpdate
    , VariableModeUpdateAction(..)
    , VariableModeValue
    , VariableScope(..)
    , VariableUpdate
    , VariableUpdateAction(..)
    , VariableValue(..)
    , Vector
    , VectorNode
    , VectorNodeType(..)
    , Version
    , arcDataDecoder
    , basePaintDecoder
    , baseShadowEffectBoundVariablesDecoder
    , baseShadowEffectDecoder
    , blendModeDecoder
    , blendModeVariants
    , blurEffectBoundVariablesDecoder
    , blurEffectDecoder
    , blurEffectTypeVariants
    , canvasNodeDecoder
    , canvasNodeTypeVariants
    , colorStopBoundVariablesDecoder
    , colorStopDecoder
    , componentDecoder
    , componentNodeDecoder
    , componentNodeTypeVariants
    , componentPropertiesTraitDecoder
    , componentPropertyBoundVariablesDecoder
    , componentPropertyDecoder
    , componentPropertyDefinitionDecoder
    , componentPropertyDefinitionDefaultValueDecoder
    , componentPropertyTypeDecoder
    , componentPropertyTypeVariants
    , componentPropertyValueDecoder
    , componentSetDecoder
    , componentSetNodeDecoder
    , componentSetNodeTypeVariants
    , componentsDecoder
    , connectorEndpointDecoder
    , connectorEndpointOneOf1Decoder
    , connectorEndpointOneOf1MagnetVariants
    , connectorEndpointOneOfDecoder
    , connectorLineTypeDecoder
    , connectorLineTypeVariants
    , connectorNodeConnectorEndStrokeCapVariants
    , connectorNodeConnectorStartStrokeCapVariants
    , connectorNodeDecoder
    , connectorNodeTypeVariants
    , connectorTextBackgroundDecoder
    , constraintDecoder
    , constraintTypeVariants
    , cornerRadiusShapeTraitsDecoder
    , cornerTraitDecoder
    , defaultShapeTraitsDecoder
    , defaultShapeTraitsMaskTypeVariants
    , documentNodeDecoder
    , documentNodeTypeVariants
    , documentationLinkDecoder
    , dropShadowEffectDecoder
    , dropShadowEffectTypeVariants
    , easingTypeDecoder
    , easingTypeVariants
    , effectDecoder
    , ellipseNodeDecoder
    , ellipseNodeTypeVariants
    , frameInfoDecoder
    , frameNodeDecoder
    , frameNodeTypeVariants
    , frameTraitsDecoder
    , gradientPaintDecoder
    , gradientPaintTypeVariants
    , groupNodeDecoder
    , groupNodeTypeVariants
    , hasBlendModeAndOpacityTraitDecoder
    , hasChildrenTraitDecoder
    , hasEffectsTraitDecoder
    , hasFramePropertiesTraitDecoder
    , hasGeometryTraitAllOfFillOverrideTableDecoder
    , hasGeometryTraitDecoder
    , hasLayoutTraitDecoder
    , hasMaskTraitDecoder
    , hasMaskTraitMaskTypeVariants
    , hasTextSublayerTraitDecoder
    , hyperlinkDecoder
    , hyperlinkTypeVariants
    , imageFiltersDecoder
    , imagePaintDecoder
    , imagePaintScaleModeVariants
    , imagePaintTypeVariants
    , individualStrokesTraitDecoder
    , innerShadowEffectDecoder
    , innerShadowEffectTypeVariants
    , instanceNodeDecoder
    , instanceNodeTypeVariants
    , instanceSwapPreferredValueDecoder
    , instanceSwapPreferredValueTypeVariants
    , isLayerTraitBoundVariablesDecoder
    , isLayerTraitBoundVariablesIndividualStrokeWeightsDecoder
    , isLayerTraitBoundVariablesSizeDecoder
    , isLayerTraitDecoder
    , isLayerTraitScrollBehaviorVariants
    , layoutConstraintDecoder
    , layoutConstraintHorizontalVariants
    , layoutConstraintVerticalVariants
    , layoutGridAlignmentVariants
    , layoutGridBoundVariablesDecoder
    , layoutGridDecoder
    , layoutGridPatternVariants
    , lineNodeDecoder
    , lineNodeTypeVariants
    , linkUnfurlNodeDecoder
    , linkUnfurlNodeTypeVariants
    , localVariableCollectionDecoder
    , localVariableCollectionModesInnerDecoder
    , localVariableDecoder
    , localVariableResolvedTypeVariants
    , localVariableValuesByModeValueDecoder
    , minimalFillsTraitDecoder
    , minimalStrokesTraitDecoder
    , nodeDecoder
    , overridesDecoder
    , paintDecoder
    , paintOverrideDecoder
    , pathDecoder
    , pathWindingRuleVariants
    , paymentInformationDecoder
    , paymentInformationResourceTypeVariants
    , paymentStatusDecoder
    , paymentStatusTypeVariants
    , projectDecoder
    , publishedComponentDecoder
    , publishedComponentSetDecoder
    , publishedStyleDecoder
    , publishedVariableCollectionDecoder
    , publishedVariableDecoder
    , publishedVariableResolvedDataTypeVariants
    , rGBADecoder
    , rGBDecoder
    , reactionDecoder
    , rectangleDecoder
    , rectangleNodeDecoder
    , rectangleNodeTypeVariants
    , rectangularShapeTraitsDecoder
    , regularPolygonNodeDecoder
    , regularPolygonNodeTypeVariants
    , sectionNodeDecoder
    , sectionNodeTypeVariants
    , shapeTypeDecoder
    , shapeTypeVariants
    , shapeWithTextNodeDecoder
    , shapeWithTextNodeMaskTypeVariants
    , shapeWithTextNodeTypeVariants
    , sizeDecoder
    , sliceNodeDecoder
    , sliceNodeTypeVariants
    , solidPaintAllOfBoundVariablesDecoder
    , solidPaintDecoder
    , solidPaintTypeVariants
    , starNodeDecoder
    , starNodeTypeVariants
    , stickyNodeDecoder
    , stickyNodeMaskTypeVariants
    , stickyNodeTypeVariants
    , strokeWeightsDecoder
    , styleDecoder
    , styleTypeDecoder
    , styleTypeVariants
    , subcanvasNodeDecoder
    , tableCellNodeDecoder
    , tableCellNodeTypeVariants
    , tableNodeDecoder
    , tableNodeTypeVariants
    , textNodeDecoder
    , textNodeLineTypesVariants
    , textNodeTypeVariants
    , transitionSourceTraitDecoder
    , typePropertiesTraitDecoder
    , typePropertiesTraitLineTypesVariants
    , typeStyleBoundVariablesDecoder
    , typeStyleDecoder
    , typeStyleLineHeightUnitVariants
    , typeStyleTextAlignHorizontalVariants
    , typeStyleTextAlignVerticalVariants
    , typeStyleTextAutoResizeVariants
    , typeStyleTextCaseVariants
    , typeStyleTextDecorationVariants
    , typeStyleTextTruncationVariants
    , userDecoder
    , variableAliasDecoder
    , variableAliasTypeVariants
    , variableChangeDecoder
    , variableCodeSyntaxDecoder
    , variableCollectionChangeDecoder
    , variableCollectionCreateActionVariants
    , variableCollectionCreateDecoder
    , variableCollectionDeleteActionVariants
    , variableCollectionDeleteDecoder
    , variableCollectionUpdateActionVariants
    , variableCollectionUpdateDecoder
    , variableCreateActionVariants
    , variableCreateDecoder
    , variableCreateResolvedTypeVariants
    , variableDeleteActionVariants
    , variableDeleteDecoder
    , variableModeChangeDecoder
    , variableModeCreateActionVariants
    , variableModeCreateDecoder
    , variableModeDeleteActionVariants
    , variableModeDeleteDecoder
    , variableModeUpdateActionVariants
    , variableModeUpdateDecoder
    , variableModeValueDecoder
    , variableScopeDecoder
    , variableScopeVariants
    , variableUpdateActionVariants
    , variableUpdateDecoder
    , variableValueDecoder
    , vectorDecoder
    , vectorNodeDecoder
    , vectorNodeTypeVariants
    , versionDecoder
    )

import Api.Time exposing (Posix)
import Dict exposing (Dict)
import Json.Decode
import Json.Encode
import Tuple exposing (pair)


type alias Object =
    {}



-- MODEL


{-| Information about the arc properties of an ellipse. 0° is the x axis and increasing angles rotate clockwise.
-}
type alias ArcData =
    { startingAngle : Float
    , endingAngle : Float
    , innerRadius : Float
    }


type alias BasePaint =
    { visible : Maybe Bool
    , opacity : Maybe Float
    , blendMode : BlendMode
    }


{-| Base properties shared by all shadow effects
-}
type alias BaseShadowEffect =
    { color : RGBA
    , blendMode : BlendMode
    , offset : Vector
    , radius : Float
    , spread : Maybe Float
    , visible : Bool
    , boundVariables : Maybe BaseShadowEffectBoundVariables
    }


{-| The variables bound to a particular field on this shadow effect
-}
type alias BaseShadowEffectBoundVariables =
    { radius : Maybe VariableAlias
    , spread : Maybe VariableAlias
    , color : Maybe VariableAlias
    , offsetX : Maybe VariableAlias
    , offsetY : Maybe VariableAlias
    }


{-| This type is a string enum with the following possible values Normal blends: - `PASS_THROUGH` (only applicable to objects with children) - `NORMAL` Darken: - `DARKEN` - `MULTIPLY` - `LINEAR_BURN` - `COLOR_BURN` Lighten: - `LIGHTEN` - `SCREEN` - `LINEAR_DODGE` - `COLOR_DODGE` Contrast: - `OVERLAY` - `SOFT_LIGHT` - `HARD_LIGHT` Inversion: - `DIFFERENCE` - `EXCLUSION` Component: - `HUE` - `SATURATION` - `COLOR` - `LUMINOSITY`
-}
type BlendMode
    = BlendModePASSTHROUGH
    | BlendModeNORMAL
    | BlendModeDARKEN
    | BlendModeMULTIPLY
    | BlendModeLINEARBURN
    | BlendModeCOLORBURN
    | BlendModeLIGHTEN
    | BlendModeSCREEN
    | BlendModeLINEARDODGE
    | BlendModeCOLORDODGE
    | BlendModeOVERLAY
    | BlendModeSOFTLIGHT
    | BlendModeHARDLIGHT
    | BlendModeDIFFERENCE
    | BlendModeEXCLUSION
    | BlendModeHUE
    | BlendModeSATURATION
    | BlendModeCOLOR
    | BlendModeLUMINOSITY


blendModeVariants : List BlendMode
blendModeVariants =
    [ BlendModePASSTHROUGH
    , BlendModeNORMAL
    , BlendModeDARKEN
    , BlendModeMULTIPLY
    , BlendModeLINEARBURN
    , BlendModeCOLORBURN
    , BlendModeLIGHTEN
    , BlendModeSCREEN
    , BlendModeLINEARDODGE
    , BlendModeCOLORDODGE
    , BlendModeOVERLAY
    , BlendModeSOFTLIGHT
    , BlendModeHARDLIGHT
    , BlendModeDIFFERENCE
    , BlendModeEXCLUSION
    , BlendModeHUE
    , BlendModeSATURATION
    , BlendModeCOLOR
    , BlendModeLUMINOSITY
    ]


{-| A blur effect
-}
type alias BlurEffect =
    { type_ : BlurEffectType
    , visible : Bool
    , radius : Float
    , boundVariables : Maybe BlurEffectBoundVariables
    }


type BlurEffectType
    = BlurEffectTypeLAYERBLUR
    | BlurEffectTypeBACKGROUNDBLUR


blurEffectTypeVariants : List BlurEffectType
blurEffectTypeVariants =
    [ BlurEffectTypeLAYERBLUR
    , BlurEffectTypeBACKGROUNDBLUR
    ]


{-| The variables bound to a particular field on this blur effect
-}
type alias BlurEffectBoundVariables =
    { radius : Maybe VariableAlias
    }


type alias CanvasNode =
    { isLayerTrait : IsLayerTrait
    , type_ : CanvasNodeType
    , children : List SubcanvasNode
    , backgroundColor : RGBA
    }


type CanvasNodeType
    = CanvasNodeTypeCANVAS


canvasNodeTypeVariants : List CanvasNodeType
canvasNodeTypeVariants =
    [ CanvasNodeTypeCANVAS
    ]


{-| A single color stop with its position along the gradient axis, color, and bound variables if any
-}
type alias ColorStop =
    { position : Float
    , color : RGBA
    , boundVariables : Maybe ColorStopBoundVariables
    }


{-| The variables bound to a particular gradient stop
-}
type alias ColorStopBoundVariables =
    { color : Maybe VariableAlias
    }


{-| A description of a main component. Helps you identify which component instances are attached to.
-}
type alias Component =
    { key : String
    , name : String
    , description : String
    , componentSetId : Maybe String
    , documentationLinks : List DocumentationLink
    , remote : Bool
    }


type alias Components =
    Dict String Component


type alias ComponentNode =
    { componentPropertiesTrait : ComponentPropertiesTrait
    , frameTraits : FrameTraits
    , componentPropertyDefinitions : Maybe ComponentPropertyDefinitions
    , type_ : ComponentNodeType
    }


type ComponentNodeType
    = ComponentNodeTypeCOMPONENT


componentNodeTypeVariants : List ComponentNodeType
componentNodeTypeVariants =
    [ ComponentNodeTypeCOMPONENT
    ]


type alias ComponentPropertiesTrait =
    { componentPropertyDefinitions : Maybe ComponentPropertyDefinitions
    }


{-| A property of a component.
-}
type alias ComponentProperty =
    { type_ : ComponentPropertyType
    , value : ComponentPropertyValue
    , preferredValues : Maybe (List InstanceSwapPreferredValue)
    , boundVariables : Maybe ComponentPropertyBoundVariables
    }


type alias ComponentProperties =
    Dict String ComponentProperty


{-| The variables bound to a particular field on this component property
-}
type alias ComponentPropertyBoundVariables =
    { value : Maybe VariableAlias
    }


{-| A property of a component.
-}
type alias ComponentPropertyDefinition =
    { type_ : ComponentPropertyType
    , defaultValue : ComponentPropertyDefinitionDefaultValue
    , variantOptions : Maybe (List String)
    , preferredValues : Maybe (List InstanceSwapPreferredValue)
    }


type alias ComponentPropertyDefinitions =
    Dict String ComponentPropertyDefinition


type alias ComponentPropertyReferences =
    Dict String String


{-| Initial value of this property for instances.
-}
type ComponentPropertyDefinitionDefaultValue
    = ComponentPropertyDefinitionDefaultValueBool Bool
    | ComponentPropertyDefinitionDefaultValueString String


{-| Component property type.
-}
type ComponentPropertyType
    = ComponentPropertyTypeBOOLEAN
    | ComponentPropertyTypeINSTANCESWAP
    | ComponentPropertyTypeTEXT
    | ComponentPropertyTypeVARIANT


componentPropertyTypeVariants : List ComponentPropertyType
componentPropertyTypeVariants =
    [ ComponentPropertyTypeBOOLEAN
    , ComponentPropertyTypeINSTANCESWAP
    , ComponentPropertyTypeTEXT
    , ComponentPropertyTypeVARIANT
    ]


{-| Value of the property for this component instance.
-}
type ComponentPropertyValue
    = ComponentPropertyValueBool Bool
    | ComponentPropertyValueString String


{-| A description of a component set, which is a node containing a set of variants of a component.
-}
type alias ComponentSet =
    { key : String
    , name : String
    , description : String
    , documentationLinks : Maybe (List DocumentationLink)
    , remote : Maybe Bool
    }


type alias ComponentSetNode =
    { componentPropertiesTrait : ComponentPropertiesTrait
    , frameTraits : FrameTraits
    , componentPropertyDefinitions : Maybe ComponentPropertyDefinitions
    , type_ : ComponentSetNodeType
    }


type ComponentSetNodeType
    = ComponentSetNodeTypeCOMPONENTSET


componentSetNodeTypeVariants : List ComponentSetNodeType
componentSetNodeTypeVariants =
    [ ComponentSetNodeTypeCOMPONENTSET
    ]


{-| Stores canvas location for a connector start/end point.
-}
type ConnectorEndpoint
    = ConnectorEndpointConnectorEndpointOneOf ConnectorEndpointOneOf
    | ConnectorEndpointConnectorEndpointOneOf1 ConnectorEndpointOneOf1


type alias ConnectorEndpointOneOf =
    { endpointNodeId : Maybe String
    , position : Maybe Vector
    }


type alias ConnectorEndpointOneOf1 =
    { endpointNodeId : Maybe String
    , magnet : Maybe ConnectorEndpointOneOf1Magnet
    }


type ConnectorEndpointOneOf1Magnet
    = ConnectorEndpointOneOf1MagnetAUTO
    | ConnectorEndpointOneOf1MagnetTOP
    | ConnectorEndpointOneOf1MagnetBOTTOM
    | ConnectorEndpointOneOf1MagnetLEFT
    | ConnectorEndpointOneOf1MagnetRIGHT
    | ConnectorEndpointOneOf1MagnetCENTER


connectorEndpointOneOf1MagnetVariants : List ConnectorEndpointOneOf1Magnet
connectorEndpointOneOf1MagnetVariants =
    [ ConnectorEndpointOneOf1MagnetAUTO
    , ConnectorEndpointOneOf1MagnetTOP
    , ConnectorEndpointOneOf1MagnetBOTTOM
    , ConnectorEndpointOneOf1MagnetLEFT
    , ConnectorEndpointOneOf1MagnetRIGHT
    , ConnectorEndpointOneOf1MagnetCENTER
    ]


{-| Connector line type.
-}
type ConnectorLineType
    = ConnectorLineTypeSTRAIGHT
    | ConnectorLineTypeELBOWED


connectorLineTypeVariants : List ConnectorLineType
connectorLineTypeVariants =
    [ ConnectorLineTypeSTRAIGHT
    , ConnectorLineTypeELBOWED
    ]


type alias ConnectorNode =
    { hasBlendModeAndOpacityTrait : HasBlendModeAndOpacityTrait
    , hasEffectsTrait : HasEffectsTrait
    , hasLayoutTrait : HasLayoutTrait
    , hasTextSublayerTrait : HasTextSublayerTrait
    , isLayerTrait : IsLayerTrait
    , minimalStrokesTrait : MinimalStrokesTrait
    , absoluteBoundingBox : Rectangle
    , absoluteRenderBounds : Maybe Rectangle
    , preserveRatio : Maybe Bool
    , constraints : Maybe LayoutConstraint
    , size : Maybe Vector
    , layoutAlign : Maybe LayoutAlign
    , layoutGrow : Maybe LayoutGrow
    , layoutPositioning : Maybe LayoutPositioning
    , minWidth : Maybe Float
    , maxWidth : Maybe Float
    , minHeight : Maybe Float
    , maxHeight : Maybe Float
    , layoutSizingHorizontal : Maybe LayoutSizingHorizontal
    , layoutSizingVertical : Maybe LayoutSizingVertical
    , blendMode : BlendMode
    , opacity : Maybe Float
    , effects : List Effect
    , characters : String
    , strokes : Maybe (List Paint)
    , strokeWeight : Maybe Float
    , strokeAlign : Maybe StrokeAlign
    , strokeJoin : Maybe StrokeJoin
    , type_ : ConnectorNodeType
    , connectorStart : ConnectorEndpoint
    , connectorEnd : ConnectorEndpoint
    , connectorStartStrokeCap : ConnectorNodeConnectorStartStrokeCap
    , connectorEndStrokeCap : ConnectorNodeConnectorEndStrokeCap
    , connectorLineType : ConnectorLineType
    , textBackground : Maybe ConnectorTextBackground
    }


type ConnectorNodeType
    = ConnectorNodeTypeCONNECTOR


connectorNodeTypeVariants : List ConnectorNodeType
connectorNodeTypeVariants =
    [ ConnectorNodeTypeCONNECTOR
    ]


type ConnectorNodeConnectorStartStrokeCap
    = ConnectorNodeConnectorStartStrokeCapNONE
    | ConnectorNodeConnectorStartStrokeCapLINEARROW
    | ConnectorNodeConnectorStartStrokeCapTRIANGLEARROW
    | ConnectorNodeConnectorStartStrokeCapDIAMONDFILLED
    | ConnectorNodeConnectorStartStrokeCapCIRCLEFILLED
    | ConnectorNodeConnectorStartStrokeCapTRIANGLEFILLED


connectorNodeConnectorStartStrokeCapVariants : List ConnectorNodeConnectorStartStrokeCap
connectorNodeConnectorStartStrokeCapVariants =
    [ ConnectorNodeConnectorStartStrokeCapNONE
    , ConnectorNodeConnectorStartStrokeCapLINEARROW
    , ConnectorNodeConnectorStartStrokeCapTRIANGLEARROW
    , ConnectorNodeConnectorStartStrokeCapDIAMONDFILLED
    , ConnectorNodeConnectorStartStrokeCapCIRCLEFILLED
    , ConnectorNodeConnectorStartStrokeCapTRIANGLEFILLED
    ]


type ConnectorNodeConnectorEndStrokeCap
    = ConnectorNodeConnectorEndStrokeCapNONE
    | ConnectorNodeConnectorEndStrokeCapLINEARROW
    | ConnectorNodeConnectorEndStrokeCapTRIANGLEARROW
    | ConnectorNodeConnectorEndStrokeCapDIAMONDFILLED
    | ConnectorNodeConnectorEndStrokeCapCIRCLEFILLED
    | ConnectorNodeConnectorEndStrokeCapTRIANGLEFILLED


connectorNodeConnectorEndStrokeCapVariants : List ConnectorNodeConnectorEndStrokeCap
connectorNodeConnectorEndStrokeCapVariants =
    [ ConnectorNodeConnectorEndStrokeCapNONE
    , ConnectorNodeConnectorEndStrokeCapLINEARROW
    , ConnectorNodeConnectorEndStrokeCapTRIANGLEARROW
    , ConnectorNodeConnectorEndStrokeCapDIAMONDFILLED
    , ConnectorNodeConnectorEndStrokeCapCIRCLEFILLED
    , ConnectorNodeConnectorEndStrokeCapTRIANGLEFILLED
    ]


type alias ConnectorTextBackground =
    { cornerTrait : CornerTrait
    , minimalFillsTrait : MinimalFillsTrait
    , fills : List Paint
    , styles : Maybe Styles
    }


type alias Styles =
    Dict String String


{-| Sizing constraint for exports.
-}
type alias Constraint =
    { type_ : ConstraintType
    , value : Float
    }


type ConstraintType
    = ConstraintTypeSCALE
    | ConstraintTypeWIDTH
    | ConstraintTypeHEIGHT


constraintTypeVariants : List ConstraintType
constraintTypeVariants =
    [ ConstraintTypeSCALE
    , ConstraintTypeWIDTH
    , ConstraintTypeHEIGHT
    ]


type alias CornerRadiusShapeTraits =
    { cornerTrait : CornerTrait
    , defaultShapeTraits : DefaultShapeTraits
    , cornerRadius : Maybe Float
    , cornerSmoothing : Maybe Float
    , rectangleCornerRadii : Maybe RectangleCornerRadii
    }


type alias RectangleCornerRadii =
    List Float


type alias CornerTrait =
    { cornerRadius : Maybe Float
    , cornerSmoothing : Maybe Float
    , rectangleCornerRadii : Maybe RectangleCornerRadii
    }


type alias Transform =
    ( ( Float, Float, Float ), ( Float, Float, Float ) )


type alias DefaultShapeTraits =
    { hasBlendModeAndOpacityTrait : HasBlendModeAndOpacityTrait
    , hasEffectsTrait : HasEffectsTrait
    , hasGeometryTrait : HasGeometryTrait
    , hasLayoutTrait : HasLayoutTrait
    , hasMaskTrait : HasMaskTrait
    , isLayerTrait : IsLayerTrait
    , transitionSourceTrait : TransitionSourceTrait
    , blendMode : BlendMode
    , opacity : Maybe Float
    , absoluteBoundingBox : Rectangle
    , absoluteRenderBounds : Maybe Rectangle
    , preserveRatio : Maybe Bool
    , constraints : Maybe LayoutConstraint
    , size : Maybe Vector
    , layoutAlign : Maybe LayoutAlign
    , layoutGrow : Maybe LayoutGrow
    , layoutPositioning : Maybe LayoutPositioning
    , minWidth : Maybe Float
    , maxWidth : Maybe Float
    , minHeight : Maybe Float
    , maxHeight : Maybe Float
    , relativeTransform : Maybe Transform
    , layoutSizingHorizontal : Maybe LayoutSizingHorizontal
    , layoutSizingVertical : Maybe LayoutSizingVertical
    , fills : List Paint
    , styles : Maybe Styles
    , strokes : Maybe (List Paint)
    , strokeWeight : Maybe Float
    , strokeAlign : Maybe StrokeAlign
    , strokeJoin : Maybe StrokeJoin
    , fillGeometry : Maybe (List Path)
    , strokeGeometry : Maybe (List Path)
    , strokeCap : Maybe StrokeCap
    , strokeMiterAngle : Maybe Float
    , effects : List Effect
    , isMask : Maybe Bool
    , maskType : Maybe DefaultShapeTraitsMaskType
    , isMaskOutline : Maybe Bool
    , transitionNodeID : Maybe String
    , transitionDuration : Maybe Float
    , transitionEasing : Maybe EasingType
    }


type LayoutGrow
    = LayoutGrow0
    | LayoutGrow1


layoutGrowVariants : List LayoutGrow
layoutGrowVariants =
    [ LayoutGrow0
    , LayoutGrow1
    ]


type LayoutSizingHorizontal
    = LayoutSizingHorizontalFIXED
    | LayoutSizingHorizontalHUG
    | LayoutSizingHorizontalFILL


type LayoutSizingVertical
    = LayoutSizingVerticalFIXED
    | LayoutSizingVerticalHUG
    | LayoutSizingVerticalFILL


type StrokeAlign
    = StrokeAlignINSIDE
    | StrokeAlignOUTSIDE
    | StrokeAlignCENTER


type StrokeJoin
    = StrokeJoinMITER
    | StrokeJoinBEVEL
    | StrokeJoinROUND


type StrokeCap
    = StrokeCapNONE
    | StrokeCapROUND
    | StrokeCapSQUARE
    | StrokeCapLINEARROW
    | StrokeCapTRIANGLEARROW
    | StrokeCapDIAMONDFILLED
    | StrokeCapCIRCLEFILLED
    | StrokeCapTRIANGLEFILLED
    | StrokeCapWASHITAPE1
    | StrokeCapWASHITAPE2
    | StrokeCapWASHITAPE3
    | StrokeCapWASHITAPE4
    | StrokeCapWASHITAPE5
    | StrokeCapWASHITAPE6


type DefaultShapeTraitsMaskType
    = DefaultShapeTraitsMaskTypeALPHA
    | DefaultShapeTraitsMaskTypeVECTOR
    | DefaultShapeTraitsMaskTypeLUMINANCE


defaultShapeTraitsMaskTypeVariants : List DefaultShapeTraitsMaskType
defaultShapeTraitsMaskTypeVariants =
    [ DefaultShapeTraitsMaskTypeALPHA
    , DefaultShapeTraitsMaskTypeVECTOR
    , DefaultShapeTraitsMaskTypeLUMINANCE
    ]


type alias DocumentNode =
    { isLayerTrait : IsLayerTrait
    , type_ : DocumentNodeType
    , children : List CanvasNode
    }


type DocumentNodeType
    = DocumentNodeTypeDOCUMENT


documentNodeTypeVariants : List DocumentNodeType
documentNodeTypeVariants =
    [ DocumentNodeTypeDOCUMENT
    ]


{-| Represents a link to documentation for a component or component set.
-}
type alias DocumentationLink =
    { uri : String
    }


type alias DropShadowEffect =
    { baseShadowEffect : BaseShadowEffect
    , type_ : DropShadowEffectType
    , showShadowBehindNode : Bool
    }


type DropShadowEffectType
    = DropShadowEffectTypeDROPSHADOW


dropShadowEffectTypeVariants : List DropShadowEffectType
dropShadowEffectTypeVariants =
    [ DropShadowEffectTypeDROPSHADOW
    ]


{-| This type is a string enum with the following possible values - `EASE_IN`: Ease in with an animation curve similar to CSS ease-in. - `EASE_OUT`: Ease out with an animation curve similar to CSS ease-out. - `EASE_IN_AND_OUT`: Ease in and then out with an animation curve similar to CSS ease-in-out. - `LINEAR`: No easing, similar to CSS linear. - `GENTLE_SPRING`: Gentle spring animation similar to react-spring.
-}
type EasingType
    = EasingTypeEASEIN
    | EasingTypeEASEOUT
    | EasingTypeEASEINANDOUT
    | EasingTypeLINEAR
    | EasingTypeGENTLESPRING


easingTypeVariants : List EasingType
easingTypeVariants =
    [ EasingTypeEASEIN
    , EasingTypeEASEOUT
    , EasingTypeEASEINANDOUT
    , EasingTypeLINEAR
    , EasingTypeGENTLESPRING
    ]


type Effect
    = EffectBlurEffect BlurEffect
    | EffectDropShadowEffect DropShadowEffect
    | EffectInnerShadowEffect InnerShadowEffect


type alias EllipseNode =
    { defaultShapeTraits : DefaultShapeTraits
    , type_ : EllipseNodeType
    , arcData : ArcData
    }


type EllipseNodeType
    = EllipseNodeTypeELLIPSE


ellipseNodeTypeVariants : List EllipseNodeType
ellipseNodeTypeVariants =
    [ EllipseNodeTypeELLIPSE
    ]


{-| Data on the frame a component resides in.
-}
type alias FrameInfo =
    { nodeId : Maybe String
    , name : Maybe String
    , backgroundColor : Maybe String
    , pageId : String
    , pageName : String
    }


type alias FrameNode =
    { frameTraits : FrameTraits
    , type_ : FrameNodeType
    }


type FrameNodeType
    = FrameNodeTypeFRAME


frameNodeTypeVariants : List FrameNodeType
frameNodeTypeVariants =
    [ FrameNodeTypeFRAME
    ]


type alias FrameTraits =
    { cornerTrait : CornerTrait
    , hasBlendModeAndOpacityTrait : HasBlendModeAndOpacityTrait
    , hasChildrenTrait : HasChildrenTrait
    , hasEffectsTrait : HasEffectsTrait
    , hasFramePropertiesTrait : HasFramePropertiesTrait
    , hasGeometryTrait : HasGeometryTrait
    , hasLayoutTrait : HasLayoutTrait
    , hasMaskTrait : HasMaskTrait
    , individualStrokesTrait : IndividualStrokesTrait
    , isLayerTrait : IsLayerTrait
    , transitionSourceTrait : TransitionSourceTrait
    , blendMode : BlendMode
    , opacity : Maybe Float
    , children : List SubcanvasNode
    , absoluteBoundingBox : Rectangle
    , absoluteRenderBounds : Maybe Rectangle
    , preserveRatio : Maybe Bool
    , constraints : Maybe LayoutConstraint
    , size : Maybe Vector
    , layoutAlign : Maybe LayoutAlign
    , layoutGrow : Maybe LayoutGrow
    , layoutPositioning : Maybe LayoutPositioning
    , minWidth : Maybe Float
    , maxWidth : Maybe Float
    , minHeight : Maybe Float
    , maxHeight : Maybe Float
    , layoutSizingHorizontal : Maybe LayoutSizingHorizontal
    , layoutSizingVertical : Maybe LayoutSizingVertical
    , clipsContent : Bool
    , background : Maybe (List Paint)
    , backgroundColor : Maybe RGBA
    , layoutGrids : Maybe (List LayoutGrid)
    , overflowDirection : Maybe OverflowDirection
    , layoutMode : Maybe LayoutMode
    , primaryAxisSizingMode : Maybe PrimaryAxisSizingMode
    , counterAxisSizingMode : Maybe CounterAxisSizingMode
    , primaryAxisAlignItems : Maybe PrimaryAxisAlignItems
    , counterAxisAlignItems : Maybe CounterAxisAlignItems
    , paddingLeft : Maybe Float
    , paddingRight : Maybe Float
    , paddingTop : Maybe Float
    , paddingBottom : Maybe Float
    , itemSpacing : Maybe Float
    , itemReverseZIndex : Maybe Bool
    , strokesIncludedInLayout : Maybe Bool
    , layoutWrap : Maybe LayoutWrap
    , counterAxisSpacing : Maybe Float
    , counterAxisAlignContent : Maybe CounterAxisAlignContent
    , cornerRadius : Maybe Float
    , cornerSmoothing : Maybe Float
    , rectangleCornerRadii : Maybe RectangleCornerRadii
    , fills : List Paint
    , styles : Maybe Styles
    , strokes : Maybe (List Paint)
    , strokeWeight : Maybe Float
    , strokeAlign : Maybe StrokeAlign
    , strokeJoin : Maybe StrokeJoin
    , fillGeometry : Maybe (List Path)
    , strokeGeometry : Maybe (List Path)
    , strokeCap : Maybe StrokeCap
    , strokeMiterAngle : Maybe Float
    , effects : List Effect
    , isMask : Maybe Bool
    , maskType : Maybe MaskType
    , isMaskOutline : Maybe Bool
    , transitionNodeID : Maybe String
    , transitionDuration : Maybe Float
    , transitionEasing : Maybe EasingType
    , individualStrokeWeights : Maybe StrokeWeights
    , readyForDev : Bool
    }


type OverflowDirection
    = OverflowDirectionHORIZONTALSCROLLING
    | OverflowDirectionVERTICALSCROLLING
    | OverflowDirectionHORIZONTALANDVERTICALSCROLLING
    | OverflowDirectionNONE


type PrimaryAxisSizingMode
    = PrimaryAxisSizingModeFIXED
    | PrimaryAxisSizingModeAUTO


type CounterAxisSizingMode
    = CounterAxisSizingModeFIXED
    | CounterAxisSizingModeAUTO


type PrimaryAxisAlignItems
    = PrimaryAxisAlignItemsMIN
    | PrimaryAxisAlignItemsCENTER
    | PrimaryAxisAlignItemsMAX
    | PrimaryAxisAlignItemsSPACEBETWEEN


type CounterAxisAlignItems
    = CounterAxisAlignItemsMIN
    | CounterAxisAlignItemsCENTER
    | CounterAxisAlignItemsMAX
    | CounterAxisAlignItemsBASELINE


type LayoutWrap
    = LayoutWrapNOWRAP
    | LayoutWrapWRAP


type CounterAxisAlignContent
    = CounterAxisAlignContentAUTO
    | CounterAxisAlignContentSPACEBETWEEN


type MaskType
    = MaskTypeALPHA
    | MaskTypeVECTOR
    | MaskTypeLUMINANCE


type alias GradientPaint =
    { basePaint : BasePaint
    , type_ : GradientPaintType
    , gradientHandlePositions : List Vector
    , gradientStops : List ColorStop
    }


type GradientPaintType
    = GradientPaintTypeLINEAR
    | GradientPaintTypeRADIAL
    | GradientPaintTypeANGULAR
    | GradientPaintTypeDIAMOND


gradientPaintTypeVariants : List GradientPaintType
gradientPaintTypeVariants =
    [ GradientPaintTypeLINEAR
    , GradientPaintTypeRADIAL
    , GradientPaintTypeANGULAR
    , GradientPaintTypeDIAMOND
    ]


type alias GroupNode =
    { frameTraits : FrameTraits
    , type_ : GroupNodeType
    }


type GroupNodeType
    = GroupNodeTypeGROUP


groupNodeTypeVariants : List GroupNodeType
groupNodeTypeVariants =
    [ GroupNodeTypeGROUP
    ]


type alias HasBlendModeAndOpacityTrait =
    { blendMode : BlendMode
    , opacity : Maybe Float
    }


type alias HasChildrenTrait =
    { children : List SubcanvasNode
    }


type alias HasEffectsTrait =
    { effects : List Effect
    }


type alias HasFramePropertiesTrait =
    { clipsContent : Bool
    , background : Maybe (List Paint)
    , backgroundColor : Maybe RGBA
    , layoutGrids : Maybe (List LayoutGrid)
    , overflowDirection : Maybe OverflowDirection
    , layoutMode : Maybe LayoutMode
    , primaryAxisSizingMode : Maybe PrimaryAxisSizingMode
    , counterAxisSizingMode : Maybe CounterAxisSizingMode
    , primaryAxisAlignItems : Maybe PrimaryAxisAlignItems
    , counterAxisAlignItems : Maybe CounterAxisAlignItems
    , paddingLeft : Maybe Float
    , paddingRight : Maybe Float
    , paddingTop : Maybe Float
    , paddingBottom : Maybe Float
    , itemSpacing : Maybe Float
    , itemReverseZIndex : Maybe Bool
    , strokesIncludedInLayout : Maybe Bool
    , layoutWrap : Maybe LayoutWrap
    , counterAxisSpacing : Maybe Float
    , counterAxisAlignContent : Maybe CounterAxisAlignContent
    }


type LayoutMode
    = LayoutModeNONE
    | LayoutModeHORIZONTAL
    | LayoutModeVERTICAL


type alias HasGeometryTrait =
    { minimalFillsTrait : MinimalFillsTrait
    , minimalStrokesTrait : MinimalStrokesTrait
    , strokes : Maybe (List Paint)
    , strokeWeight : Maybe Float
    , strokeAlign : Maybe StrokeAlign
    , strokeJoin : Maybe StrokeJoin
    , fillGeometry : Maybe (List Path)
    , strokeGeometry : Maybe (List Path)
    , strokeCap : Maybe StrokeCap
    , strokeMiterAngle : Maybe Float
    }


type HasGeometryTraitAllOfFillOverrideTable
    = HasGeometryTraitAllOfFillOverrideTablePaintOverride PaintOverride


type alias HasLayoutTrait =
    { absoluteBoundingBox : Maybe Rectangle
    , absoluteRenderBounds : Maybe Rectangle
    , preserveRatio : Maybe Bool
    , constraints : Maybe LayoutConstraint
    , size : Maybe Vector
    , layoutAlign : Maybe LayoutAlign
    , layoutGrow : Maybe LayoutGrow
    , layoutPositioning : Maybe LayoutPositioning
    , minWidth : Maybe Float
    , maxWidth : Maybe Float
    , minHeight : Maybe Float
    , maxHeight : Maybe Float
    , layoutSizingHorizontal : Maybe LayoutSizingHorizontal
    , layoutSizingVertical : Maybe LayoutSizingVertical
    }


type alias HasMaskTrait =
    { isMask : Maybe Bool
    , maskType : Maybe HasMaskTraitMaskType
    , isMaskOutline : Maybe Bool
    }


type HasMaskTraitMaskType
    = HasMaskTraitMaskTypeALPHA
    | HasMaskTraitMaskTypeVECTOR
    | HasMaskTraitMaskTypeLUMINANCE


hasMaskTraitMaskTypeVariants : List HasMaskTraitMaskType
hasMaskTraitMaskTypeVariants =
    [ HasMaskTraitMaskTypeALPHA
    , HasMaskTraitMaskTypeVECTOR
    , HasMaskTraitMaskTypeLUMINANCE
    ]


type alias HasTextSublayerTrait =
    { characters : String
    }


{-| A link to either a URL or another frame (node) in the document.
-}
type alias Hyperlink =
    { type_ : HyperlinkType
    , url : Maybe String
    , nodeID : Maybe String
    }


type HyperlinkType
    = HyperlinkTypeURL
    | HyperlinkTypeNODE


hyperlinkTypeVariants : List HyperlinkType
hyperlinkTypeVariants =
    [ HyperlinkTypeURL
    , HyperlinkTypeNODE
    ]


{-| Image filters to apply to the node.
-}
type alias ImageFilters =
    { exposure : Maybe Float
    , contrast : Maybe Float
    , saturation : Maybe Float
    , temperature : Maybe Float
    , tint : Maybe Float
    , highlights : Maybe Float
    , shadows : Maybe Float
    }


type alias ImagePaint =
    { basePaint : BasePaint
    , type_ : ImagePaintType
    , scaleMode : ImagePaintScaleMode
    , imageRef : String
    , imageTransform : Maybe (List (List Float))
    , scalingFactor : Maybe Float
    , filters : Maybe ImageFilters
    , rotation : Maybe Float
    , gifRef : Maybe String
    }


type ImagePaintType
    = ImagePaintTypeIMAGE


imagePaintTypeVariants : List ImagePaintType
imagePaintTypeVariants =
    [ ImagePaintTypeIMAGE
    ]


type ImagePaintScaleMode
    = ImagePaintScaleModeFILL
    | ImagePaintScaleModeFIT
    | ImagePaintScaleModeTILE
    | ImagePaintScaleModeSTRETCH


imagePaintScaleModeVariants : List ImagePaintScaleMode
imagePaintScaleModeVariants =
    [ ImagePaintScaleModeFILL
    , ImagePaintScaleModeFIT
    , ImagePaintScaleModeTILE
    , ImagePaintScaleModeSTRETCH
    ]


type alias IndividualStrokesTrait =
    { individualStrokeWeights : Maybe StrokeWeights
    }


type alias InnerShadowEffect =
    { baseShadowEffect : BaseShadowEffect
    , type_ : Maybe InnerShadowEffectType
    }


type InnerShadowEffectType
    = InnerShadowEffectTypeINNERSHADOW


innerShadowEffectTypeVariants : List InnerShadowEffectType
innerShadowEffectTypeVariants =
    [ InnerShadowEffectTypeINNERSHADOW
    ]


type alias InstanceNode =
    { frameTraits : FrameTraits
    , type_ : InstanceNodeType
    , componentId : String
    , isExposedInstance : Maybe Bool
    , exposedInstances : Maybe (List String)
    , componentProperties : Maybe ComponentProperties
    , overrides : List Overrides
    }


type InstanceNodeType
    = InstanceNodeTypeINSTANCE


instanceNodeTypeVariants : List InstanceNodeType
instanceNodeTypeVariants =
    [ InstanceNodeTypeINSTANCE
    ]


{-| Instance swap preferred value.
-}
type alias InstanceSwapPreferredValue =
    { type_ : InstanceSwapPreferredValueType
    , key : String
    }


type InstanceSwapPreferredValueType
    = InstanceSwapPreferredValueTypeCOMPONENT
    | InstanceSwapPreferredValueTypeCOMPONENTSET


instanceSwapPreferredValueTypeVariants : List InstanceSwapPreferredValueType
instanceSwapPreferredValueTypeVariants =
    [ InstanceSwapPreferredValueTypeCOMPONENT
    , InstanceSwapPreferredValueTypeCOMPONENTSET
    ]


type alias IsLayerTrait =
    { id : String
    , name : String
    , type_ : String
    , visible : Maybe Bool
    , locked : Maybe Bool
    , isFixed : Maybe Bool
    , scrollBehavior : IsLayerTraitScrollBehavior
    , rotation : Maybe Float
    , componentPropertyReferences : Maybe ComponentPropertyReferences
    , boundVariables : Maybe IsLayerTraitBoundVariables
    , explicitVariableModes : Maybe String
    }


type IsLayerTraitScrollBehavior
    = IsLayerTraitScrollBehaviorSCROLLS
    | IsLayerTraitScrollBehaviorFIXED
    | IsLayerTraitScrollBehaviorSTICKYSCROLLS


isLayerTraitScrollBehaviorVariants : List IsLayerTraitScrollBehavior
isLayerTraitScrollBehaviorVariants =
    [ IsLayerTraitScrollBehaviorSCROLLS
    , IsLayerTraitScrollBehaviorFIXED
    , IsLayerTraitScrollBehaviorSTICKYSCROLLS
    ]


{-| A mapping of field to the variables applied to this field. Most fields will only map to a single `VariableAlias`. However, for properties like `fills`, `strokes`, `size`, `componentProperties`, and `textRangeFills`, it is possible to have multiple variables bound to the field.
-}
type alias IsLayerTraitBoundVariables =
    { size : Maybe IsLayerTraitBoundVariablesSize
    , individualStrokeWeights : Maybe IsLayerTraitBoundVariablesIndividualStrokeWeights
    , characters : Maybe VariableAlias
    , itemSpacing : Maybe VariableAlias
    , paddingLeft : Maybe VariableAlias
    , paddingRight : Maybe VariableAlias
    , paddingTop : Maybe VariableAlias
    , paddingBottom : Maybe VariableAlias
    , visible : Maybe VariableAlias
    , topLeftRadius : Maybe VariableAlias
    , topRightRadius : Maybe VariableAlias
    , bottomLeftRadius : Maybe VariableAlias
    , bottomRightRadius : Maybe VariableAlias
    , minWidth : Maybe VariableAlias
    , maxWidth : Maybe VariableAlias
    , minHeight : Maybe VariableAlias
    , maxHeight : Maybe VariableAlias
    , counterAxisSpacing : Maybe VariableAlias
    , opacity : Maybe VariableAlias
    , fontFamily : Maybe (List VariableAlias)
    , fontSize : Maybe (List VariableAlias)
    , fontStyle : Maybe (List VariableAlias)
    , fontWeight : Maybe (List VariableAlias)
    , letterSpacing : Maybe (List VariableAlias)
    , lineHeight : Maybe (List VariableAlias)
    , paragraphSpacing : Maybe (List VariableAlias)
    , paragraphIndent : Maybe (List VariableAlias)
    , fills : Maybe (List VariableAlias)
    , strokes : Maybe (List VariableAlias)
    , componentProperties : Maybe VariableAlias
    , textRangeFills : Maybe (List VariableAlias)
    , effects : Maybe (List VariableAlias)
    , layoutGrids : Maybe (List VariableAlias)
    }


type alias IsLayerTraitBoundVariablesIndividualStrokeWeights =
    { top : Maybe VariableAlias
    , bottom : Maybe VariableAlias
    , left : Maybe VariableAlias
    , right : Maybe VariableAlias
    }


type alias IsLayerTraitBoundVariablesSize =
    { x : Maybe VariableAlias
    , y : Maybe VariableAlias
    }


{-| Layout constraint relative to containing Frame
-}
type alias LayoutConstraint =
    { vertical : LayoutConstraintVertical
    , horizontal : LayoutConstraintHorizontal
    }


type LayoutConstraintVertical
    = LayoutConstraintVerticalTOP
    | LayoutConstraintVerticalBOTTOM
    | LayoutConstraintVerticalCENTER
    | LayoutConstraintVerticalTOPBOTTOM
    | LayoutConstraintVerticalSCALE


layoutConstraintVerticalVariants : List LayoutConstraintVertical
layoutConstraintVerticalVariants =
    [ LayoutConstraintVerticalTOP
    , LayoutConstraintVerticalBOTTOM
    , LayoutConstraintVerticalCENTER
    , LayoutConstraintVerticalTOPBOTTOM
    , LayoutConstraintVerticalSCALE
    ]


type LayoutConstraintHorizontal
    = LayoutConstraintHorizontalLEFT
    | LayoutConstraintHorizontalRIGHT
    | LayoutConstraintHorizontalCENTER
    | LayoutConstraintHorizontalLEFTRIGHT
    | LayoutConstraintHorizontalSCALE


layoutConstraintHorizontalVariants : List LayoutConstraintHorizontal
layoutConstraintHorizontalVariants =
    [ LayoutConstraintHorizontalLEFT
    , LayoutConstraintHorizontalRIGHT
    , LayoutConstraintHorizontalCENTER
    , LayoutConstraintHorizontalLEFTRIGHT
    , LayoutConstraintHorizontalSCALE
    ]


{-| Guides to align and place objects within a frames.
-}
type alias LayoutGrid =
    { pattern : LayoutGridPattern
    , sectionSize : Float
    , visible : Bool
    , color : RGBA
    , alignment : LayoutGridAlignment
    , gutterSize : Float
    , offset : Float
    , count : Float
    , boundVariables : Maybe LayoutGridBoundVariables
    }


type LayoutGridPattern
    = LayoutGridPatternCOLUMNS
    | LayoutGridPatternROWS
    | LayoutGridPatternGRID


layoutGridPatternVariants : List LayoutGridPattern
layoutGridPatternVariants =
    [ LayoutGridPatternCOLUMNS
    , LayoutGridPatternROWS
    , LayoutGridPatternGRID
    ]


type LayoutGridAlignment
    = LayoutGridAlignmentMIN
    | LayoutGridAlignmentMAX
    | LayoutGridAlignmentSTRETCH
    | LayoutGridAlignmentCENTER


layoutGridAlignmentVariants : List LayoutGridAlignment
layoutGridAlignmentVariants =
    [ LayoutGridAlignmentMIN
    , LayoutGridAlignmentMAX
    , LayoutGridAlignmentSTRETCH
    , LayoutGridAlignmentCENTER
    ]


{-| The variables bound to a particular field on this layout grid
-}
type alias LayoutGridBoundVariables =
    { gutterSize : Maybe VariableAlias
    , numSections : Maybe VariableAlias
    , sectionSize : Maybe VariableAlias
    , offset : Maybe VariableAlias
    }


type alias LineNode =
    { defaultShapeTraits : DefaultShapeTraits
    , type_ : LineNodeType
    }


type LineNodeType
    = LineNodeTypeLINE


lineNodeTypeVariants : List LineNodeType
lineNodeTypeVariants =
    [ LineNodeTypeLINE
    ]


type alias LinkUnfurlNode =
    { isLayerTrait : IsLayerTrait
    , type_ : LinkUnfurlNodeType
    }


type LinkUnfurlNodeType
    = LinkUnfurlNodeTypeLINKUNFURL


linkUnfurlNodeTypeVariants : List LinkUnfurlNodeType
linkUnfurlNodeTypeVariants =
    [ LinkUnfurlNodeTypeLINKUNFURL
    ]


{-| A Variable is a single design token that defines values for each of the modes in its VariableCollection. These values can be applied to various kinds of design properties.
-}
type alias LocalVariable =
    { id : String
    , name : String
    , key : String
    , variableCollectionId : String
    , resolvedType : LocalVariableResolvedType
    , valuesByMode : Object
    , remote : Bool
    , description : String
    , hiddenFromPublishing : Bool
    , scopes : List VariableScope
    , codeSyntax : VariableCodeSyntax
    }


type LocalVariableResolvedType
    = LocalVariableResolvedTypeBOOLEAN
    | LocalVariableResolvedTypeFLOAT
    | LocalVariableResolvedTypeSTRING
    | LocalVariableResolvedTypeCOLOR


localVariableResolvedTypeVariants : List LocalVariableResolvedType
localVariableResolvedTypeVariants =
    [ LocalVariableResolvedTypeBOOLEAN
    , LocalVariableResolvedTypeFLOAT
    , LocalVariableResolvedTypeSTRING
    , LocalVariableResolvedTypeCOLOR
    ]


{-| A grouping of related Variable objects each with the same modes.
-}
type alias LocalVariableCollection =
    { id : String
    , name : String
    , key : String
    , modes : List LocalVariableCollectionModesInner
    , defaultModeId : String
    , remote : Bool
    , hiddenFromPublishing : Bool
    , variableIds : List String
    }


type alias LocalVariableCollectionModesInner =
    { modeId : String
    , name : String
    }


type LocalVariableValuesByModeValue
    = LocalVariableValuesByModeValueBool Bool
    | LocalVariableValuesByModeValueFloat Float
    | LocalVariableValuesByModeValueRGBA RGBA
    | LocalVariableValuesByModeValueString String
    | LocalVariableValuesByModeValueVariableAlias VariableAlias


type alias MinimalFillsTrait =
    { fills : List Paint
    , styles : Maybe Styles
    }


type alias MinimalStrokesTrait =
    { strokes : Maybe (List Paint)
    , strokeWeight : Maybe Float
    , strokeAlign : Maybe StrokeAlign
    , strokeJoin : Maybe StrokeJoin
    }


type Node
    = NodeCanvasNode CanvasNode
    | NodeComponentNode ComponentNode
    | NodeComponentSetNode ComponentSetNode
    | NodeConnectorNode ConnectorNode
    | NodeDocumentNode DocumentNode
    | NodeEllipseNode EllipseNode
    | NodeFrameNode FrameNode
    | NodeGroupNode GroupNode
    | NodeInstanceNode InstanceNode
    | NodeLineNode LineNode
    | NodeLinkUnfurlNode LinkUnfurlNode
    | NodeRectangleNode RectangleNode
    | NodeRegularPolygonNode RegularPolygonNode
    | NodeSectionNode SectionNode
    | NodeShapeWithTextNode ShapeWithTextNode
    | NodeSliceNode SliceNode
    | NodeStarNode StarNode
    | NodeStickyNode StickyNode
    | NodeTableCellNode TableCellNode
    | NodeTableNode TableNode
    | NodeTextNode TextNode
    | NodeVectorNode VectorNode


{-| Fields directly overridden on an instance. Inherited overrides are not included.
-}
type alias Overrides =
    { id : String
    , overriddenFields : List String
    }


type Paint
    = PaintGradientPaint GradientPaint
    | PaintImagePaint ImagePaint
    | PaintSolidPaint SolidPaint


{-| Paint metadata to override default paints.
-}
type alias PaintOverride =
    { fills : Maybe (List Paint)
    , inheritFillStyleId : Maybe String
    }


{-| Defines a single path
-}
type alias Path =
    { path : String
    , windingRule : PathWindingRule
    , overrideID : Maybe Float
    }


type PathWindingRule
    = PathWindingRuleNONZERO
    | PathWindingRuleEVENODD


pathWindingRuleVariants : List PathWindingRule
pathWindingRuleVariants =
    [ PathWindingRuleNONZERO
    , PathWindingRuleEVENODD
    ]


{-| An object describing a user's payment information for a plugin, widget, or Community file.
-}
type alias PaymentInformation =
    { userId : String
    , resourceId : String
    , resourceType : PaymentInformationResourceType
    , paymentStatus : PaymentStatus
    , dateOfPurchase : Maybe Posix
    }


type PaymentInformationResourceType
    = PaymentInformationResourceTypePLUGIN
    | PaymentInformationResourceTypeWIDGET
    | PaymentInformationResourceTypeCOMMUNITYFILE


paymentInformationResourceTypeVariants : List PaymentInformationResourceType
paymentInformationResourceTypeVariants =
    [ PaymentInformationResourceTypePLUGIN
    , PaymentInformationResourceTypeWIDGET
    , PaymentInformationResourceTypeCOMMUNITYFILE
    ]


{-| An object describing the user's payment status.
-}
type alias PaymentStatus =
    { type_ : Maybe PaymentStatusType
    }


type PaymentStatusType
    = PaymentStatusTypeUNPAID
    | PaymentStatusTypePAID
    | PaymentStatusTypeTRIAL


paymentStatusTypeVariants : List PaymentStatusType
paymentStatusTypeVariants =
    [ PaymentStatusTypeUNPAID
    , PaymentStatusTypePAID
    , PaymentStatusTypeTRIAL
    ]


type alias PostVariablesRequest =
    { variableCollections : Maybe (List VariableCollectionChange)
    , variableModes : Maybe (List VariableModeChange)
    , variables : Maybe (List VariableChange)
    , variableModeValues : Maybe (List VariableModeValue)
    }


{-| A Project can be identified by both the Project name, and the Project ID.
-}
type alias Project =
    { id : String
    , name : String
    }


{-| An arrangement of published UI elements that can be instantiated across figma files.
-}
type alias PublishedComponent =
    { key : String
    , fileKey : String
    , nodeId : String
    , thumbnailUrl : Maybe String
    , name : String
    , description : String
    , createdAt : Posix
    , updatedAt : Posix
    , user : User
    , containingFrame : Maybe FrameInfo
    }


{-| A node containing a set of variants of a component.
-}
type alias PublishedComponentSet =
    { key : String
    , fileKey : String
    , nodeId : String
    , thumbnailUrl : Maybe String
    , name : String
    , description : String
    , createdAt : Posix
    , updatedAt : Posix
    , user : User
    , containingFrame : Maybe FrameInfo
    }


{-| A set of published properties that can be applied to nodes.
-}
type alias PublishedStyle =
    { key : String
    , fileKey : String
    , nodeId : String
    , styleType : StyleType
    , thumbnailUrl : Maybe String
    , name : String
    , description : String
    , createdAt : Posix
    , updatedAt : Posix
    , user : User
    , sortPosition : String
    }


{-| A Variable is a single design token that defines values for each of the modes in its VariableCollection. These values can be applied to various kinds of design properties.
-}
type alias PublishedVariable =
    { id : String
    , subscribedId : String
    , name : String
    , key : String
    , variableCollectionId : String
    , resolvedDataType : PublishedVariableResolvedDataType
    , updatedAt : Posix
    }


type PublishedVariableResolvedDataType
    = PublishedVariableResolvedDataTypeBOOLEAN
    | PublishedVariableResolvedDataTypeFLOAT
    | PublishedVariableResolvedDataTypeSTRING
    | PublishedVariableResolvedDataTypeCOLOR


publishedVariableResolvedDataTypeVariants : List PublishedVariableResolvedDataType
publishedVariableResolvedDataTypeVariants =
    [ PublishedVariableResolvedDataTypeBOOLEAN
    , PublishedVariableResolvedDataTypeFLOAT
    , PublishedVariableResolvedDataTypeSTRING
    , PublishedVariableResolvedDataTypeCOLOR
    ]


{-| A grouping of related Variable objects each with the same modes.
-}
type alias PublishedVariableCollection =
    { id : String
    , subscribedId : String
    , name : String
    , key : String
    , updatedAt : Posix
    }


{-| An RGB color
-}
type alias RGB =
    { r : Float
    , g : Float
    , b : Float
    }


{-| An RGBA color
-}
type alias RGBA =
    { r : Float
    , g : Float
    , b : Float
    , a : Float
    }


{-| A reaction left by a user.
-}
type alias Reaction =
    { user : User
    , emoji : String
    , createdAt : Posix
    }


{-| A rectangle that expresses a bounding box in absolute coordinates.
-}
type alias Rectangle =
    { x : Float
    , y : Float
    , width : Float
    , height : Float
    }


type alias RectangleNode =
    { rectangularShapeTraits : RectangularShapeTraits
    , type_ : RectangleNodeType
    }


type RectangleNodeType
    = RectangleNodeTypeRECTANGLE


rectangleNodeTypeVariants : List RectangleNodeType
rectangleNodeTypeVariants =
    [ RectangleNodeTypeRECTANGLE
    ]


type alias RectangularShapeTraits =
    { cornerTrait : CornerTrait
    , defaultShapeTraits : DefaultShapeTraits
    , individualStrokesTrait : IndividualStrokesTrait
    , cornerRadius : Maybe Float
    , cornerSmoothing : Maybe Float
    , rectangleCornerRadii : Maybe RectangleCornerRadii
    , individualStrokeWeights : Maybe StrokeWeights
    }


type alias RegularPolygonNode =
    { cornerRadiusShapeTraits : CornerRadiusShapeTraits
    , type_ : RegularPolygonNodeType
    }


type RegularPolygonNodeType
    = RegularPolygonNodeTypeREGULARPOLYGON


regularPolygonNodeTypeVariants : List RegularPolygonNodeType
regularPolygonNodeTypeVariants =
    [ RegularPolygonNodeTypeREGULARPOLYGON
    ]


{-| Pagination cursor
-}
type alias SectionNode =
    { hasChildrenTrait : HasChildrenTrait
    , hasGeometryTrait : HasGeometryTrait
    , hasLayoutTrait : HasLayoutTrait
    , isLayerTrait : IsLayerTrait
    , fills : List Paint
    , styles : Maybe Styles
    , strokes : Maybe (List Paint)
    , strokeWeight : Maybe Float
    , strokeAlign : Maybe StrokeAlign
    , strokeJoin : Maybe StrokeJoin
    , fillGeometry : Maybe (List Path)
    , strokeGeometry : Maybe (List Path)
    , strokeCap : Maybe StrokeCap
    , strokeMiterAngle : Maybe Float
    , children : List SubcanvasNode
    , absoluteBoundingBox : Rectangle
    , absoluteRenderBounds : Maybe Rectangle
    , preserveRatio : Maybe Bool
    , constraints : Maybe LayoutConstraint
    , size : Maybe Vector
    , layoutAlign : Maybe LayoutAlign
    , layoutGrow : Maybe LayoutGrow
    , layoutPositioning : Maybe LayoutPositioning
    , minWidth : Maybe Float
    , maxWidth : Maybe Float
    , minHeight : Maybe Float
    , maxHeight : Maybe Float
    , layoutSizingHorizontal : Maybe LayoutSizingHorizontal
    , layoutSizingVertical : Maybe LayoutSizingVertical
    , type_ : SectionNodeType
    , sectionContentsHidden : Bool
    }


type SectionNodeType
    = SectionNodeTypeSECTION


sectionNodeTypeVariants : List SectionNodeType
sectionNodeTypeVariants =
    [ SectionNodeTypeSECTION
    ]


{-| Geometric shape type.
-}
type ShapeType
    = ShapeTypeSQUARE
    | ShapeTypeELLIPSE
    | ShapeTypeROUNDEDRECTANGLE
    | ShapeTypeDIAMOND
    | ShapeTypeTRIANGLEUP
    | ShapeTypeTRIANGLEDOWN
    | ShapeTypePARALLELOGRAMRIGHT
    | ShapeTypePARALLELOGRAMLEFT
    | ShapeTypeENGDATABASE
    | ShapeTypeENGQUEUE
    | ShapeTypeENGFILE
    | ShapeTypeENGFOLDER
    | ShapeTypeTRAPEZOID
    | ShapeTypePREDEFINEDPROCESS
    | ShapeTypeSHIELD
    | ShapeTypeDOCUMENTSINGLE
    | ShapeTypeDOCUMENTMULTIPLE
    | ShapeTypeMANUALINPUT
    | ShapeTypeHEXAGON
    | ShapeTypeCHEVRON
    | ShapeTypePENTAGON
    | ShapeTypeOCTAGON
    | ShapeTypeSTAR
    | ShapeTypePLUS
    | ShapeTypeARROWLEFT
    | ShapeTypeARROWRIGHT
    | ShapeTypeSUMMINGJUNCTION
    | ShapeTypeOR
    | ShapeTypeSPEECHBUBBLE
    | ShapeTypeINTERNALSTORAGE


shapeTypeVariants : List ShapeType
shapeTypeVariants =
    [ ShapeTypeSQUARE
    , ShapeTypeELLIPSE
    , ShapeTypeROUNDEDRECTANGLE
    , ShapeTypeDIAMOND
    , ShapeTypeTRIANGLEUP
    , ShapeTypeTRIANGLEDOWN
    , ShapeTypePARALLELOGRAMRIGHT
    , ShapeTypePARALLELOGRAMLEFT
    , ShapeTypeENGDATABASE
    , ShapeTypeENGQUEUE
    , ShapeTypeENGFILE
    , ShapeTypeENGFOLDER
    , ShapeTypeTRAPEZOID
    , ShapeTypePREDEFINEDPROCESS
    , ShapeTypeSHIELD
    , ShapeTypeDOCUMENTSINGLE
    , ShapeTypeDOCUMENTMULTIPLE
    , ShapeTypeMANUALINPUT
    , ShapeTypeHEXAGON
    , ShapeTypeCHEVRON
    , ShapeTypePENTAGON
    , ShapeTypeOCTAGON
    , ShapeTypeSTAR
    , ShapeTypePLUS
    , ShapeTypeARROWLEFT
    , ShapeTypeARROWRIGHT
    , ShapeTypeSUMMINGJUNCTION
    , ShapeTypeOR
    , ShapeTypeSPEECHBUBBLE
    , ShapeTypeINTERNALSTORAGE
    ]


type alias ShapeWithTextNode =
    { cornerTrait : CornerTrait
    , hasBlendModeAndOpacityTrait : HasBlendModeAndOpacityTrait
    , hasEffectsTrait : HasEffectsTrait
    , hasLayoutTrait : HasLayoutTrait
    , hasMaskTrait : HasMaskTrait
    , hasTextSublayerTrait : HasTextSublayerTrait
    , isLayerTrait : IsLayerTrait
    , minimalFillsTrait : MinimalFillsTrait
    , minimalStrokesTrait : MinimalStrokesTrait
    , absoluteBoundingBox : Rectangle
    , absoluteRenderBounds : Maybe Rectangle
    , preserveRatio : Maybe Bool
    , constraints : Maybe LayoutConstraint
    , size : Maybe Vector
    , layoutAlign : Maybe LayoutAlign
    , layoutGrow : Maybe LayoutGrow
    , layoutPositioning : Maybe LayoutPositioning
    , minWidth : Maybe Float
    , maxWidth : Maybe Float
    , minHeight : Maybe Float
    , maxHeight : Maybe Float
    , layoutSizingHorizontal : Maybe LayoutSizingHorizontal
    , layoutSizingVertical : Maybe LayoutSizingVertical
    , blendMode : BlendMode
    , opacity : Maybe Float
    , fills : List Paint
    , styles : Maybe Styles
    , isMask : Maybe Bool
    , maskType : Maybe ShapeWithTextNodeMaskType
    , isMaskOutline : Maybe Bool
    , effects : List Effect
    , characters : String
    , cornerRadius : Maybe Float
    , cornerSmoothing : Maybe Float
    , rectangleCornerRadii : Maybe RectangleCornerRadii
    , strokes : Maybe (List Paint)
    , strokeWeight : Maybe Float
    , strokeAlign : Maybe StrokeAlign
    , strokeJoin : Maybe StrokeJoin
    , type_ : ShapeWithTextNodeType
    , shapeType : ShapeType
    }


type ShapeWithTextNodeMaskType
    = ShapeWithTextNodeMaskTypeALPHA
    | ShapeWithTextNodeMaskTypeVECTOR
    | ShapeWithTextNodeMaskTypeLUMINANCE


shapeWithTextNodeMaskTypeVariants : List ShapeWithTextNodeMaskType
shapeWithTextNodeMaskTypeVariants =
    [ ShapeWithTextNodeMaskTypeALPHA
    , ShapeWithTextNodeMaskTypeVECTOR
    , ShapeWithTextNodeMaskTypeLUMINANCE
    ]


type ShapeWithTextNodeType
    = ShapeWithTextNodeTypeSHAPEWITHTEXT


shapeWithTextNodeTypeVariants : List ShapeWithTextNodeType
shapeWithTextNodeTypeVariants =
    [ ShapeWithTextNodeTypeSHAPEWITHTEXT
    ]


{-| A width and a height.
-}
type alias Size =
    { width : Float
    , height : Float
    }


type alias SliceNode =
    { isLayerTrait : IsLayerTrait
    , type_ : SliceNodeType
    }


type SliceNodeType
    = SliceNodeTypeSLICE


sliceNodeTypeVariants : List SliceNodeType
sliceNodeTypeVariants =
    [ SliceNodeTypeSLICE
    ]


type alias SolidPaint =
    { basePaint : BasePaint
    , type_ : SolidPaintType
    , color : RGBA
    , boundVariables : Maybe SolidPaintAllOfBoundVariables
    }


type SolidPaintType
    = SolidPaintTypeSOLID


solidPaintTypeVariants : List SolidPaintType
solidPaintTypeVariants =
    [ SolidPaintTypeSOLID
    ]


{-| The variables bound to a particular field on this paint
-}
type alias SolidPaintAllOfBoundVariables =
    { color : Maybe VariableAlias
    }


type alias StarNode =
    { cornerRadiusShapeTraits : CornerRadiusShapeTraits
    , type_ : StarNodeType
    }


type StarNodeType
    = StarNodeTypeSTAR


starNodeTypeVariants : List StarNodeType
starNodeTypeVariants =
    [ StarNodeTypeSTAR
    ]


type alias StickyNode =
    { hasBlendModeAndOpacityTrait : HasBlendModeAndOpacityTrait
    , hasEffectsTrait : HasEffectsTrait
    , hasLayoutTrait : HasLayoutTrait
    , hasMaskTrait : HasMaskTrait
    , hasTextSublayerTrait : HasTextSublayerTrait
    , isLayerTrait : IsLayerTrait
    , minimalFillsTrait : MinimalFillsTrait
    , absoluteBoundingBox : Rectangle
    , absoluteRenderBounds : Maybe Rectangle
    , preserveRatio : Maybe Bool
    , constraints : Maybe LayoutConstraint
    , size : Maybe Vector
    , layoutAlign : Maybe LayoutAlign
    , layoutGrow : Maybe LayoutGrow
    , layoutPositioning : Maybe LayoutPositioning
    , minWidth : Maybe Float
    , maxWidth : Maybe Float
    , minHeight : Maybe Float
    , maxHeight : Maybe Float
    , layoutSizingHorizontal : Maybe LayoutSizingHorizontal
    , layoutSizingVertical : Maybe LayoutSizingVertical
    , blendMode : BlendMode
    , opacity : Maybe Float
    , fills : List Paint
    , styles : Maybe Styles
    , isMask : Maybe Bool
    , maskType : Maybe StickyNodeMaskType
    , isMaskOutline : Maybe Bool
    , effects : List Effect
    , characters : String
    , type_ : StickyNodeType
    , authorVisible : Maybe Bool
    }


type StickyNodeMaskType
    = StickyNodeMaskTypeALPHA
    | StickyNodeMaskTypeVECTOR
    | StickyNodeMaskTypeLUMINANCE


stickyNodeMaskTypeVariants : List StickyNodeMaskType
stickyNodeMaskTypeVariants =
    [ StickyNodeMaskTypeALPHA
    , StickyNodeMaskTypeVECTOR
    , StickyNodeMaskTypeLUMINANCE
    ]


type StickyNodeType
    = StickyNodeTypeSTICKY


stickyNodeTypeVariants : List StickyNodeType
stickyNodeTypeVariants =
    [ StickyNodeTypeSTICKY
    ]


{-| Individual stroke weights
-}
type alias StrokeWeights =
    { top : Float
    , right : Float
    , bottom : Float
    , left : Float
    }


{-| A set of properties that can be applied to nodes and published. Styles for a property can be created in the corresponding property's panel while editing a file.
-}
type alias Style =
    { key : String
    , name : String
    , description : String
    , remote : Bool
    , styleType : StyleType
    }


{-| The type of style
-}
type StyleType
    = StyleTypeFILL
    | StyleTypeTEXT
    | StyleTypeEFFECT
    | StyleTypeGRID


styleTypeVariants : List StyleType
styleTypeVariants =
    [ StyleTypeFILL
    , StyleTypeTEXT
    , StyleTypeEFFECT
    , StyleTypeGRID
    ]


type SubcanvasNode
    = SubcanvasNodeComponentNode ComponentNode
    | SubcanvasNodeComponentSetNode ComponentSetNode
    | SubcanvasNodeConnectorNode ConnectorNode
    | SubcanvasNodeEllipseNode EllipseNode
    | SubcanvasNodeFrameNode FrameNode
    | SubcanvasNodeGroupNode GroupNode
    | SubcanvasNodeInstanceNode InstanceNode
    | SubcanvasNodeLineNode LineNode
    | SubcanvasNodeLinkUnfurlNode LinkUnfurlNode
    | SubcanvasNodeRectangleNode RectangleNode
    | SubcanvasNodeRegularPolygonNode RegularPolygonNode
    | SubcanvasNodeSectionNode SectionNode
    | SubcanvasNodeShapeWithTextNode ShapeWithTextNode
    | SubcanvasNodeSliceNode SliceNode
    | SubcanvasNodeStarNode StarNode
    | SubcanvasNodeStickyNode StickyNode
    | SubcanvasNodeTableCellNode TableCellNode
    | SubcanvasNodeTableNode TableNode
    | SubcanvasNodeTextNode TextNode
    | SubcanvasNodeVectorNode VectorNode


type alias TableCellNode =
    { hasLayoutTrait : HasLayoutTrait
    , hasTextSublayerTrait : HasTextSublayerTrait
    , isLayerTrait : IsLayerTrait
    , minimalFillsTrait : MinimalFillsTrait
    , fills : List Paint
    , styles : Maybe Styles
    , absoluteBoundingBox : Rectangle
    , absoluteRenderBounds : Maybe Rectangle
    , preserveRatio : Maybe Bool
    , constraints : Maybe LayoutConstraint
    , size : Maybe Vector
    , layoutAlign : Maybe LayoutAlign
    , layoutGrow : Maybe LayoutGrow
    , layoutPositioning : Maybe LayoutPositioning
    , minWidth : Maybe Float
    , maxWidth : Maybe Float
    , minHeight : Maybe Float
    , maxHeight : Maybe Float
    , layoutSizingHorizontal : Maybe LayoutSizingHorizontal
    , layoutSizingVertical : Maybe LayoutSizingVertical
    , characters : String
    , type_ : TableCellNodeType
    }


type LayoutAlign
    = LayoutAlignINHERIT
    | LayoutAlignSTRETCH
    | LayoutAlignMIN
    | LayoutAlignCENTER
    | LayoutAlignMAX


type TableCellNodeType
    = TableCellNodeTypeTABLECELL


tableCellNodeTypeVariants : List TableCellNodeType
tableCellNodeTypeVariants =
    [ TableCellNodeTypeTABLECELL
    ]


type alias TableNode =
    { hasBlendModeAndOpacityTrait : HasBlendModeAndOpacityTrait
    , hasChildrenTrait : HasChildrenTrait
    , hasEffectsTrait : HasEffectsTrait
    , hasLayoutTrait : HasLayoutTrait
    , isLayerTrait : IsLayerTrait
    , minimalStrokesTrait : MinimalStrokesTrait
    , children : List SubcanvasNode
    , absoluteBoundingBox : Rectangle
    , absoluteRenderBounds : Maybe Rectangle
    , preserveRatio : Maybe Bool
    , constraints : Maybe LayoutConstraint
    , size : Maybe Vector
    , layoutAlign : Maybe LayoutAlign
    , layoutGrow : Maybe LayoutGrow
    , layoutPositioning : Maybe LayoutPositioning
    , minWidth : Maybe Float
    , maxWidth : Maybe Float
    , minHeight : Maybe Float
    , maxHeight : Maybe Float
    , layoutSizingHorizontal : Maybe LayoutSizingHorizontal
    , layoutSizingVertical : Maybe LayoutSizingVertical
    , strokes : Maybe (List Paint)
    , strokeWeight : Maybe Float
    , strokeAlign : Maybe StrokeAlign
    , strokeJoin : Maybe StrokeJoin
    , effects : List Effect
    , blendMode : BlendMode
    , opacity : Maybe Float
    , type_ : TableNodeType
    }


type LayoutPositioning
    = LayoutPositioningAUTO
    | LayoutPositioningABSOLUTE


type TableNodeType
    = TableNodeTypeTABLE


tableNodeTypeVariants : List TableNodeType
tableNodeTypeVariants =
    [ TableNodeTypeTABLE
    ]


type alias TextNode =
    { defaultShapeTraits : DefaultShapeTraits
    , typePropertiesTrait : TypePropertiesTrait
    , characters : String
    , style : TypeStyle
    , styleOverrideTable : TypeStyle
    , lineTypes : List TextNodeLineTypes
    , type_ : TextNodeType
    }


type TextNodeLineTypes
    = TextNodeLineTypesNONE
    | TextNodeLineTypesORDERED
    | TextNodeLineTypesUNORDERED


textNodeLineTypesVariants : List TextNodeLineTypes
textNodeLineTypesVariants =
    [ TextNodeLineTypesNONE
    , TextNodeLineTypesORDERED
    , TextNodeLineTypesUNORDERED
    ]


type TextNodeType
    = TextNodeTypeTEXT


textNodeTypeVariants : List TextNodeType
textNodeTypeVariants =
    [ TextNodeTypeTEXT
    ]


type alias TransitionSourceTrait =
    { transitionNodeID : Maybe String
    , transitionDuration : Maybe Float
    , transitionEasing : Maybe EasingType
    }


type alias TypePropertiesTrait =
    { characters : String
    , style : TypeStyle
    , characterStyleOverrides : List Float
    , styleOverrideTable : TypeStyle
    , lineTypes : List TypePropertiesTraitLineTypes
    , lineIndentations : List Float
    }


type TypePropertiesTraitLineTypes
    = TypePropertiesTraitLineTypesNONE
    | TypePropertiesTraitLineTypesORDERED
    | TypePropertiesTraitLineTypesUNORDERED


typePropertiesTraitLineTypesVariants : List TypePropertiesTraitLineTypes
typePropertiesTraitLineTypesVariants =
    [ TypePropertiesTraitLineTypesNONE
    , TypePropertiesTraitLineTypesORDERED
    , TypePropertiesTraitLineTypesUNORDERED
    ]


{-| Metadata for character formatting.
-}
type alias TypeStyle =
    { fontFamily : Maybe String
    , fontPostScriptName : Maybe String
    , paragraphSpacing : Maybe Float
    , paragraphIndent : Maybe Float
    , listSpacing : Maybe Float
    , italic : Maybe Bool
    , fontWeight : Maybe Float
    , fontSize : Maybe Float
    , textCase : Maybe TypeStyleTextCase
    , textDecoration : Maybe TypeStyleTextDecoration
    , textAutoResize : Maybe TypeStyleTextAutoResize
    , textTruncation : Maybe TypeStyleTextTruncation
    , maxLines : Maybe Float
    , textAlignHorizontal : Maybe TypeStyleTextAlignHorizontal
    , textAlignVertical : Maybe TypeStyleTextAlignVertical
    , letterSpacing : Maybe Float
    , fills : Maybe (List Paint)
    , hyperlink : Maybe Hyperlink
    , opentypeFlags : Maybe Float
    , lineHeightPx : Maybe Float
    , lineHeightPercent : Maybe Float
    , lineHeightPercentFontSize : Maybe Float
    , lineHeightUnit : Maybe TypeStyleLineHeightUnit
    , boundVariables : Maybe TypeStyleBoundVariables
    }


type TypeStyleTextCase
    = TypeStyleTextCaseUPPER
    | TypeStyleTextCaseLOWER
    | TypeStyleTextCaseTITLE
    | TypeStyleTextCaseSMALLCAPS
    | TypeStyleTextCaseSMALLCAPSFORCED


typeStyleTextCaseVariants : List TypeStyleTextCase
typeStyleTextCaseVariants =
    [ TypeStyleTextCaseUPPER
    , TypeStyleTextCaseLOWER
    , TypeStyleTextCaseTITLE
    , TypeStyleTextCaseSMALLCAPS
    , TypeStyleTextCaseSMALLCAPSFORCED
    ]


type TypeStyleTextDecoration
    = TypeStyleTextDecorationNONE
    | TypeStyleTextDecorationSTRIKETHROUGH
    | TypeStyleTextDecorationUNDERLINE


typeStyleTextDecorationVariants : List TypeStyleTextDecoration
typeStyleTextDecorationVariants =
    [ TypeStyleTextDecorationNONE
    , TypeStyleTextDecorationSTRIKETHROUGH
    , TypeStyleTextDecorationUNDERLINE
    ]


type TypeStyleTextAutoResize
    = TypeStyleTextAutoResizeNONE
    | TypeStyleTextAutoResizeWIDTHANDHEIGHT
    | TypeStyleTextAutoResizeHEIGHT
    | TypeStyleTextAutoResizeTRUNCATE


typeStyleTextAutoResizeVariants : List TypeStyleTextAutoResize
typeStyleTextAutoResizeVariants =
    [ TypeStyleTextAutoResizeNONE
    , TypeStyleTextAutoResizeWIDTHANDHEIGHT
    , TypeStyleTextAutoResizeHEIGHT
    , TypeStyleTextAutoResizeTRUNCATE
    ]


type TypeStyleTextTruncation
    = TypeStyleTextTruncationDISABLED
    | TypeStyleTextTruncationENDING


typeStyleTextTruncationVariants : List TypeStyleTextTruncation
typeStyleTextTruncationVariants =
    [ TypeStyleTextTruncationDISABLED
    , TypeStyleTextTruncationENDING
    ]


type TypeStyleTextAlignHorizontal
    = TypeStyleTextAlignHorizontalLEFT
    | TypeStyleTextAlignHorizontalRIGHT
    | TypeStyleTextAlignHorizontalCENTER
    | TypeStyleTextAlignHorizontalJUSTIFIED


typeStyleTextAlignHorizontalVariants : List TypeStyleTextAlignHorizontal
typeStyleTextAlignHorizontalVariants =
    [ TypeStyleTextAlignHorizontalLEFT
    , TypeStyleTextAlignHorizontalRIGHT
    , TypeStyleTextAlignHorizontalCENTER
    , TypeStyleTextAlignHorizontalJUSTIFIED
    ]


type TypeStyleTextAlignVertical
    = TypeStyleTextAlignVerticalTOP
    | TypeStyleTextAlignVerticalCENTER
    | TypeStyleTextAlignVerticalBOTTOM


typeStyleTextAlignVerticalVariants : List TypeStyleTextAlignVertical
typeStyleTextAlignVerticalVariants =
    [ TypeStyleTextAlignVerticalTOP
    , TypeStyleTextAlignVerticalCENTER
    , TypeStyleTextAlignVerticalBOTTOM
    ]


type TypeStyleLineHeightUnit
    = TypeStyleLineHeightUnitPIXELS
    | TypeStyleLineHeightUnitFONTSIZE
    | TypeStyleLineHeightUnitINTRINSIC


typeStyleLineHeightUnitVariants : List TypeStyleLineHeightUnit
typeStyleLineHeightUnitVariants =
    [ TypeStyleLineHeightUnitPIXELS
    , TypeStyleLineHeightUnitFONTSIZE
    , TypeStyleLineHeightUnitINTRINSIC
    ]


{-| The variables bound to a particular field on this style
-}
type alias TypeStyleBoundVariables =
    { fontFamily : Maybe VariableAlias
    , fontSize : Maybe VariableAlias
    , fontStyle : Maybe VariableAlias
    , fontWeight : Maybe VariableAlias
    , letterSpacing : Maybe VariableAlias
    , lineHeight : Maybe VariableAlias
    , paragraphSpacing : Maybe VariableAlias
    , paragraphIndent : Maybe VariableAlias
    }


{-| A description of a user.
-}
type alias User =
    { id : String
    , handle : String
    , imgUrl : String
    }


{-| Contains a variable alias
-}
type alias VariableAlias =
    { type_ : VariableAliasType
    , id : String
    }


type VariableAliasType
    = VariableAliasTypeVARIABLEALIAS


variableAliasTypeVariants : List VariableAliasType
variableAliasTypeVariants =
    [ VariableAliasTypeVARIABLEALIAS
    ]


type VariableChange
    = VariableChangeVariableCreate VariableCreate
    | VariableChangeVariableDelete VariableDelete
    | VariableChangeVariableUpdate VariableUpdate


{-| An object containing platform-specific code syntax definitions for a variable. All platforms are optional.
-}
type alias VariableCodeSyntax =
    { wEB : Maybe String
    , aNDROID : Maybe String
    , iOS : Maybe String
    }


type VariableCollectionChange
    = VariableCollectionChangeVariableCollectionCreate VariableCollectionCreate
    | VariableCollectionChangeVariableCollectionDelete VariableCollectionDelete
    | VariableCollectionChangeVariableCollectionUpdate VariableCollectionUpdate


{-| An object that contains details about creating a `VariableCollection`.
-}
type alias VariableCollectionCreate =
    { action : VariableCollectionCreateAction
    , id : Maybe String
    , name : String
    , initialModeId : Maybe String
    , hiddenFromPublishing : Maybe Bool
    }


type VariableCollectionCreateAction
    = VariableCollectionCreateActionCREATE


variableCollectionCreateActionVariants : List VariableCollectionCreateAction
variableCollectionCreateActionVariants =
    [ VariableCollectionCreateActionCREATE
    ]


{-| An object that contains details about deleting a `VariableCollection`.
-}
type alias VariableCollectionDelete =
    { action : VariableCollectionDeleteAction
    , id : String
    }


type VariableCollectionDeleteAction
    = VariableCollectionDeleteActionDELETE


variableCollectionDeleteActionVariants : List VariableCollectionDeleteAction
variableCollectionDeleteActionVariants =
    [ VariableCollectionDeleteActionDELETE
    ]


{-| An object that contains details about updating a `VariableCollection`.
-}
type alias VariableCollectionUpdate =
    { action : VariableCollectionUpdateAction
    , id : String
    , name : Maybe String
    , hiddenFromPublishing : Maybe Bool
    }


type VariableCollectionUpdateAction
    = VariableCollectionUpdateActionUPDATE


variableCollectionUpdateActionVariants : List VariableCollectionUpdateAction
variableCollectionUpdateActionVariants =
    [ VariableCollectionUpdateActionUPDATE
    ]


{-| An object that contains details about creating a `Variable`.
-}
type alias VariableCreate =
    { action : VariableCreateAction
    , id : Maybe String
    , name : String
    , variableCollectionId : String
    , resolvedType : VariableCreateResolvedType
    , description : Maybe String
    , hiddenFromPublishing : Maybe Bool
    , scopes : Maybe (List VariableScope)
    , codeSyntax : Maybe VariableCodeSyntax
    }


type VariableCreateAction
    = VariableCreateActionCREATE


variableCreateActionVariants : List VariableCreateAction
variableCreateActionVariants =
    [ VariableCreateActionCREATE
    ]


type VariableCreateResolvedType
    = VariableCreateResolvedTypeBOOLEAN
    | VariableCreateResolvedTypeFLOAT
    | VariableCreateResolvedTypeSTRING
    | VariableCreateResolvedTypeCOLOR


variableCreateResolvedTypeVariants : List VariableCreateResolvedType
variableCreateResolvedTypeVariants =
    [ VariableCreateResolvedTypeBOOLEAN
    , VariableCreateResolvedTypeFLOAT
    , VariableCreateResolvedTypeSTRING
    , VariableCreateResolvedTypeCOLOR
    ]


{-| An object that contains details about deleting a `Variable`.
-}
type alias VariableDelete =
    { action : VariableDeleteAction
    , id : String
    }


type VariableDeleteAction
    = VariableDeleteActionDELETE


variableDeleteActionVariants : List VariableDeleteAction
variableDeleteActionVariants =
    [ VariableDeleteActionDELETE
    ]


type VariableModeChange
    = VariableModeChangeVariableModeCreate VariableModeCreate
    | VariableModeChangeVariableModeDelete VariableModeDelete
    | VariableModeChangeVariableModeUpdate VariableModeUpdate


{-| An object that contains details about creating a `VariableMode`.
-}
type alias VariableModeCreate =
    { action : VariableModeCreateAction
    , id : Maybe String
    , name : String
    , variableCollectionId : String
    }


type VariableModeCreateAction
    = VariableModeCreateActionCREATE


variableModeCreateActionVariants : List VariableModeCreateAction
variableModeCreateActionVariants =
    [ VariableModeCreateActionCREATE
    ]


{-| An object that contains details about deleting a `VariableMode`.
-}
type alias VariableModeDelete =
    { action : VariableModeDeleteAction
    , id : String
    }


type VariableModeDeleteAction
    = VariableModeDeleteActionDELETE


variableModeDeleteActionVariants : List VariableModeDeleteAction
variableModeDeleteActionVariants =
    [ VariableModeDeleteActionDELETE
    ]


{-| An object that contains details about updating a `VariableMode`.
-}
type alias VariableModeUpdate =
    { action : VariableModeUpdateAction
    , id : String
    , name : Maybe String
    , variableCollectionId : String
    }


type VariableModeUpdateAction
    = VariableModeUpdateActionUPDATE


variableModeUpdateActionVariants : List VariableModeUpdateAction
variableModeUpdateActionVariants =
    [ VariableModeUpdateActionUPDATE
    ]


{-| An object that represents a value for a given mode of a variable. All properties are required.
-}
type alias VariableModeValue =
    { variableId : String
    , modeId : String
    , value : VariableValue
    }


{-| Scopes allow a variable to be shown/hidden in the variable picker UI for various fields. This declutters the Figma UI if you have a large number of variables. Currently only supported on `FLOAT` and `COLOR` variables. `ALL_SCOPES` is a special scope that means that the variable will be shown in the picker UI for all current and any future fields. If `ALL_SCOPES` is set, no additional scopes can be set. Likewise, `ALL_FILLS` is a special scope that means that the variable will be shown in the picker UI for all current and any future color fill fields. If `ALL_FILLS` is set, no additional fill scopes can be set. Valid scopes for `FLOAT` variables: - `ALL_SCOPES` - `TEXT_CONTENT` - `WIDTH_HEIGHT` - `GAP` - `STROKE_FLOAT` - `EFFECT_FLOAT` - `OPACITY` Valid scopes for `COLOR` variables: - `ALL_SCOPES` - `ALL_FILLS` - `FRAME_FILL` - `SHAPE_FILL` - `TEXT_FILL` - `STROKE_COLOR` - `EFFECT_COLOR`
-}
type VariableScope
    = VariableScopeALLSCOPES
    | VariableScopeTEXTCONTENT
    | VariableScopeCORNERRADIUS
    | VariableScopeWIDTHHEIGHT
    | VariableScopeGAP
    | VariableScopeALLFILLS
    | VariableScopeFRAMEFILL
    | VariableScopeSHAPEFILL
    | VariableScopeTEXTFILL
    | VariableScopeSTROKECOLOR
    | VariableScopeSTROKEFLOAT
    | VariableScopeEFFECTFLOAT
    | VariableScopeEFFECTCOLOR
    | VariableScopeOPACITY


variableScopeVariants : List VariableScope
variableScopeVariants =
    [ VariableScopeALLSCOPES
    , VariableScopeTEXTCONTENT
    , VariableScopeCORNERRADIUS
    , VariableScopeWIDTHHEIGHT
    , VariableScopeGAP
    , VariableScopeALLFILLS
    , VariableScopeFRAMEFILL
    , VariableScopeSHAPEFILL
    , VariableScopeTEXTFILL
    , VariableScopeSTROKECOLOR
    , VariableScopeSTROKEFLOAT
    , VariableScopeEFFECTFLOAT
    , VariableScopeEFFECTCOLOR
    , VariableScopeOPACITY
    ]


{-| An object that contains details about updating a `Variable`.
-}
type alias VariableUpdate =
    { action : VariableUpdateAction
    , id : String
    , name : Maybe String
    , description : Maybe String
    , hiddenFromPublishing : Maybe Bool
    , scopes : Maybe (List VariableScope)
    , codeSyntax : Maybe VariableCodeSyntax
    }


type VariableUpdateAction
    = VariableUpdateActionUPDATE


variableUpdateActionVariants : List VariableUpdateAction
variableUpdateActionVariants =
    [ VariableUpdateActionUPDATE
    ]


{-| The value for the variable. The value must match the variable's type. If setting to a variable alias, the alias must resolve to this type.
-}
type VariableValue
    = VariableValueBool Bool
    | VariableValueFloat Float
    | VariableValueRGB RGB
    | VariableValueRGBA RGBA
    | VariableValueString String
    | VariableValueVariableAlias VariableAlias


{-| A 2d vector.
-}
type alias Vector =
    { x : Float
    , y : Float
    }


type alias VectorNode =
    { cornerRadiusShapeTraits : CornerRadiusShapeTraits
    , type_ : VectorNodeType
    }


type VectorNodeType
    = VectorNodeTypeVECTOR


vectorNodeTypeVariants : List VectorNodeType
vectorNodeTypeVariants =
    [ VectorNodeTypeVECTOR
    ]


{-| A version of a file
-}
type alias Version =
    { id : String
    , createdAt : Posix
    , label : Maybe String
    , description : Maybe String
    , user : User
    , thumbnailUrl : Maybe String
    }



-- DECODER


arcDataDecoder : Json.Decode.Decoder ArcData
arcDataDecoder =
    Json.Decode.succeed ArcData
        |> decode "startingAngle" Json.Decode.float
        |> decode "endingAngle" Json.Decode.float
        |> decode "innerRadius" Json.Decode.float


basePaintDecoder : Json.Decode.Decoder BasePaint
basePaintDecoder =
    Json.Decode.succeed BasePaint
        |> maybeDecode "visible" Json.Decode.bool (Just True)
        |> maybeDecode "opacity" Json.Decode.float (Just 1)
        |> decode "blendMode" blendModeDecoder


baseShadowEffectDecoder : Json.Decode.Decoder BaseShadowEffect
baseShadowEffectDecoder =
    Json.Decode.succeed BaseShadowEffect
        |> decode "color" rGBADecoder
        |> decode "blendMode" blendModeDecoder
        |> decode "offset" vectorDecoder
        |> decode "radius" Json.Decode.float
        |> maybeDecode "spread" Json.Decode.float (Just 0)
        |> decode "visible" Json.Decode.bool
        |> maybeDecode "boundVariables" baseShadowEffectBoundVariablesDecoder Nothing


baseShadowEffectBoundVariablesDecoder : Json.Decode.Decoder BaseShadowEffectBoundVariables
baseShadowEffectBoundVariablesDecoder =
    Json.Decode.succeed BaseShadowEffectBoundVariables
        |> maybeDecode "radius" variableAliasDecoder Nothing
        |> maybeDecode "spread" variableAliasDecoder Nothing
        |> maybeDecode "color" variableAliasDecoder Nothing
        |> maybeDecode "offsetX" variableAliasDecoder Nothing
        |> maybeDecode "offsetY" variableAliasDecoder Nothing


blendModeDecoder : Json.Decode.Decoder BlendMode
blendModeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "PASS_THROUGH" ->
                        Json.Decode.succeed BlendModePASSTHROUGH

                    "NORMAL" ->
                        Json.Decode.succeed BlendModeNORMAL

                    "DARKEN" ->
                        Json.Decode.succeed BlendModeDARKEN

                    "MULTIPLY" ->
                        Json.Decode.succeed BlendModeMULTIPLY

                    "LINEAR_BURN" ->
                        Json.Decode.succeed BlendModeLINEARBURN

                    "COLOR_BURN" ->
                        Json.Decode.succeed BlendModeCOLORBURN

                    "LIGHTEN" ->
                        Json.Decode.succeed BlendModeLIGHTEN

                    "SCREEN" ->
                        Json.Decode.succeed BlendModeSCREEN

                    "LINEAR_DODGE" ->
                        Json.Decode.succeed BlendModeLINEARDODGE

                    "COLOR_DODGE" ->
                        Json.Decode.succeed BlendModeCOLORDODGE

                    "OVERLAY" ->
                        Json.Decode.succeed BlendModeOVERLAY

                    "SOFT_LIGHT" ->
                        Json.Decode.succeed BlendModeSOFTLIGHT

                    "HARD_LIGHT" ->
                        Json.Decode.succeed BlendModeHARDLIGHT

                    "DIFFERENCE" ->
                        Json.Decode.succeed BlendModeDIFFERENCE

                    "EXCLUSION" ->
                        Json.Decode.succeed BlendModeEXCLUSION

                    "HUE" ->
                        Json.Decode.succeed BlendModeHUE

                    "SATURATION" ->
                        Json.Decode.succeed BlendModeSATURATION

                    "COLOR" ->
                        Json.Decode.succeed BlendModeCOLOR

                    "LUMINOSITY" ->
                        Json.Decode.succeed BlendModeLUMINOSITY

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


blurEffectDecoder : Json.Decode.Decoder BlurEffect
blurEffectDecoder =
    Json.Decode.succeed BlurEffect
        |> decode "type" blurEffectTypeDecoder
        |> decode "visible" Json.Decode.bool
        |> decode "radius" Json.Decode.float
        |> maybeDecode "boundVariables" blurEffectBoundVariablesDecoder Nothing


blurEffectTypeDecoder : Json.Decode.Decoder BlurEffectType
blurEffectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "LAYER_BLUR" ->
                        Json.Decode.succeed BlurEffectTypeLAYERBLUR

                    "BACKGROUND_BLUR" ->
                        Json.Decode.succeed BlurEffectTypeBACKGROUNDBLUR

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


blurEffectBoundVariablesDecoder : Json.Decode.Decoder BlurEffectBoundVariables
blurEffectBoundVariablesDecoder =
    Json.Decode.succeed BlurEffectBoundVariables
        |> maybeDecode "radius" variableAliasDecoder Nothing


canvasNodeDecoder : Json.Decode.Decoder CanvasNode
canvasNodeDecoder =
    Json.Decode.succeed CanvasNode
        |> decodeChain isLayerTraitDecoder
        |> decode "type" canvasNodeTypeDecoder
        |> decode "children" subcanvasNodeListDecoder
        |> decode "backgroundColor" rGBADecoder


canvasNodeTypeDecoder : Json.Decode.Decoder CanvasNodeType
canvasNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "CANVAS" ->
                        Json.Decode.succeed CanvasNodeTypeCANVAS

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


colorStopDecoder : Json.Decode.Decoder ColorStop
colorStopDecoder =
    Json.Decode.succeed ColorStop
        |> decode "position" Json.Decode.float
        |> decode "color" rGBADecoder
        |> maybeDecode "boundVariables" colorStopBoundVariablesDecoder Nothing


colorStopBoundVariablesDecoder : Json.Decode.Decoder ColorStopBoundVariables
colorStopBoundVariablesDecoder =
    Json.Decode.succeed ColorStopBoundVariables
        |> maybeDecode "color" variableAliasDecoder Nothing


componentDecoder : Json.Decode.Decoder Component
componentDecoder =
    Json.Decode.succeed Component
        |> decode "key" Json.Decode.string
        |> decode "name" Json.Decode.string
        |> decode "description" Json.Decode.string
        |> maybeDecode "componentSetId" Json.Decode.string Nothing
        |> decode "documentationLinks" (Json.Decode.list documentationLinkDecoder)
        |> decode "remote" Json.Decode.bool


componentsDecoder : Json.Decode.Decoder Components
componentsDecoder =
    Json.Decode.dict componentDecoder


componentNodeDecoder : Json.Decode.Decoder ComponentNode
componentNodeDecoder =
    Json.Decode.succeed ComponentNode
        |> decodeChain componentPropertiesTraitDecoder
        |> decodeChain frameTraitsDecoder
        |> maybeDecode "componentPropertyDefinitions" componentPropertyDefinitionsDecoder Nothing
        |> decode "type" componentNodeTypeDecoder


componentNodeTypeDecoder : Json.Decode.Decoder ComponentNodeType
componentNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "COMPONENT" ->
                        Json.Decode.succeed ComponentNodeTypeCOMPONENT

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


componentPropertiesTraitDecoder : Json.Decode.Decoder ComponentPropertiesTrait
componentPropertiesTraitDecoder =
    Json.Decode.succeed ComponentPropertiesTrait
        |> maybeDecode "componentPropertyDefinitions" componentPropertyDefinitionsDecoder Nothing


componentPropertyDecoder : Json.Decode.Decoder ComponentProperty
componentPropertyDecoder =
    Json.Decode.succeed ComponentProperty
        |> decode "type" componentPropertyTypeDecoder
        |> decode "value" componentPropertyValueDecoder
        |> maybeDecode "preferredValues" (Json.Decode.list instanceSwapPreferredValueDecoder) Nothing
        |> maybeDecode "boundVariables" componentPropertyBoundVariablesDecoder Nothing


componentPropertiesDecoder : Json.Decode.Decoder ComponentProperties
componentPropertiesDecoder =
    Json.Decode.dict componentPropertyDecoder


componentPropertyBoundVariablesDecoder : Json.Decode.Decoder ComponentPropertyBoundVariables
componentPropertyBoundVariablesDecoder =
    Json.Decode.succeed ComponentPropertyBoundVariables
        |> maybeDecode "value" variableAliasDecoder Nothing


componentPropertyDefinitionDecoder : Json.Decode.Decoder ComponentPropertyDefinition
componentPropertyDefinitionDecoder =
    Json.Decode.succeed ComponentPropertyDefinition
        |> decode "type" componentPropertyTypeDecoder
        |> decode "defaultValue" componentPropertyDefinitionDefaultValueDecoder
        |> maybeDecode "variantOptions" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "preferredValues" (Json.Decode.list instanceSwapPreferredValueDecoder) Nothing


componentPropertyDefinitionsDecoder : Json.Decode.Decoder ComponentPropertyDefinitions
componentPropertyDefinitionsDecoder =
    Json.Decode.dict componentPropertyDefinitionDecoder


componentPropertyDefinitionDefaultValueDecoder : Json.Decode.Decoder ComponentPropertyDefinitionDefaultValue
componentPropertyDefinitionDefaultValueDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map ComponentPropertyDefinitionDefaultValueBool Json.Decode.bool
        , Json.Decode.map ComponentPropertyDefinitionDefaultValueString Json.Decode.string
        ]


componentPropertyTypeDecoder : Json.Decode.Decoder ComponentPropertyType
componentPropertyTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "BOOLEAN" ->
                        Json.Decode.succeed ComponentPropertyTypeBOOLEAN

                    "INSTANCE_SWAP" ->
                        Json.Decode.succeed ComponentPropertyTypeINSTANCESWAP

                    "TEXT" ->
                        Json.Decode.succeed ComponentPropertyTypeTEXT

                    "VARIANT" ->
                        Json.Decode.succeed ComponentPropertyTypeVARIANT

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


componentPropertyValueDecoder : Json.Decode.Decoder ComponentPropertyValue
componentPropertyValueDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map ComponentPropertyValueBool Json.Decode.bool
        , Json.Decode.map ComponentPropertyValueString Json.Decode.string
        ]


componentSetDecoder : Json.Decode.Decoder ComponentSet
componentSetDecoder =
    Json.Decode.succeed ComponentSet
        |> decode "key" Json.Decode.string
        |> decode "name" Json.Decode.string
        |> decode "description" Json.Decode.string
        |> maybeDecode "documentationLinks" (Json.Decode.list documentationLinkDecoder) Nothing
        |> maybeDecode "remote" Json.Decode.bool Nothing


componentSetNodeDecoder : Json.Decode.Decoder ComponentSetNode
componentSetNodeDecoder =
    Json.Decode.succeed ComponentSetNode
        |> decodeChain componentPropertiesTraitDecoder
        |> decodeChain frameTraitsDecoder
        |> maybeDecode "componentPropertyDefinitions" componentPropertyDefinitionsDecoder Nothing
        |> decode "type" componentSetNodeTypeDecoder


componentSetNodeTypeDecoder : Json.Decode.Decoder ComponentSetNodeType
componentSetNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "COMPONENT_SET" ->
                        Json.Decode.succeed ComponentSetNodeTypeCOMPONENTSET

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


connectorEndpointDecoder : Json.Decode.Decoder ConnectorEndpoint
connectorEndpointDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map ConnectorEndpointConnectorEndpointOneOf connectorEndpointOneOfDecoder
        , Json.Decode.map ConnectorEndpointConnectorEndpointOneOf1 connectorEndpointOneOf1Decoder
        ]


connectorEndpointOneOfDecoder : Json.Decode.Decoder ConnectorEndpointOneOf
connectorEndpointOneOfDecoder =
    Json.Decode.succeed ConnectorEndpointOneOf
        |> maybeDecode "endpointNodeId" Json.Decode.string Nothing
        |> maybeDecode "position" vectorDecoder Nothing


connectorEndpointOneOf1Decoder : Json.Decode.Decoder ConnectorEndpointOneOf1
connectorEndpointOneOf1Decoder =
    Json.Decode.succeed ConnectorEndpointOneOf1
        |> maybeDecode "endpointNodeId" Json.Decode.string Nothing
        |> maybeDecode "magnet" connectorEndpointOneOf1MagnetDecoder Nothing


connectorEndpointOneOf1MagnetDecoder : Json.Decode.Decoder ConnectorEndpointOneOf1Magnet
connectorEndpointOneOf1MagnetDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "AUTO" ->
                        Json.Decode.succeed ConnectorEndpointOneOf1MagnetAUTO

                    "TOP" ->
                        Json.Decode.succeed ConnectorEndpointOneOf1MagnetTOP

                    "BOTTOM" ->
                        Json.Decode.succeed ConnectorEndpointOneOf1MagnetBOTTOM

                    "LEFT" ->
                        Json.Decode.succeed ConnectorEndpointOneOf1MagnetLEFT

                    "RIGHT" ->
                        Json.Decode.succeed ConnectorEndpointOneOf1MagnetRIGHT

                    "CENTER" ->
                        Json.Decode.succeed ConnectorEndpointOneOf1MagnetCENTER

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


connectorLineTypeDecoder : Json.Decode.Decoder ConnectorLineType
connectorLineTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "STRAIGHT" ->
                        Json.Decode.succeed ConnectorLineTypeSTRAIGHT

                    "ELBOWED" ->
                        Json.Decode.succeed ConnectorLineTypeELBOWED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


connectorNodeDecoder : Json.Decode.Decoder ConnectorNode
connectorNodeDecoder =
    Json.Decode.succeed ConnectorNode
        |> decodeChain hasBlendModeAndOpacityTraitDecoder
        |> decodeChain hasEffectsTraitDecoder
        |> decodeChain hasLayoutTraitDecoder
        |> decodeChain hasTextSublayerTraitDecoder
        |> decodeChain isLayerTraitDecoder
        |> decodeChain minimalStrokesTraitDecoder
        |> decode "absoluteBoundingBox" rectangleDecoder
        |> decodeNullable "absoluteRenderBounds" rectangleDecoder
        |> maybeDecode "preserveRatio" Json.Decode.bool (Just False)
        |> maybeDecode "constraints" layoutConstraintDecoder Nothing
        |> maybeDecode "size" vectorDecoder Nothing
        |> maybeDecode "layoutAlign" layoutAlignDecoder Nothing
        |> maybeDecode "layoutGrow" layoutGrowDecoder (Just LayoutGrow0)
        |> maybeDecode "layoutPositioning" layoutPositioningDecoder (Just LayoutPositioningAUTO)
        |> maybeDecode "minWidth" Json.Decode.float Nothing
        |> maybeDecode "maxWidth" Json.Decode.float (Just 0)
        |> maybeDecode "minHeight" Json.Decode.float (Just 0)
        |> maybeDecode "maxHeight" Json.Decode.float (Just 0)
        |> maybeDecode "layoutSizingHorizontal" layoutSizingHorizontalDecoder Nothing
        |> maybeDecode "layoutSizingVertical" layoutSizingVerticalDecoder Nothing
        |> decode "blendMode" blendModeDecoder
        |> maybeDecode "opacity" Json.Decode.float (Just 1)
        |> decode "effects" (Json.Decode.list effectDecoder)
        |> decode "characters" Json.Decode.string
        |> maybeDecode "strokes" (Json.Decode.list paintDecoder) Nothing
        |> maybeDecode "strokeWeight" Json.Decode.float (Just 1)
        |> maybeDecode "strokeAlign" strokeAlignDecoder Nothing
        |> maybeDecode "strokeJoin" strokeJoinDecoder (Just StrokeJoinMITER)
        |> decode "type" connectorNodeTypeDecoder
        |> decode "connectorStart" connectorEndpointDecoder
        |> decode "connectorEnd" connectorEndpointDecoder
        |> decode "connectorStartStrokeCap" connectorNodeConnectorStartStrokeCapDecoder
        |> decode "connectorEndStrokeCap" connectorNodeConnectorEndStrokeCapDecoder
        |> decode "connectorLineType" connectorLineTypeDecoder
        |> maybeDecode "textBackground" connectorTextBackgroundDecoder Nothing


layoutPositioningDecoder : Json.Decode.Decoder LayoutPositioning
layoutPositioningDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "AUTO" ->
                        Json.Decode.succeed LayoutPositioningAUTO

                    "ABSOLUTE" ->
                        Json.Decode.succeed LayoutPositioningABSOLUTE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


layoutAlignDecoder : Json.Decode.Decoder LayoutAlign
layoutAlignDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "INHERIT" ->
                        Json.Decode.succeed LayoutAlignINHERIT

                    "STRETCH" ->
                        Json.Decode.succeed LayoutAlignSTRETCH

                    "MIN" ->
                        Json.Decode.succeed LayoutAlignMIN

                    "CENTER" ->
                        Json.Decode.succeed LayoutAlignCENTER

                    "MAX" ->
                        Json.Decode.succeed LayoutAlignMAX

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


connectorNodeTypeDecoder : Json.Decode.Decoder ConnectorNodeType
connectorNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "CONNECTOR" ->
                        Json.Decode.succeed ConnectorNodeTypeCONNECTOR

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


connectorNodeConnectorStartStrokeCapDecoder : Json.Decode.Decoder ConnectorNodeConnectorStartStrokeCap
connectorNodeConnectorStartStrokeCapDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "NONE" ->
                        Json.Decode.succeed ConnectorNodeConnectorStartStrokeCapNONE

                    "LINE_ARROW" ->
                        Json.Decode.succeed ConnectorNodeConnectorStartStrokeCapLINEARROW

                    "TRIANGLE_ARROW" ->
                        Json.Decode.succeed ConnectorNodeConnectorStartStrokeCapTRIANGLEARROW

                    "DIAMOND_FILLED" ->
                        Json.Decode.succeed ConnectorNodeConnectorStartStrokeCapDIAMONDFILLED

                    "CIRCLE_FILLED" ->
                        Json.Decode.succeed ConnectorNodeConnectorStartStrokeCapCIRCLEFILLED

                    "TRIANGLE_FILLED" ->
                        Json.Decode.succeed ConnectorNodeConnectorStartStrokeCapTRIANGLEFILLED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


connectorNodeConnectorEndStrokeCapDecoder : Json.Decode.Decoder ConnectorNodeConnectorEndStrokeCap
connectorNodeConnectorEndStrokeCapDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "NONE" ->
                        Json.Decode.succeed ConnectorNodeConnectorEndStrokeCapNONE

                    "LINE_ARROW" ->
                        Json.Decode.succeed ConnectorNodeConnectorEndStrokeCapLINEARROW

                    "TRIANGLE_ARROW" ->
                        Json.Decode.succeed ConnectorNodeConnectorEndStrokeCapTRIANGLEARROW

                    "DIAMOND_FILLED" ->
                        Json.Decode.succeed ConnectorNodeConnectorEndStrokeCapDIAMONDFILLED

                    "CIRCLE_FILLED" ->
                        Json.Decode.succeed ConnectorNodeConnectorEndStrokeCapCIRCLEFILLED

                    "TRIANGLE_FILLED" ->
                        Json.Decode.succeed ConnectorNodeConnectorEndStrokeCapTRIANGLEFILLED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


connectorTextBackgroundDecoder : Json.Decode.Decoder ConnectorTextBackground
connectorTextBackgroundDecoder =
    Json.Decode.succeed ConnectorTextBackground
        |> decodeChain cornerTraitDecoder
        |> decodeChain minimalFillsTraitDecoder
        |> decode "fills" (Json.Decode.list paintDecoder)
        |> maybeDecode "styles" stylesDecoder Nothing


constraintDecoder : Json.Decode.Decoder Constraint
constraintDecoder =
    Json.Decode.succeed Constraint
        |> decode "type" constraintTypeDecoder
        |> decode "value" Json.Decode.float


constraintTypeDecoder : Json.Decode.Decoder ConstraintType
constraintTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "SCALE" ->
                        Json.Decode.succeed ConstraintTypeSCALE

                    "WIDTH" ->
                        Json.Decode.succeed ConstraintTypeWIDTH

                    "HEIGHT" ->
                        Json.Decode.succeed ConstraintTypeHEIGHT

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


cornerRadiusShapeTraitsDecoder : Json.Decode.Decoder CornerRadiusShapeTraits
cornerRadiusShapeTraitsDecoder =
    Json.Decode.succeed CornerRadiusShapeTraits
        |> decodeChain cornerTraitDecoder
        |> decodeChain defaultShapeTraitsDecoder
        |> maybeDecode "cornerRadius" Json.Decode.float (Just 0)
        |> maybeDecode "cornerSmoothing" Json.Decode.float Nothing
        |> maybeDecode "rectangleCornerRadii" rectangleCornerRadiiDecoder Nothing


cornerTraitDecoder : Json.Decode.Decoder CornerTrait
cornerTraitDecoder =
    Json.Decode.succeed CornerTrait
        |> maybeDecode "cornerRadius" Json.Decode.float (Just 0)
        |> maybeDecode "cornerSmoothing" Json.Decode.float Nothing
        |> maybeDecode "rectangleCornerRadii" rectangleCornerRadiiDecoder Nothing


defaultShapeTraitsDecoder : Json.Decode.Decoder DefaultShapeTraits
defaultShapeTraitsDecoder =
    Json.Decode.succeed DefaultShapeTraits
        |> decodeChain hasBlendModeAndOpacityTraitDecoder
        |> decodeChain hasEffectsTraitDecoder
        |> decodeChain hasGeometryTraitDecoder
        |> decodeChain hasLayoutTraitDecoder
        |> decodeChain hasMaskTraitDecoder
        |> decodeChain isLayerTraitDecoder
        |> decodeChain transitionSourceTraitDecoder
        |> decode "blendMode" blendModeDecoder
        |> maybeDecode "opacity" Json.Decode.float (Just 1)
        |> decode "absoluteBoundingBox" rectangleDecoder
        |> decodeNullable "absoluteRenderBounds" rectangleDecoder
        |> maybeDecode "preserveRatio" Json.Decode.bool (Just False)
        |> maybeDecode "constraints" layoutConstraintDecoder Nothing
        |> maybeDecode "size" vectorDecoder Nothing
        |> maybeDecode "layoutAlign" layoutAlignDecoder Nothing
        |> maybeDecode "layoutGrow" layoutGrowDecoder (Just LayoutGrow0)
        |> maybeDecode "layoutPositioning" layoutPositioningDecoder (Just LayoutPositioningAUTO)
        |> maybeDecode "minWidth" Json.Decode.float Nothing
        |> maybeDecode "maxWidth" Json.Decode.float (Just 0)
        |> maybeDecode "minHeight" Json.Decode.float (Just 0)
        |> maybeDecode "maxHeight" Json.Decode.float (Just 0)
        |> maybeDecode "relativeTransform" transformDecoder Nothing
        |> maybeDecode "layoutSizingHorizontal" layoutSizingHorizontalDecoder Nothing
        |> maybeDecode "layoutSizingVertical" layoutSizingVerticalDecoder Nothing
        |> decode "fills" (Json.Decode.list paintDecoder)
        |> maybeDecode "styles" stylesDecoder Nothing
        |> maybeDecode "strokes" (Json.Decode.list paintDecoder) Nothing
        |> maybeDecode "strokeWeight" Json.Decode.float (Just 1)
        |> maybeDecode "strokeAlign" strokeAlignDecoder Nothing
        |> maybeDecode "strokeJoin" strokeJoinDecoder (Just StrokeJoinMITER)
        |> maybeDecode "fillGeometry" (Json.Decode.list pathDecoder) Nothing
        |> maybeDecode "strokeGeometry" (Json.Decode.list pathDecoder) Nothing
        |> maybeDecode "strokeCap" strokeCapDecoder (Just StrokeCapNONE)
        |> maybeDecode "strokeMiterAngle" Json.Decode.float (Just 28.96)
        |> decode "effects" (Json.Decode.list effectDecoder)
        |> maybeDecode "isMask" Json.Decode.bool (Just False)
        |> maybeDecode "maskType" defaultShapeTraitsMaskTypeDecoder Nothing
        |> maybeDecode "isMaskOutline" Json.Decode.bool (Just False)
        |> maybeDecode "transitionNodeID" Json.Decode.string Nothing
        |> maybeDecode "transitionDuration" Json.Decode.float Nothing
        |> maybeDecode "transitionEasing" easingTypeDecoder Nothing


transformDecoder : Json.Decode.Decoder Transform
transformDecoder =
    let
        tuple3 a b c =
            ( a, b, c )

        row =
            Json.Decode.map3 tuple3
                (Json.Decode.index 0 Json.Decode.float)
                (Json.Decode.index 1 Json.Decode.float)
                (Json.Decode.index 2 Json.Decode.float)
    in
    Json.Decode.map2 pair
        (Json.Decode.index 0 row)
        (Json.Decode.index 1 row)


layoutGrowDecoder : Json.Decode.Decoder LayoutGrow
layoutGrowDecoder =
    Json.Decode.int
        |> Json.Decode.andThen
            (\value ->
                case value of
                    0 ->
                        Json.Decode.succeed LayoutGrow0

                    1 ->
                        Json.Decode.succeed LayoutGrow1

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ String.fromInt other
            )


layoutSizingHorizontalDecoder : Json.Decode.Decoder LayoutSizingHorizontal
layoutSizingHorizontalDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "FIXED" ->
                        Json.Decode.succeed LayoutSizingHorizontalFIXED

                    "HUG" ->
                        Json.Decode.succeed LayoutSizingHorizontalHUG

                    "FILL" ->
                        Json.Decode.succeed LayoutSizingHorizontalFILL

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


layoutSizingVerticalDecoder : Json.Decode.Decoder LayoutSizingVertical
layoutSizingVerticalDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "FIXED" ->
                        Json.Decode.succeed LayoutSizingVerticalFIXED

                    "HUG" ->
                        Json.Decode.succeed LayoutSizingVerticalHUG

                    "FILL" ->
                        Json.Decode.succeed LayoutSizingVerticalFILL

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


strokeJoinDecoder : Json.Decode.Decoder StrokeJoin
strokeJoinDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "MITER" ->
                        Json.Decode.succeed StrokeJoinMITER

                    "BEVEL" ->
                        Json.Decode.succeed StrokeJoinBEVEL

                    "ROUND" ->
                        Json.Decode.succeed StrokeJoinROUND

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


strokeCapDecoder : Json.Decode.Decoder StrokeCap
strokeCapDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "NONE" ->
                        Json.Decode.succeed StrokeCapNONE

                    "ROUND" ->
                        Json.Decode.succeed StrokeCapROUND

                    "SQUARE" ->
                        Json.Decode.succeed StrokeCapSQUARE

                    "LINE_ARROW" ->
                        Json.Decode.succeed StrokeCapLINEARROW

                    "TRIANGLE_ARROW" ->
                        Json.Decode.succeed StrokeCapTRIANGLEARROW

                    "DIAMOND_FILLED" ->
                        Json.Decode.succeed StrokeCapDIAMONDFILLED

                    "CIRCLE_FILLED" ->
                        Json.Decode.succeed StrokeCapCIRCLEFILLED

                    "TRIANGLE_FILLED" ->
                        Json.Decode.succeed StrokeCapTRIANGLEFILLED

                    "WASHI_TAPE_1" ->
                        Json.Decode.succeed StrokeCapWASHITAPE1

                    "WASHI_TAPE_2" ->
                        Json.Decode.succeed StrokeCapWASHITAPE2

                    "WASHI_TAPE_3" ->
                        Json.Decode.succeed StrokeCapWASHITAPE3

                    "WASHI_TAPE_4" ->
                        Json.Decode.succeed StrokeCapWASHITAPE4

                    "WASHI_TAPE_5" ->
                        Json.Decode.succeed StrokeCapWASHITAPE5

                    "WASHI_TAPE_6" ->
                        Json.Decode.succeed StrokeCapWASHITAPE6

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


defaultShapeTraitsMaskTypeDecoder : Json.Decode.Decoder DefaultShapeTraitsMaskType
defaultShapeTraitsMaskTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ALPHA" ->
                        Json.Decode.succeed DefaultShapeTraitsMaskTypeALPHA

                    "VECTOR" ->
                        Json.Decode.succeed DefaultShapeTraitsMaskTypeVECTOR

                    "LUMINANCE" ->
                        Json.Decode.succeed DefaultShapeTraitsMaskTypeLUMINANCE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


documentNodeDecoder : Json.Decode.Decoder DocumentNode
documentNodeDecoder =
    Json.Decode.succeed DocumentNode
        |> decodeChain isLayerTraitDecoder
        |> decode "type" documentNodeTypeDecoder
        |> decode "children" (Json.Decode.list canvasNodeDecoder)


documentNodeTypeDecoder : Json.Decode.Decoder DocumentNodeType
documentNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "DOCUMENT" ->
                        Json.Decode.succeed DocumentNodeTypeDOCUMENT

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


documentationLinkDecoder : Json.Decode.Decoder DocumentationLink
documentationLinkDecoder =
    Json.Decode.succeed DocumentationLink
        |> decode "uri" Json.Decode.string


dropShadowEffectDecoder : Json.Decode.Decoder DropShadowEffect
dropShadowEffectDecoder =
    Json.Decode.succeed DropShadowEffect
        |> decodeChain baseShadowEffectDecoder
        |> decode "type" dropShadowEffectTypeDecoder
        |> decode "showShadowBehindNode" Json.Decode.bool


dropShadowEffectTypeDecoder : Json.Decode.Decoder DropShadowEffectType
dropShadowEffectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "DROP_SHADOW" ->
                        Json.Decode.succeed DropShadowEffectTypeDROPSHADOW

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


easingTypeDecoder : Json.Decode.Decoder EasingType
easingTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "EASE_IN" ->
                        Json.Decode.succeed EasingTypeEASEIN

                    "EASE_OUT" ->
                        Json.Decode.succeed EasingTypeEASEOUT

                    "EASE_IN_AND_OUT" ->
                        Json.Decode.succeed EasingTypeEASEINANDOUT

                    "LINEAR" ->
                        Json.Decode.succeed EasingTypeLINEAR

                    "GENTLE_SPRING" ->
                        Json.Decode.succeed EasingTypeGENTLESPRING

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


effectDecoder : Json.Decode.Decoder Effect
effectDecoder =
    Json.Decode.field "type" Json.Decode.string
        |> Json.Decode.andThen effectTagDecoder


effectTagDecoder : String -> Json.Decode.Decoder Effect
effectTagDecoder tag =
    case tag of
        "BACKGROUND_BLUR" ->
            Json.Decode.map EffectBlurEffect blurEffectDecoder

        "DROP_SHADOW" ->
            Json.Decode.map EffectDropShadowEffect dropShadowEffectDecoder

        "INNER_SHADOW" ->
            Json.Decode.map EffectInnerShadowEffect innerShadowEffectDecoder

        "LAYER_BLUR" ->
            Json.Decode.map EffectBlurEffect blurEffectDecoder

        _ ->
            Json.Decode.fail <| "Trying to decode Effect, but type '" ++ tag ++ "' is not supported."


ellipseNodeDecoder : Json.Decode.Decoder EllipseNode
ellipseNodeDecoder =
    Json.Decode.succeed EllipseNode
        |> decodeChain defaultShapeTraitsDecoder
        |> decode "type" ellipseNodeTypeDecoder
        |> decode "arcData" arcDataDecoder


ellipseNodeTypeDecoder : Json.Decode.Decoder EllipseNodeType
ellipseNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ELLIPSE" ->
                        Json.Decode.succeed EllipseNodeTypeELLIPSE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


frameInfoDecoder : Json.Decode.Decoder FrameInfo
frameInfoDecoder =
    Json.Decode.succeed FrameInfo
        |> maybeDecode "nodeId" Json.Decode.string Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "backgroundColor" Json.Decode.string Nothing
        |> decode "pageId" Json.Decode.string
        |> decode "pageName" Json.Decode.string


frameNodeDecoder : Json.Decode.Decoder FrameNode
frameNodeDecoder =
    Json.Decode.succeed FrameNode
        |> decodeChain frameTraitsDecoder
        |> decode "type" frameNodeTypeDecoder


frameNodeTypeDecoder : Json.Decode.Decoder FrameNodeType
frameNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "FRAME" ->
                        Json.Decode.succeed FrameNodeTypeFRAME

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


frameTraitsDecoder : Json.Decode.Decoder FrameTraits
frameTraitsDecoder =
    Json.Decode.succeed FrameTraits
        |> decodeChain cornerTraitDecoder
        |> decodeChain hasBlendModeAndOpacityTraitDecoder
        |> decodeChain hasChildrenTraitDecoder
        |> decodeChain hasEffectsTraitDecoder
        |> decodeChain hasFramePropertiesTraitDecoder
        |> decodeChain hasGeometryTraitDecoder
        |> decodeChain hasLayoutTraitDecoder
        |> decodeChain hasMaskTraitDecoder
        |> decodeChain individualStrokesTraitDecoder
        |> decodeChain isLayerTraitDecoder
        |> decodeChain transitionSourceTraitDecoder
        |> decode "blendMode" blendModeDecoder
        |> maybeDecode "opacity" Json.Decode.float (Just 1)
        |> decode "children" subcanvasNodeListDecoder
        |> decode "absoluteBoundingBox" rectangleDecoder
        |> decodeNullable "absoluteRenderBounds" rectangleDecoder
        |> maybeDecode "preserveRatio" Json.Decode.bool (Just False)
        |> maybeDecode "constraints" layoutConstraintDecoder Nothing
        |> maybeDecode "size" vectorDecoder Nothing
        |> maybeDecode "layoutAlign" layoutAlignDecoder Nothing
        |> maybeDecode "layoutGrow" layoutGrowDecoder (Just LayoutGrow0)
        |> maybeDecode "layoutPositioning" layoutPositioningDecoder (Just LayoutPositioningAUTO)
        |> maybeDecode "minWidth" Json.Decode.float Nothing
        |> maybeDecode "maxWidth" Json.Decode.float (Just 0)
        |> maybeDecode "minHeight" Json.Decode.float (Just 0)
        |> maybeDecode "maxHeight" Json.Decode.float (Just 0)
        |> maybeDecode "layoutSizingHorizontal" layoutSizingHorizontalDecoder Nothing
        |> maybeDecode "layoutSizingVertical" layoutSizingVerticalDecoder Nothing
        |> decode "clipsContent" Json.Decode.bool
        |> maybeDecode "background" (Json.Decode.list paintDecoder) Nothing
        |> maybeDecode "backgroundColor" rGBADecoder Nothing
        |> maybeDecode "layoutGrids" (Json.Decode.list layoutGridDecoder) Nothing
        |> maybeDecode "overflowDirection" overflowDirectionDecoder (Just OverflowDirectionNONE)
        |> maybeDecode "layoutMode" layoutModeDecoder (Just LayoutModeNONE)
        |> maybeDecode "primaryAxisSizingMode" primaryAxisSizingModeDecoder (Just PrimaryAxisSizingModeAUTO)
        |> maybeDecode "counterAxisSizingMode" counterAxisSizingModeDecoder (Just CounterAxisSizingModeAUTO)
        |> maybeDecode "primaryAxisAlignItems" primaryAxisAlignItemsDecoder (Just PrimaryAxisAlignItemsMIN)
        |> maybeDecode "counterAxisAlignItems" counterAxisAlignItemsDecoder (Just CounterAxisAlignItemsMIN)
        |> maybeDecode "paddingLeft" Json.Decode.float (Just 0)
        |> maybeDecode "paddingRight" Json.Decode.float (Just 0)
        |> maybeDecode "paddingTop" Json.Decode.float (Just 0)
        |> maybeDecode "paddingBottom" Json.Decode.float (Just 0)
        |> maybeDecode "itemSpacing" Json.Decode.float (Just 0)
        |> maybeDecode "itemReverseZIndex" Json.Decode.bool (Just False)
        |> maybeDecode "strokesIncludedInLayout" Json.Decode.bool (Just False)
        |> maybeDecode "layoutWrap" layoutWrapDecoder Nothing
        |> maybeDecode "counterAxisSpacing" Json.Decode.float Nothing
        |> maybeDecode "counterAxisAlignContent" counterAxisAlignContentDecoder (Just CounterAxisAlignContentAUTO)
        |> maybeDecode "cornerRadius" Json.Decode.float (Just 0)
        |> maybeDecode "cornerSmoothing" Json.Decode.float Nothing
        |> maybeDecode "rectangleCornerRadii" rectangleCornerRadiiDecoder Nothing
        |> decode "fills" (Json.Decode.list paintDecoder)
        |> maybeDecode "styles" stylesDecoder Nothing
        |> maybeDecode "strokes" (Json.Decode.list paintDecoder) Nothing
        |> maybeDecode "strokeWeight" Json.Decode.float (Just 1)
        |> maybeDecode "strokeAlign" strokeAlignDecoder Nothing
        |> maybeDecode "strokeJoin" strokeJoinDecoder (Just StrokeJoinMITER)
        |> maybeDecode "fillGeometry" (Json.Decode.list pathDecoder) Nothing
        |> maybeDecode "strokeGeometry" (Json.Decode.list pathDecoder) Nothing
        |> maybeDecode "strokeCap" strokeCapDecoder (Just StrokeCapNONE)
        |> maybeDecode "strokeMiterAngle" Json.Decode.float (Just 28.96)
        |> decode "effects" (Json.Decode.list effectDecoder)
        |> maybeDecode "isMask" Json.Decode.bool (Just False)
        |> maybeDecode "maskType" maskTypeDecoder Nothing
        |> maybeDecode "isMaskOutline" Json.Decode.bool (Just False)
        |> maybeDecode "transitionNodeID" Json.Decode.string Nothing
        |> maybeDecode "transitionDuration" Json.Decode.float Nothing
        |> maybeDecode "transitionEasing" easingTypeDecoder Nothing
        |> maybeDecode "individualStrokeWeights" strokeWeightsDecoder Nothing
        |> decodeChain devStatusDecoder


devStatusDecoder : Json.Decode.Decoder Bool
devStatusDecoder =
    Json.Decode.oneOf
        [ Json.Decode.string
            |> Json.Decode.field "type_"
            |> Json.Decode.map
                ((==) "READY_FOR_DEV")
            |> Json.Decode.field "devStatus"
        , Json.Decode.succeed False
        ]


overflowDirectionDecoder : Json.Decode.Decoder OverflowDirection
overflowDirectionDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "HORIZONTAL_SCROLLING" ->
                        Json.Decode.succeed OverflowDirectionHORIZONTALSCROLLING

                    "VERTICAL_SCROLLING" ->
                        Json.Decode.succeed OverflowDirectionVERTICALSCROLLING

                    "HORIZONTAL_AND_VERTICAL_SCROLLING" ->
                        Json.Decode.succeed OverflowDirectionHORIZONTALANDVERTICALSCROLLING

                    "NONE" ->
                        Json.Decode.succeed OverflowDirectionNONE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


layoutModeDecoder : Json.Decode.Decoder LayoutMode
layoutModeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "NONE" ->
                        Json.Decode.succeed LayoutModeNONE

                    "HORIZONTAL" ->
                        Json.Decode.succeed LayoutModeHORIZONTAL

                    "VERTICAL" ->
                        Json.Decode.succeed LayoutModeVERTICAL

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


primaryAxisSizingModeDecoder : Json.Decode.Decoder PrimaryAxisSizingMode
primaryAxisSizingModeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "FIXED" ->
                        Json.Decode.succeed PrimaryAxisSizingModeFIXED

                    "AUTO" ->
                        Json.Decode.succeed PrimaryAxisSizingModeAUTO

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


counterAxisSizingModeDecoder : Json.Decode.Decoder CounterAxisSizingMode
counterAxisSizingModeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "FIXED" ->
                        Json.Decode.succeed CounterAxisSizingModeFIXED

                    "AUTO" ->
                        Json.Decode.succeed CounterAxisSizingModeAUTO

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


primaryAxisAlignItemsDecoder : Json.Decode.Decoder PrimaryAxisAlignItems
primaryAxisAlignItemsDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "MIN" ->
                        Json.Decode.succeed PrimaryAxisAlignItemsMIN

                    "CENTER" ->
                        Json.Decode.succeed PrimaryAxisAlignItemsCENTER

                    "MAX" ->
                        Json.Decode.succeed PrimaryAxisAlignItemsMAX

                    "SPACE_BETWEEN" ->
                        Json.Decode.succeed PrimaryAxisAlignItemsSPACEBETWEEN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


counterAxisAlignItemsDecoder : Json.Decode.Decoder CounterAxisAlignItems
counterAxisAlignItemsDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "MIN" ->
                        Json.Decode.succeed CounterAxisAlignItemsMIN

                    "CENTER" ->
                        Json.Decode.succeed CounterAxisAlignItemsCENTER

                    "MAX" ->
                        Json.Decode.succeed CounterAxisAlignItemsMAX

                    "BASELINE" ->
                        Json.Decode.succeed CounterAxisAlignItemsBASELINE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


layoutWrapDecoder : Json.Decode.Decoder LayoutWrap
layoutWrapDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "NO_WRAP" ->
                        Json.Decode.succeed LayoutWrapNOWRAP

                    "WRAP" ->
                        Json.Decode.succeed LayoutWrapWRAP

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


counterAxisAlignContentDecoder : Json.Decode.Decoder CounterAxisAlignContent
counterAxisAlignContentDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "AUTO" ->
                        Json.Decode.succeed CounterAxisAlignContentAUTO

                    "SPACE_BETWEEN" ->
                        Json.Decode.succeed CounterAxisAlignContentSPACEBETWEEN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


maskTypeDecoder : Json.Decode.Decoder MaskType
maskTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ALPHA" ->
                        Json.Decode.succeed MaskTypeALPHA

                    "VECTOR" ->
                        Json.Decode.succeed MaskTypeVECTOR

                    "LUMINANCE" ->
                        Json.Decode.succeed MaskTypeLUMINANCE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


gradientPaintDecoder : Json.Decode.Decoder GradientPaint
gradientPaintDecoder =
    Json.Decode.succeed GradientPaint
        |> decodeChain basePaintDecoder
        |> decode "type" gradientPaintTypeDecoder
        |> decode "gradientHandlePositions" (Json.Decode.list vectorDecoder)
        |> decode "gradientStops" (Json.Decode.list colorStopDecoder)


gradientPaintTypeDecoder : Json.Decode.Decoder GradientPaintType
gradientPaintTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "GRADIENT_LINEAR" ->
                        Json.Decode.succeed GradientPaintTypeLINEAR

                    "GRADIENT_RADIAL" ->
                        Json.Decode.succeed GradientPaintTypeRADIAL

                    "GRADIENT_ANGULAR" ->
                        Json.Decode.succeed GradientPaintTypeANGULAR

                    "GRADIENT_DIAMOND" ->
                        Json.Decode.succeed GradientPaintTypeDIAMOND

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


groupNodeDecoder : Json.Decode.Decoder GroupNode
groupNodeDecoder =
    Json.Decode.succeed GroupNode
        |> decodeChain frameTraitsDecoder
        |> decode "type" groupNodeTypeDecoder


groupNodeTypeDecoder : Json.Decode.Decoder GroupNodeType
groupNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "GROUP" ->
                        Json.Decode.succeed GroupNodeTypeGROUP

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


hasBlendModeAndOpacityTraitDecoder : Json.Decode.Decoder HasBlendModeAndOpacityTrait
hasBlendModeAndOpacityTraitDecoder =
    Json.Decode.succeed HasBlendModeAndOpacityTrait
        |> decode "blendMode" blendModeDecoder
        |> maybeDecode "opacity" Json.Decode.float (Just 1)


hasChildrenTraitDecoder : Json.Decode.Decoder HasChildrenTrait
hasChildrenTraitDecoder =
    Json.Decode.succeed HasChildrenTrait
        |> decode "children" subcanvasNodeListDecoder


hasEffectsTraitDecoder : Json.Decode.Decoder HasEffectsTrait
hasEffectsTraitDecoder =
    Json.Decode.succeed HasEffectsTrait
        |> decode "effects" (Json.Decode.list effectDecoder)


hasFramePropertiesTraitDecoder : Json.Decode.Decoder HasFramePropertiesTrait
hasFramePropertiesTraitDecoder =
    Json.Decode.succeed HasFramePropertiesTrait
        |> decode "clipsContent" Json.Decode.bool
        |> maybeDecode "background" (Json.Decode.list paintDecoder) Nothing
        |> maybeDecode "backgroundColor" rGBADecoder Nothing
        |> maybeDecode "layoutGrids" (Json.Decode.list layoutGridDecoder) Nothing
        |> maybeDecode "overflowDirection" overflowDirectionDecoder (Just OverflowDirectionNONE)
        |> maybeDecode "layoutMode" layoutModeDecoder (Just LayoutModeNONE)
        |> maybeDecode "primaryAxisSizingMode" primaryAxisSizingModeDecoder (Just PrimaryAxisSizingModeAUTO)
        |> maybeDecode "counterAxisSizingMode" counterAxisSizingModeDecoder (Just CounterAxisSizingModeAUTO)
        |> maybeDecode "primaryAxisAlignItems" primaryAxisAlignItemsDecoder (Just PrimaryAxisAlignItemsMIN)
        |> maybeDecode "counterAxisAlignItems" counterAxisAlignItemsDecoder (Just CounterAxisAlignItemsMIN)
        |> maybeDecode "paddingLeft" Json.Decode.float (Just 0)
        |> maybeDecode "paddingRight" Json.Decode.float (Just 0)
        |> maybeDecode "paddingTop" Json.Decode.float (Just 0)
        |> maybeDecode "paddingBottom" Json.Decode.float (Just 0)
        |> maybeDecode "itemSpacing" Json.Decode.float (Just 0)
        |> maybeDecode "itemReverseZIndex" Json.Decode.bool (Just False)
        |> maybeDecode "strokesIncludedInLayout" Json.Decode.bool (Just False)
        |> maybeDecode "layoutWrap" layoutWrapDecoder Nothing
        |> maybeDecode "counterAxisSpacing" Json.Decode.float Nothing
        |> maybeDecode "counterAxisAlignContent" counterAxisAlignContentDecoder (Just CounterAxisAlignContentAUTO)


hasGeometryTraitDecoder : Json.Decode.Decoder HasGeometryTrait
hasGeometryTraitDecoder =
    Json.Decode.succeed HasGeometryTrait
        |> decodeChain minimalFillsTraitDecoder
        |> decodeChain minimalStrokesTraitDecoder
        |> maybeDecode "strokes" (Json.Decode.list paintDecoder) Nothing
        |> maybeDecode "strokeWeight" Json.Decode.float (Just 1)
        |> maybeDecode "strokeAlign" strokeAlignDecoder Nothing
        |> maybeDecode "strokeJoin" strokeJoinDecoder (Just StrokeJoinMITER)
        |> maybeDecode "fillGeometry" (Json.Decode.list pathDecoder) Nothing
        |> maybeDecode "strokeGeometry" (Json.Decode.list pathDecoder) Nothing
        |> maybeDecode "strokeCap" strokeCapDecoder (Just StrokeCapNONE)
        |> maybeDecode "strokeMiterAngle" Json.Decode.float (Just 28.96)


strokeAlignDecoder : Json.Decode.Decoder StrokeAlign
strokeAlignDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "INSIDE" ->
                        Json.Decode.succeed StrokeAlignINSIDE

                    "OUTSIDE" ->
                        Json.Decode.succeed StrokeAlignOUTSIDE

                    "CENTER" ->
                        Json.Decode.succeed StrokeAlignCENTER

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


hasGeometryTraitAllOfFillOverrideTableDecoder : Json.Decode.Decoder HasGeometryTraitAllOfFillOverrideTable
hasGeometryTraitAllOfFillOverrideTableDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map HasGeometryTraitAllOfFillOverrideTablePaintOverride paintOverrideDecoder
        ]


hasLayoutTraitDecoder : Json.Decode.Decoder HasLayoutTrait
hasLayoutTraitDecoder =
    Json.Decode.succeed HasLayoutTrait
        |> decodeNullable "absoluteBoundingBox" rectangleDecoder
        |> decodeNullable "absoluteRenderBounds" rectangleDecoder
        |> maybeDecode "preserveRatio" Json.Decode.bool (Just False)
        |> maybeDecode "constraints" layoutConstraintDecoder Nothing
        |> maybeDecode "size" vectorDecoder Nothing
        |> maybeDecode "layoutAlign" layoutAlignDecoder Nothing
        |> maybeDecode "layoutGrow" layoutGrowDecoder (Just LayoutGrow0)
        |> maybeDecode "layoutPositioning" layoutPositioningDecoder (Just LayoutPositioningAUTO)
        |> maybeDecode "minWidth" Json.Decode.float Nothing
        |> maybeDecode "maxWidth" Json.Decode.float (Just 0)
        |> maybeDecode "minHeight" Json.Decode.float (Just 0)
        |> maybeDecode "maxHeight" Json.Decode.float (Just 0)
        |> maybeDecode "layoutSizingHorizontal" layoutSizingHorizontalDecoder Nothing
        |> maybeDecode "layoutSizingVertical" layoutSizingVerticalDecoder Nothing


hasMaskTraitDecoder : Json.Decode.Decoder HasMaskTrait
hasMaskTraitDecoder =
    Json.Decode.succeed HasMaskTrait
        |> maybeDecode "isMask" Json.Decode.bool (Just False)
        |> maybeDecode "maskType" hasMaskTraitMaskTypeDecoder Nothing
        |> maybeDecode "isMaskOutline" Json.Decode.bool (Just False)


hasMaskTraitMaskTypeDecoder : Json.Decode.Decoder HasMaskTraitMaskType
hasMaskTraitMaskTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ALPHA" ->
                        Json.Decode.succeed HasMaskTraitMaskTypeALPHA

                    "VECTOR" ->
                        Json.Decode.succeed HasMaskTraitMaskTypeVECTOR

                    "LUMINANCE" ->
                        Json.Decode.succeed HasMaskTraitMaskTypeLUMINANCE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


hasTextSublayerTraitDecoder : Json.Decode.Decoder HasTextSublayerTrait
hasTextSublayerTraitDecoder =
    Json.Decode.succeed HasTextSublayerTrait
        |> decode "characters" Json.Decode.string


hyperlinkDecoder : Json.Decode.Decoder Hyperlink
hyperlinkDecoder =
    Json.Decode.succeed Hyperlink
        |> decode "type" hyperlinkTypeDecoder
        |> maybeDecode "url" Json.Decode.string Nothing
        |> maybeDecode "nodeID" Json.Decode.string Nothing


hyperlinkTypeDecoder : Json.Decode.Decoder HyperlinkType
hyperlinkTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "URL" ->
                        Json.Decode.succeed HyperlinkTypeURL

                    "NODE" ->
                        Json.Decode.succeed HyperlinkTypeNODE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


imageFiltersDecoder : Json.Decode.Decoder ImageFilters
imageFiltersDecoder =
    Json.Decode.succeed ImageFilters
        |> maybeDecode "exposure" Json.Decode.float (Just 0)
        |> maybeDecode "contrast" Json.Decode.float (Just 0)
        |> maybeDecode "saturation" Json.Decode.float (Just 0)
        |> maybeDecode "temperature" Json.Decode.float (Just 0)
        |> maybeDecode "tint" Json.Decode.float (Just 0)
        |> maybeDecode "highlights" Json.Decode.float (Just 0)
        |> maybeDecode "shadows" Json.Decode.float (Just 0)


imagePaintDecoder : Json.Decode.Decoder ImagePaint
imagePaintDecoder =
    Json.Decode.succeed ImagePaint
        |> decodeChain basePaintDecoder
        |> decode "type" imagePaintTypeDecoder
        |> decode "scaleMode" imagePaintScaleModeDecoder
        |> decode "imageRef" Json.Decode.string
        |> maybeDecode "imageTransform" (Json.Decode.list (Json.Decode.list Json.Decode.float)) Nothing
        |> maybeDecode "scalingFactor" Json.Decode.float Nothing
        |> maybeDecode "filters" imageFiltersDecoder Nothing
        |> maybeDecode "rotation" Json.Decode.float (Just 0)
        |> maybeDecode "gifRef" Json.Decode.string Nothing


imagePaintTypeDecoder : Json.Decode.Decoder ImagePaintType
imagePaintTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "IMAGE" ->
                        Json.Decode.succeed ImagePaintTypeIMAGE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


imagePaintScaleModeDecoder : Json.Decode.Decoder ImagePaintScaleMode
imagePaintScaleModeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "FILL" ->
                        Json.Decode.succeed ImagePaintScaleModeFILL

                    "FIT" ->
                        Json.Decode.succeed ImagePaintScaleModeFIT

                    "TILE" ->
                        Json.Decode.succeed ImagePaintScaleModeTILE

                    "STRETCH" ->
                        Json.Decode.succeed ImagePaintScaleModeSTRETCH

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


individualStrokesTraitDecoder : Json.Decode.Decoder IndividualStrokesTrait
individualStrokesTraitDecoder =
    Json.Decode.succeed IndividualStrokesTrait
        |> maybeDecode "individualStrokeWeights" strokeWeightsDecoder Nothing


innerShadowEffectDecoder : Json.Decode.Decoder InnerShadowEffect
innerShadowEffectDecoder =
    Json.Decode.succeed InnerShadowEffect
        |> decodeChain baseShadowEffectDecoder
        |> maybeDecode "type" innerShadowEffectTypeDecoder Nothing


innerShadowEffectTypeDecoder : Json.Decode.Decoder InnerShadowEffectType
innerShadowEffectTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "INNER_SHADOW" ->
                        Json.Decode.succeed InnerShadowEffectTypeINNERSHADOW

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


instanceNodeDecoder : Json.Decode.Decoder InstanceNode
instanceNodeDecoder =
    Json.Decode.succeed InstanceNode
        |> decodeChain frameTraitsDecoder
        |> decode "type" instanceNodeTypeDecoder
        |> decode "componentId" Json.Decode.string
        |> maybeDecode "isExposedInstance" Json.Decode.bool (Just False)
        |> maybeDecode "exposedInstances" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "componentProperties" componentPropertiesDecoder Nothing
        |> decode "overrides" (Json.Decode.list overridesDecoder)


instanceNodeTypeDecoder : Json.Decode.Decoder InstanceNodeType
instanceNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "INSTANCE" ->
                        Json.Decode.succeed InstanceNodeTypeINSTANCE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


instanceSwapPreferredValueDecoder : Json.Decode.Decoder InstanceSwapPreferredValue
instanceSwapPreferredValueDecoder =
    Json.Decode.succeed InstanceSwapPreferredValue
        |> decode "type" instanceSwapPreferredValueTypeDecoder
        |> decode "key" Json.Decode.string


instanceSwapPreferredValueTypeDecoder : Json.Decode.Decoder InstanceSwapPreferredValueType
instanceSwapPreferredValueTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "COMPONENT" ->
                        Json.Decode.succeed InstanceSwapPreferredValueTypeCOMPONENT

                    "COMPONENT_SET" ->
                        Json.Decode.succeed InstanceSwapPreferredValueTypeCOMPONENTSET

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


isLayerTraitDecoder : Json.Decode.Decoder IsLayerTrait
isLayerTraitDecoder =
    Json.Decode.succeed IsLayerTrait
        |> decode "id" Json.Decode.string
        |> decode "name" Json.Decode.string
        |> decode "type" Json.Decode.string
        |> maybeDecode "visible" Json.Decode.bool (Just True)
        |> maybeDecode "locked" Json.Decode.bool (Just False)
        |> maybeDecode "isFixed" Json.Decode.bool (Just False)
        |> decode "scrollBehavior" isLayerTraitScrollBehaviorDecoder
        |> maybeDecode "rotation" Json.Decode.float (Just 0)
        |> maybeDecode "componentPropertyReferences" componentPropertyReferencesDecoder Nothing
        |> maybeDecode "boundVariables" isLayerTraitBoundVariablesDecoder Nothing
        |> maybeDecode "explicitVariableModes" Json.Decode.string Nothing


componentPropertyReferencesDecoder : Json.Decode.Decoder ComponentPropertyReferences
componentPropertyReferencesDecoder =
    Json.Decode.dict Json.Decode.string


isLayerTraitScrollBehaviorDecoder : Json.Decode.Decoder IsLayerTraitScrollBehavior
isLayerTraitScrollBehaviorDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "SCROLLS" ->
                        Json.Decode.succeed IsLayerTraitScrollBehaviorSCROLLS

                    "FIXED" ->
                        Json.Decode.succeed IsLayerTraitScrollBehaviorFIXED

                    "STICKY_SCROLLS" ->
                        Json.Decode.succeed IsLayerTraitScrollBehaviorSTICKYSCROLLS

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


isLayerTraitBoundVariablesDecoder : Json.Decode.Decoder IsLayerTraitBoundVariables
isLayerTraitBoundVariablesDecoder =
    Json.Decode.succeed IsLayerTraitBoundVariables
        |> maybeDecode "size" isLayerTraitBoundVariablesSizeDecoder Nothing
        |> maybeDecode "individualStrokeWeights" isLayerTraitBoundVariablesIndividualStrokeWeightsDecoder Nothing
        |> maybeDecode "characters" variableAliasDecoder Nothing
        |> maybeDecode "itemSpacing" variableAliasDecoder Nothing
        |> maybeDecode "paddingLeft" variableAliasDecoder Nothing
        |> maybeDecode "paddingRight" variableAliasDecoder Nothing
        |> maybeDecode "paddingTop" variableAliasDecoder Nothing
        |> maybeDecode "paddingBottom" variableAliasDecoder Nothing
        |> maybeDecode "visible" variableAliasDecoder Nothing
        |> maybeDecode "topLeftRadius" variableAliasDecoder Nothing
        |> maybeDecode "topRightRadius" variableAliasDecoder Nothing
        |> maybeDecode "bottomLeftRadius" variableAliasDecoder Nothing
        |> maybeDecode "bottomRightRadius" variableAliasDecoder Nothing
        |> maybeDecode "minWidth" variableAliasDecoder Nothing
        |> maybeDecode "maxWidth" variableAliasDecoder Nothing
        |> maybeDecode "minHeight" variableAliasDecoder Nothing
        |> maybeDecode "maxHeight" variableAliasDecoder Nothing
        |> maybeDecode "counterAxisSpacing" variableAliasDecoder Nothing
        |> maybeDecode "opacity" variableAliasDecoder Nothing
        |> maybeDecode "fontFamily" (Json.Decode.list variableAliasDecoder) Nothing
        |> maybeDecode "fontSize" (Json.Decode.list variableAliasDecoder) Nothing
        |> maybeDecode "fontStyle" (Json.Decode.list variableAliasDecoder) Nothing
        |> maybeDecode "fontWeight" (Json.Decode.list variableAliasDecoder) Nothing
        |> maybeDecode "letterSpacing" (Json.Decode.list variableAliasDecoder) Nothing
        |> maybeDecode "lineHeight" (Json.Decode.list variableAliasDecoder) Nothing
        |> maybeDecode "paragraphSpacing" (Json.Decode.list variableAliasDecoder) Nothing
        |> maybeDecode "paragraphIndent" (Json.Decode.list variableAliasDecoder) Nothing
        |> maybeDecode "fills" (Json.Decode.list variableAliasDecoder) Nothing
        |> maybeDecode "strokes" (Json.Decode.list variableAliasDecoder) Nothing
        |> maybeDecode "componentProperties" variableAliasDecoder Nothing
        |> maybeDecode "textRangeFills" (Json.Decode.list variableAliasDecoder) Nothing
        |> maybeDecode "effects" (Json.Decode.list variableAliasDecoder) Nothing
        |> maybeDecode "layoutGrids" (Json.Decode.list variableAliasDecoder) Nothing


isLayerTraitBoundVariablesIndividualStrokeWeightsDecoder : Json.Decode.Decoder IsLayerTraitBoundVariablesIndividualStrokeWeights
isLayerTraitBoundVariablesIndividualStrokeWeightsDecoder =
    Json.Decode.succeed IsLayerTraitBoundVariablesIndividualStrokeWeights
        |> maybeDecode "top" variableAliasDecoder Nothing
        |> maybeDecode "bottom" variableAliasDecoder Nothing
        |> maybeDecode "left" variableAliasDecoder Nothing
        |> maybeDecode "right" variableAliasDecoder Nothing


isLayerTraitBoundVariablesSizeDecoder : Json.Decode.Decoder IsLayerTraitBoundVariablesSize
isLayerTraitBoundVariablesSizeDecoder =
    Json.Decode.succeed IsLayerTraitBoundVariablesSize
        |> maybeDecode "x" variableAliasDecoder Nothing
        |> maybeDecode "y" variableAliasDecoder Nothing


layoutConstraintDecoder : Json.Decode.Decoder LayoutConstraint
layoutConstraintDecoder =
    Json.Decode.succeed LayoutConstraint
        |> decode "vertical" layoutConstraintVerticalDecoder
        |> decode "horizontal" layoutConstraintHorizontalDecoder


layoutConstraintVerticalDecoder : Json.Decode.Decoder LayoutConstraintVertical
layoutConstraintVerticalDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "TOP" ->
                        Json.Decode.succeed LayoutConstraintVerticalTOP

                    "BOTTOM" ->
                        Json.Decode.succeed LayoutConstraintVerticalBOTTOM

                    "CENTER" ->
                        Json.Decode.succeed LayoutConstraintVerticalCENTER

                    "TOP_BOTTOM" ->
                        Json.Decode.succeed LayoutConstraintVerticalTOPBOTTOM

                    "SCALE" ->
                        Json.Decode.succeed LayoutConstraintVerticalSCALE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


layoutConstraintHorizontalDecoder : Json.Decode.Decoder LayoutConstraintHorizontal
layoutConstraintHorizontalDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "LEFT" ->
                        Json.Decode.succeed LayoutConstraintHorizontalLEFT

                    "RIGHT" ->
                        Json.Decode.succeed LayoutConstraintHorizontalRIGHT

                    "CENTER" ->
                        Json.Decode.succeed LayoutConstraintHorizontalCENTER

                    "LEFT_RIGHT" ->
                        Json.Decode.succeed LayoutConstraintHorizontalLEFTRIGHT

                    "SCALE" ->
                        Json.Decode.succeed LayoutConstraintHorizontalSCALE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


layoutGridDecoder : Json.Decode.Decoder LayoutGrid
layoutGridDecoder =
    Json.Decode.succeed LayoutGrid
        |> decode "pattern" layoutGridPatternDecoder
        |> decode "sectionSize" Json.Decode.float
        |> decode "visible" Json.Decode.bool
        |> decode "color" rGBADecoder
        |> decode "alignment" layoutGridAlignmentDecoder
        |> decode "gutterSize" Json.Decode.float
        |> decode "offset" Json.Decode.float
        |> decode "count" Json.Decode.float
        |> maybeDecode "boundVariables" layoutGridBoundVariablesDecoder Nothing


layoutGridPatternDecoder : Json.Decode.Decoder LayoutGridPattern
layoutGridPatternDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "COLUMNS" ->
                        Json.Decode.succeed LayoutGridPatternCOLUMNS

                    "ROWS" ->
                        Json.Decode.succeed LayoutGridPatternROWS

                    "GRID" ->
                        Json.Decode.succeed LayoutGridPatternGRID

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


layoutGridAlignmentDecoder : Json.Decode.Decoder LayoutGridAlignment
layoutGridAlignmentDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "MIN" ->
                        Json.Decode.succeed LayoutGridAlignmentMIN

                    "MAX" ->
                        Json.Decode.succeed LayoutGridAlignmentMAX

                    "STRETCH" ->
                        Json.Decode.succeed LayoutGridAlignmentSTRETCH

                    "CENTER" ->
                        Json.Decode.succeed LayoutGridAlignmentCENTER

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


layoutGridBoundVariablesDecoder : Json.Decode.Decoder LayoutGridBoundVariables
layoutGridBoundVariablesDecoder =
    Json.Decode.succeed LayoutGridBoundVariables
        |> maybeDecode "gutterSize" variableAliasDecoder Nothing
        |> maybeDecode "numSections" variableAliasDecoder Nothing
        |> maybeDecode "sectionSize" variableAliasDecoder Nothing
        |> maybeDecode "offset" variableAliasDecoder Nothing


lineNodeDecoder : Json.Decode.Decoder LineNode
lineNodeDecoder =
    Json.Decode.succeed LineNode
        |> decodeChain defaultShapeTraitsDecoder
        |> decode "type" lineNodeTypeDecoder


lineNodeTypeDecoder : Json.Decode.Decoder LineNodeType
lineNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "LINE" ->
                        Json.Decode.succeed LineNodeTypeLINE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


linkUnfurlNodeDecoder : Json.Decode.Decoder LinkUnfurlNode
linkUnfurlNodeDecoder =
    Json.Decode.succeed LinkUnfurlNode
        |> decodeChain isLayerTraitDecoder
        |> decode "type" linkUnfurlNodeTypeDecoder


linkUnfurlNodeTypeDecoder : Json.Decode.Decoder LinkUnfurlNodeType
linkUnfurlNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "LINK_UNFURL" ->
                        Json.Decode.succeed LinkUnfurlNodeTypeLINKUNFURL

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


localVariableDecoder : Json.Decode.Decoder LocalVariable
localVariableDecoder =
    Json.Decode.succeed LocalVariable
        |> decode "id" Json.Decode.string
        |> decode "name" Json.Decode.string
        |> decode "key" Json.Decode.string
        |> decode "variableCollectionId" Json.Decode.string
        |> decode "resolvedType" localVariableResolvedTypeDecoder
        |> decode "valuesByMode" objectDecoder
        |> decode "remote" Json.Decode.bool
        |> decode "description" Json.Decode.string
        |> decode "hiddenFromPublishing" Json.Decode.bool
        |> decode "scopes" (Json.Decode.list variableScopeDecoder)
        |> decode "codeSyntax" variableCodeSyntaxDecoder


localVariableResolvedTypeDecoder : Json.Decode.Decoder LocalVariableResolvedType
localVariableResolvedTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "BOOLEAN" ->
                        Json.Decode.succeed LocalVariableResolvedTypeBOOLEAN

                    "FLOAT" ->
                        Json.Decode.succeed LocalVariableResolvedTypeFLOAT

                    "STRING" ->
                        Json.Decode.succeed LocalVariableResolvedTypeSTRING

                    "COLOR" ->
                        Json.Decode.succeed LocalVariableResolvedTypeCOLOR

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


localVariableCollectionDecoder : Json.Decode.Decoder LocalVariableCollection
localVariableCollectionDecoder =
    Json.Decode.succeed LocalVariableCollection
        |> decode "id" Json.Decode.string
        |> decode "name" Json.Decode.string
        |> decode "key" Json.Decode.string
        |> decode "modes" (Json.Decode.list localVariableCollectionModesInnerDecoder)
        |> decode "defaultModeId" Json.Decode.string
        |> decode "remote" Json.Decode.bool
        |> decode "hiddenFromPublishing" Json.Decode.bool
        |> decode "variableIds" (Json.Decode.list Json.Decode.string)


localVariableCollectionModesInnerDecoder : Json.Decode.Decoder LocalVariableCollectionModesInner
localVariableCollectionModesInnerDecoder =
    Json.Decode.succeed LocalVariableCollectionModesInner
        |> decode "modeId" Json.Decode.string
        |> decode "name" Json.Decode.string


localVariableValuesByModeValueDecoder : Json.Decode.Decoder LocalVariableValuesByModeValue
localVariableValuesByModeValueDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map LocalVariableValuesByModeValueBool Json.Decode.bool
        , Json.Decode.map LocalVariableValuesByModeValueFloat Json.Decode.float
        , Json.Decode.map LocalVariableValuesByModeValueRGBA rGBADecoder
        , Json.Decode.map LocalVariableValuesByModeValueString Json.Decode.string
        , Json.Decode.map LocalVariableValuesByModeValueVariableAlias variableAliasDecoder
        ]


minimalFillsTraitDecoder : Json.Decode.Decoder MinimalFillsTrait
minimalFillsTraitDecoder =
    Json.Decode.succeed MinimalFillsTrait
        |> decode "fills" (Json.Decode.list paintDecoder)
        |> maybeDecode "styles" stylesDecoder Nothing


minimalStrokesTraitDecoder : Json.Decode.Decoder MinimalStrokesTrait
minimalStrokesTraitDecoder =
    Json.Decode.succeed MinimalStrokesTrait
        |> maybeDecode "strokes" (Json.Decode.list paintDecoder) Nothing
        |> maybeDecode "strokeWeight" Json.Decode.float (Just 1)
        |> maybeDecode "strokeAlign" strokeAlignDecoder Nothing
        |> maybeDecode "strokeJoin" strokeJoinDecoder (Just StrokeJoinMITER)


nodeDecoder : Json.Decode.Decoder Node
nodeDecoder =
    Json.Decode.field "type" Json.Decode.string
        |> Json.Decode.andThen nodeTagDecoder


nodeTagDecoder : String -> Json.Decode.Decoder Node
nodeTagDecoder tag =
    case tag of
        "CANVAS" ->
            Json.Decode.map NodeCanvasNode canvasNodeDecoder

        "COMPONENT" ->
            Json.Decode.map NodeComponentNode componentNodeDecoder

        "COMPONENT_SET" ->
            Json.Decode.map NodeComponentSetNode componentSetNodeDecoder

        "CONNECTOR" ->
            Json.Decode.map NodeConnectorNode connectorNodeDecoder

        "DOCUMENT" ->
            Json.Decode.map NodeDocumentNode documentNodeDecoder

        "ELLIPSE" ->
            Json.Decode.map NodeEllipseNode ellipseNodeDecoder

        "FRAME" ->
            Json.Decode.map NodeFrameNode frameNodeDecoder

        "GROUP" ->
            Json.Decode.map NodeGroupNode groupNodeDecoder

        "INSTANCE" ->
            Json.Decode.map NodeInstanceNode instanceNodeDecoder

        "LINE" ->
            Json.Decode.map NodeLineNode lineNodeDecoder

        "LINK_UNFURL" ->
            Json.Decode.map NodeLinkUnfurlNode linkUnfurlNodeDecoder

        "RECTANGLE" ->
            Json.Decode.map NodeRectangleNode rectangleNodeDecoder

        "REGULAR_POLYGON" ->
            Json.Decode.map NodeRegularPolygonNode regularPolygonNodeDecoder

        "SECTION" ->
            Json.Decode.map NodeSectionNode sectionNodeDecoder

        "SHAPE_WITH_TEXT" ->
            Json.Decode.map NodeShapeWithTextNode shapeWithTextNodeDecoder

        "SLICE" ->
            Json.Decode.map NodeSliceNode sliceNodeDecoder

        "STAR" ->
            Json.Decode.map NodeStarNode starNodeDecoder

        "STICKY" ->
            Json.Decode.map NodeStickyNode stickyNodeDecoder

        "TABLE" ->
            Json.Decode.map NodeTableNode tableNodeDecoder

        "TABLE_CELL" ->
            Json.Decode.map NodeTableCellNode tableCellNodeDecoder

        "TEXT" ->
            Json.Decode.map NodeTextNode textNodeDecoder

        "VECTOR" ->
            Json.Decode.map NodeVectorNode vectorNodeDecoder

        _ ->
            Json.Decode.fail <| "Trying to decode Node, but type '" ++ tag ++ "' is not supported."


overridesDecoder : Json.Decode.Decoder Overrides
overridesDecoder =
    Json.Decode.succeed Overrides
        |> decode "id" Json.Decode.string
        |> decode "overriddenFields" (Json.Decode.list Json.Decode.string)


paintDecoder : Json.Decode.Decoder Paint
paintDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map PaintGradientPaint gradientPaintDecoder
        , Json.Decode.map PaintImagePaint imagePaintDecoder
        , Json.Decode.map PaintSolidPaint solidPaintDecoder
        ]


paintOverrideDecoder : Json.Decode.Decoder PaintOverride
paintOverrideDecoder =
    Json.Decode.succeed PaintOverride
        |> maybeDecode "fills" (Json.Decode.list paintDecoder) Nothing
        |> maybeDecode "inheritFillStyleId" Json.Decode.string Nothing


pathDecoder : Json.Decode.Decoder Path
pathDecoder =
    Json.Decode.succeed Path
        |> decode "path" Json.Decode.string
        |> decode "windingRule" pathWindingRuleDecoder
        |> maybeDecode "overrideID" Json.Decode.float Nothing


pathWindingRuleDecoder : Json.Decode.Decoder PathWindingRule
pathWindingRuleDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "NONZERO" ->
                        Json.Decode.succeed PathWindingRuleNONZERO

                    "EVENODD" ->
                        Json.Decode.succeed PathWindingRuleEVENODD

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


paymentInformationDecoder : Json.Decode.Decoder PaymentInformation
paymentInformationDecoder =
    Json.Decode.succeed PaymentInformation
        |> decode "user_id" Json.Decode.string
        |> decode "resource_id" Json.Decode.string
        |> decode "resource_type" paymentInformationResourceTypeDecoder
        |> decode "payment_status" paymentStatusDecoder
        |> maybeDecode "date_of_purchase" Api.Time.dateTimeDecoder Nothing


paymentInformationResourceTypeDecoder : Json.Decode.Decoder PaymentInformationResourceType
paymentInformationResourceTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "PLUGIN" ->
                        Json.Decode.succeed PaymentInformationResourceTypePLUGIN

                    "WIDGET" ->
                        Json.Decode.succeed PaymentInformationResourceTypeWIDGET

                    "COMMUNITY_FILE" ->
                        Json.Decode.succeed PaymentInformationResourceTypeCOMMUNITYFILE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


paymentStatusDecoder : Json.Decode.Decoder PaymentStatus
paymentStatusDecoder =
    Json.Decode.succeed PaymentStatus
        |> maybeDecode "type" paymentStatusTypeDecoder Nothing


paymentStatusTypeDecoder : Json.Decode.Decoder PaymentStatusType
paymentStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "UNPAID" ->
                        Json.Decode.succeed PaymentStatusTypeUNPAID

                    "PAID" ->
                        Json.Decode.succeed PaymentStatusTypePAID

                    "TRIAL" ->
                        Json.Decode.succeed PaymentStatusTypeTRIAL

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


projectDecoder : Json.Decode.Decoder Project
projectDecoder =
    Json.Decode.succeed Project
        |> decode "id" Json.Decode.string
        |> decode "name" Json.Decode.string


publishedComponentDecoder : Json.Decode.Decoder PublishedComponent
publishedComponentDecoder =
    Json.Decode.succeed PublishedComponent
        |> decode "key" Json.Decode.string
        |> decode "file_key" Json.Decode.string
        |> decode "node_id" Json.Decode.string
        |> maybeDecode "thumbnail_url" Json.Decode.string Nothing
        |> decode "name" Json.Decode.string
        |> decode "description" Json.Decode.string
        |> decode "created_at" Api.Time.dateTimeDecoder
        |> decode "updated_at" Api.Time.dateTimeDecoder
        |> decode "user" userDecoder
        |> maybeDecode "containing_frame" frameInfoDecoder Nothing


publishedComponentSetDecoder : Json.Decode.Decoder PublishedComponentSet
publishedComponentSetDecoder =
    Json.Decode.succeed PublishedComponentSet
        |> decode "key" Json.Decode.string
        |> decode "file_key" Json.Decode.string
        |> decode "node_id" Json.Decode.string
        |> maybeDecode "thumbnail_url" Json.Decode.string Nothing
        |> decode "name" Json.Decode.string
        |> decode "description" Json.Decode.string
        |> decode "created_at" Api.Time.dateTimeDecoder
        |> decode "updated_at" Api.Time.dateTimeDecoder
        |> decode "user" userDecoder
        |> maybeDecode "containing_frame" frameInfoDecoder Nothing


publishedStyleDecoder : Json.Decode.Decoder PublishedStyle
publishedStyleDecoder =
    Json.Decode.succeed PublishedStyle
        |> decode "key" Json.Decode.string
        |> decode "file_key" Json.Decode.string
        |> decode "node_id" Json.Decode.string
        |> decode "style_type" styleTypeDecoder
        |> maybeDecode "thumbnail_url" Json.Decode.string Nothing
        |> decode "name" Json.Decode.string
        |> decode "description" Json.Decode.string
        |> decode "created_at" Api.Time.dateTimeDecoder
        |> decode "updated_at" Api.Time.dateTimeDecoder
        |> decode "user" userDecoder
        |> decode "sort_position" Json.Decode.string


publishedVariableDecoder : Json.Decode.Decoder PublishedVariable
publishedVariableDecoder =
    Json.Decode.succeed PublishedVariable
        |> decode "id" Json.Decode.string
        |> decode "subscribed_id" Json.Decode.string
        |> decode "name" Json.Decode.string
        |> decode "key" Json.Decode.string
        |> decode "variableCollectionId" Json.Decode.string
        |> decode "resolvedDataType" publishedVariableResolvedDataTypeDecoder
        |> decode "updatedAt" Api.Time.dateTimeDecoder


publishedVariableResolvedDataTypeDecoder : Json.Decode.Decoder PublishedVariableResolvedDataType
publishedVariableResolvedDataTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "BOOLEAN" ->
                        Json.Decode.succeed PublishedVariableResolvedDataTypeBOOLEAN

                    "FLOAT" ->
                        Json.Decode.succeed PublishedVariableResolvedDataTypeFLOAT

                    "STRING" ->
                        Json.Decode.succeed PublishedVariableResolvedDataTypeSTRING

                    "COLOR" ->
                        Json.Decode.succeed PublishedVariableResolvedDataTypeCOLOR

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


publishedVariableCollectionDecoder : Json.Decode.Decoder PublishedVariableCollection
publishedVariableCollectionDecoder =
    Json.Decode.succeed PublishedVariableCollection
        |> decode "id" Json.Decode.string
        |> decode "subscribed_id" Json.Decode.string
        |> decode "name" Json.Decode.string
        |> decode "key" Json.Decode.string
        |> decode "updatedAt" Api.Time.dateTimeDecoder


rGBDecoder : Json.Decode.Decoder RGB
rGBDecoder =
    Json.Decode.succeed RGB
        |> decode "r" Json.Decode.float
        |> decode "g" Json.Decode.float
        |> decode "b" Json.Decode.float


rGBADecoder : Json.Decode.Decoder RGBA
rGBADecoder =
    Json.Decode.succeed RGBA
        |> decode "r" Json.Decode.float
        |> decode "g" Json.Decode.float
        |> decode "b" Json.Decode.float
        |> decode "a" Json.Decode.float


reactionDecoder : Json.Decode.Decoder Reaction
reactionDecoder =
    Json.Decode.succeed Reaction
        |> decode "user" userDecoder
        |> decode "emoji" Json.Decode.string
        |> decode "created_at" Api.Time.dateTimeDecoder


rectangleDecoder : Json.Decode.Decoder Rectangle
rectangleDecoder =
    Json.Decode.succeed Rectangle
        |> decode "x" Json.Decode.float
        |> decode "y" Json.Decode.float
        |> decode "width" Json.Decode.float
        |> decode "height" Json.Decode.float


rectangleNodeDecoder : Json.Decode.Decoder RectangleNode
rectangleNodeDecoder =
    Json.Decode.succeed RectangleNode
        |> decodeChain rectangularShapeTraitsDecoder
        |> decode "type" rectangleNodeTypeDecoder


rectangleNodeTypeDecoder : Json.Decode.Decoder RectangleNodeType
rectangleNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "RECTANGLE" ->
                        Json.Decode.succeed RectangleNodeTypeRECTANGLE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


rectangularShapeTraitsDecoder : Json.Decode.Decoder RectangularShapeTraits
rectangularShapeTraitsDecoder =
    Json.Decode.succeed RectangularShapeTraits
        |> decodeChain cornerTraitDecoder
        |> decodeChain defaultShapeTraitsDecoder
        |> decodeChain individualStrokesTraitDecoder
        |> maybeDecode "cornerRadius" Json.Decode.float (Just 0)
        |> maybeDecode "cornerSmoothing" Json.Decode.float Nothing
        |> maybeDecode "rectangleCornerRadii" rectangleCornerRadiiDecoder Nothing
        |> maybeDecode "individualStrokeWeights" strokeWeightsDecoder Nothing


regularPolygonNodeDecoder : Json.Decode.Decoder RegularPolygonNode
regularPolygonNodeDecoder =
    Json.Decode.succeed RegularPolygonNode
        |> decodeChain cornerRadiusShapeTraitsDecoder
        |> decode "type" regularPolygonNodeTypeDecoder


regularPolygonNodeTypeDecoder : Json.Decode.Decoder RegularPolygonNodeType
regularPolygonNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "REGULAR_POLYGON" ->
                        Json.Decode.succeed RegularPolygonNodeTypeREGULARPOLYGON

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


sectionNodeDecoder : Json.Decode.Decoder SectionNode
sectionNodeDecoder =
    Json.Decode.succeed SectionNode
        |> decodeChain hasChildrenTraitDecoder
        |> decodeChain hasGeometryTraitDecoder
        |> decodeChain hasLayoutTraitDecoder
        |> decodeChain isLayerTraitDecoder
        |> decode "fills" (Json.Decode.list paintDecoder)
        |> maybeDecode "styles" stylesDecoder Nothing
        |> maybeDecode "strokes" (Json.Decode.list paintDecoder) Nothing
        |> maybeDecode "strokeWeight" Json.Decode.float (Just 1)
        |> maybeDecode "strokeAlign" strokeAlignDecoder Nothing
        |> maybeDecode "strokeJoin" strokeJoinDecoder (Just StrokeJoinMITER)
        |> maybeDecode "fillGeometry" (Json.Decode.list pathDecoder) Nothing
        |> maybeDecode "strokeGeometry" (Json.Decode.list pathDecoder) Nothing
        |> maybeDecode "strokeCap" strokeCapDecoder (Just StrokeCapNONE)
        |> maybeDecode "strokeMiterAngle" Json.Decode.float (Just 28.96)
        |> decode "children" subcanvasNodeListDecoder
        |> decode "absoluteBoundingBox" rectangleDecoder
        |> decodeNullable "absoluteRenderBounds" rectangleDecoder
        |> maybeDecode "preserveRatio" Json.Decode.bool (Just False)
        |> maybeDecode "constraints" layoutConstraintDecoder Nothing
        |> maybeDecode "size" vectorDecoder Nothing
        |> maybeDecode "layoutAlign" layoutAlignDecoder Nothing
        |> maybeDecode "layoutGrow" layoutGrowDecoder (Just LayoutGrow0)
        |> maybeDecode "layoutPositioning" layoutPositioningDecoder (Just LayoutPositioningAUTO)
        |> maybeDecode "minWidth" Json.Decode.float Nothing
        |> maybeDecode "maxWidth" Json.Decode.float (Just 0)
        |> maybeDecode "minHeight" Json.Decode.float (Just 0)
        |> maybeDecode "maxHeight" Json.Decode.float (Just 0)
        |> maybeDecode "layoutSizingHorizontal" layoutSizingHorizontalDecoder Nothing
        |> maybeDecode "layoutSizingVertical" layoutSizingVerticalDecoder Nothing
        |> decode "type" sectionNodeTypeDecoder
        |> decode "sectionContentsHidden" Json.Decode.bool


sectionNodeTypeDecoder : Json.Decode.Decoder SectionNodeType
sectionNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "SECTION" ->
                        Json.Decode.succeed SectionNodeTypeSECTION

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


shapeTypeDecoder : Json.Decode.Decoder ShapeType
shapeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "SQUARE" ->
                        Json.Decode.succeed ShapeTypeSQUARE

                    "ELLIPSE" ->
                        Json.Decode.succeed ShapeTypeELLIPSE

                    "ROUNDED_RECTANGLE" ->
                        Json.Decode.succeed ShapeTypeROUNDEDRECTANGLE

                    "DIAMOND" ->
                        Json.Decode.succeed ShapeTypeDIAMOND

                    "TRIANGLE_UP" ->
                        Json.Decode.succeed ShapeTypeTRIANGLEUP

                    "TRIANGLE_DOWN" ->
                        Json.Decode.succeed ShapeTypeTRIANGLEDOWN

                    "PARALLELOGRAM_RIGHT" ->
                        Json.Decode.succeed ShapeTypePARALLELOGRAMRIGHT

                    "PARALLELOGRAM_LEFT" ->
                        Json.Decode.succeed ShapeTypePARALLELOGRAMLEFT

                    "ENG_DATABASE" ->
                        Json.Decode.succeed ShapeTypeENGDATABASE

                    "ENG_QUEUE" ->
                        Json.Decode.succeed ShapeTypeENGQUEUE

                    "ENG_FILE" ->
                        Json.Decode.succeed ShapeTypeENGFILE

                    "ENG_FOLDER" ->
                        Json.Decode.succeed ShapeTypeENGFOLDER

                    "TRAPEZOID" ->
                        Json.Decode.succeed ShapeTypeTRAPEZOID

                    "PREDEFINED_PROCESS" ->
                        Json.Decode.succeed ShapeTypePREDEFINEDPROCESS

                    "SHIELD" ->
                        Json.Decode.succeed ShapeTypeSHIELD

                    "DOCUMENT_SINGLE" ->
                        Json.Decode.succeed ShapeTypeDOCUMENTSINGLE

                    "DOCUMENT_MULTIPLE" ->
                        Json.Decode.succeed ShapeTypeDOCUMENTMULTIPLE

                    "MANUAL_INPUT" ->
                        Json.Decode.succeed ShapeTypeMANUALINPUT

                    "HEXAGON" ->
                        Json.Decode.succeed ShapeTypeHEXAGON

                    "CHEVRON" ->
                        Json.Decode.succeed ShapeTypeCHEVRON

                    "PENTAGON" ->
                        Json.Decode.succeed ShapeTypePENTAGON

                    "OCTAGON" ->
                        Json.Decode.succeed ShapeTypeOCTAGON

                    "STAR" ->
                        Json.Decode.succeed ShapeTypeSTAR

                    "PLUS" ->
                        Json.Decode.succeed ShapeTypePLUS

                    "ARROW_LEFT" ->
                        Json.Decode.succeed ShapeTypeARROWLEFT

                    "ARROW_RIGHT" ->
                        Json.Decode.succeed ShapeTypeARROWRIGHT

                    "SUMMING_JUNCTION" ->
                        Json.Decode.succeed ShapeTypeSUMMINGJUNCTION

                    "OR" ->
                        Json.Decode.succeed ShapeTypeOR

                    "SPEECH_BUBBLE" ->
                        Json.Decode.succeed ShapeTypeSPEECHBUBBLE

                    "INTERNAL_STORAGE" ->
                        Json.Decode.succeed ShapeTypeINTERNALSTORAGE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


shapeWithTextNodeDecoder : Json.Decode.Decoder ShapeWithTextNode
shapeWithTextNodeDecoder =
    Json.Decode.succeed ShapeWithTextNode
        |> decodeChain cornerTraitDecoder
        |> decodeChain hasBlendModeAndOpacityTraitDecoder
        |> decodeChain hasEffectsTraitDecoder
        |> decodeChain hasLayoutTraitDecoder
        |> decodeChain hasMaskTraitDecoder
        |> decodeChain hasTextSublayerTraitDecoder
        |> decodeChain isLayerTraitDecoder
        |> decodeChain minimalFillsTraitDecoder
        |> decodeChain minimalStrokesTraitDecoder
        |> decode "absoluteBoundingBox" rectangleDecoder
        |> decodeNullable "absoluteRenderBounds" rectangleDecoder
        |> maybeDecode "preserveRatio" Json.Decode.bool (Just False)
        |> maybeDecode "constraints" layoutConstraintDecoder Nothing
        |> maybeDecode "size" vectorDecoder Nothing
        |> maybeDecode "layoutAlign" layoutAlignDecoder Nothing
        |> maybeDecode "layoutGrow" layoutGrowDecoder (Just LayoutGrow0)
        |> maybeDecode "layoutPositioning" layoutPositioningDecoder (Just LayoutPositioningAUTO)
        |> maybeDecode "minWidth" Json.Decode.float Nothing
        |> maybeDecode "maxWidth" Json.Decode.float (Just 0)
        |> maybeDecode "minHeight" Json.Decode.float (Just 0)
        |> maybeDecode "maxHeight" Json.Decode.float (Just 0)
        |> maybeDecode "layoutSizingHorizontal" layoutSizingHorizontalDecoder Nothing
        |> maybeDecode "layoutSizingVertical" layoutSizingVerticalDecoder Nothing
        |> decode "blendMode" blendModeDecoder
        |> maybeDecode "opacity" Json.Decode.float (Just 1)
        |> decode "fills" (Json.Decode.list paintDecoder)
        |> maybeDecode "styles" stylesDecoder Nothing
        |> maybeDecode "isMask" Json.Decode.bool (Just False)
        |> maybeDecode "maskType" shapeWithTextNodeMaskTypeDecoder Nothing
        |> maybeDecode "isMaskOutline" Json.Decode.bool (Just False)
        |> decode "effects" (Json.Decode.list effectDecoder)
        |> decode "characters" Json.Decode.string
        |> maybeDecode "cornerRadius" Json.Decode.float (Just 0)
        |> maybeDecode "cornerSmoothing" Json.Decode.float Nothing
        |> maybeDecode "rectangleCornerRadii" rectangleCornerRadiiDecoder Nothing
        |> maybeDecode "strokes" (Json.Decode.list paintDecoder) Nothing
        |> maybeDecode "strokeWeight" Json.Decode.float (Just 1)
        |> maybeDecode "strokeAlign" strokeAlignDecoder Nothing
        |> maybeDecode "strokeJoin" strokeJoinDecoder (Just StrokeJoinMITER)
        |> decode "type" shapeWithTextNodeTypeDecoder
        |> decode "shapeType" shapeTypeDecoder


rectangleCornerRadiiDecoder : Json.Decode.Decoder RectangleCornerRadii
rectangleCornerRadiiDecoder =
    Json.Decode.list Json.Decode.float
        |> Json.Decode.andThen
            (\radii ->
                if List.length radii /= 4 then
                    Json.Decode.fail "Expecting exactly 4 rectangle corner radii"

                else
                    Json.Decode.succeed radii
            )


shapeWithTextNodeMaskTypeDecoder : Json.Decode.Decoder ShapeWithTextNodeMaskType
shapeWithTextNodeMaskTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ALPHA" ->
                        Json.Decode.succeed ShapeWithTextNodeMaskTypeALPHA

                    "VECTOR" ->
                        Json.Decode.succeed ShapeWithTextNodeMaskTypeVECTOR

                    "LUMINANCE" ->
                        Json.Decode.succeed ShapeWithTextNodeMaskTypeLUMINANCE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


shapeWithTextNodeTypeDecoder : Json.Decode.Decoder ShapeWithTextNodeType
shapeWithTextNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "SHAPE_WITH_TEXT" ->
                        Json.Decode.succeed ShapeWithTextNodeTypeSHAPEWITHTEXT

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


sizeDecoder : Json.Decode.Decoder Size
sizeDecoder =
    Json.Decode.succeed Size
        |> decode "width" Json.Decode.float
        |> decode "height" Json.Decode.float


sliceNodeDecoder : Json.Decode.Decoder SliceNode
sliceNodeDecoder =
    Json.Decode.succeed SliceNode
        |> decodeChain isLayerTraitDecoder
        |> decode "type" sliceNodeTypeDecoder


sliceNodeTypeDecoder : Json.Decode.Decoder SliceNodeType
sliceNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "SLICE" ->
                        Json.Decode.succeed SliceNodeTypeSLICE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


solidPaintDecoder : Json.Decode.Decoder SolidPaint
solidPaintDecoder =
    Json.Decode.succeed SolidPaint
        |> decodeChain basePaintDecoder
        |> decode "type" solidPaintTypeDecoder
        |> decode "color" rGBADecoder
        |> maybeDecode "boundVariables" solidPaintAllOfBoundVariablesDecoder Nothing


solidPaintTypeDecoder : Json.Decode.Decoder SolidPaintType
solidPaintTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "SOLID" ->
                        Json.Decode.succeed SolidPaintTypeSOLID

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


solidPaintAllOfBoundVariablesDecoder : Json.Decode.Decoder SolidPaintAllOfBoundVariables
solidPaintAllOfBoundVariablesDecoder =
    Json.Decode.succeed SolidPaintAllOfBoundVariables
        |> maybeDecode "color" variableAliasDecoder Nothing


starNodeDecoder : Json.Decode.Decoder StarNode
starNodeDecoder =
    Json.Decode.succeed StarNode
        |> decodeChain cornerRadiusShapeTraitsDecoder
        |> decode "type" starNodeTypeDecoder


starNodeTypeDecoder : Json.Decode.Decoder StarNodeType
starNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "STAR" ->
                        Json.Decode.succeed StarNodeTypeSTAR

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


stickyNodeDecoder : Json.Decode.Decoder StickyNode
stickyNodeDecoder =
    Json.Decode.succeed StickyNode
        |> decodeChain hasBlendModeAndOpacityTraitDecoder
        |> decodeChain hasEffectsTraitDecoder
        |> decodeChain hasLayoutTraitDecoder
        |> decodeChain hasMaskTraitDecoder
        |> decodeChain hasTextSublayerTraitDecoder
        |> decodeChain isLayerTraitDecoder
        |> decodeChain minimalFillsTraitDecoder
        |> decode "absoluteBoundingBox" rectangleDecoder
        |> decodeNullable "absoluteRenderBounds" rectangleDecoder
        |> maybeDecode "preserveRatio" Json.Decode.bool (Just False)
        |> maybeDecode "constraints" layoutConstraintDecoder Nothing
        |> maybeDecode "size" vectorDecoder Nothing
        |> maybeDecode "layoutAlign" layoutAlignDecoder Nothing
        |> maybeDecode "layoutGrow" layoutGrowDecoder (Just LayoutGrow0)
        |> maybeDecode "layoutPositioning" layoutPositioningDecoder (Just LayoutPositioningAUTO)
        |> maybeDecode "minWidth" Json.Decode.float Nothing
        |> maybeDecode "maxWidth" Json.Decode.float (Just 0)
        |> maybeDecode "minHeight" Json.Decode.float (Just 0)
        |> maybeDecode "maxHeight" Json.Decode.float (Just 0)
        |> maybeDecode "layoutSizingHorizontal" layoutSizingHorizontalDecoder Nothing
        |> maybeDecode "layoutSizingVertical" layoutSizingVerticalDecoder Nothing
        |> decode "blendMode" blendModeDecoder
        |> maybeDecode "opacity" Json.Decode.float (Just 1)
        |> decode "fills" (Json.Decode.list paintDecoder)
        |> maybeDecode "styles" stylesDecoder Nothing
        |> maybeDecode "isMask" Json.Decode.bool (Just False)
        |> maybeDecode "maskType" stickyNodeMaskTypeDecoder Nothing
        |> maybeDecode "isMaskOutline" Json.Decode.bool (Just False)
        |> decode "effects" (Json.Decode.list effectDecoder)
        |> decode "characters" Json.Decode.string
        |> decode "type" stickyNodeTypeDecoder
        |> maybeDecode "authorVisible" Json.Decode.bool (Just False)


stickyNodeMaskTypeDecoder : Json.Decode.Decoder StickyNodeMaskType
stickyNodeMaskTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ALPHA" ->
                        Json.Decode.succeed StickyNodeMaskTypeALPHA

                    "VECTOR" ->
                        Json.Decode.succeed StickyNodeMaskTypeVECTOR

                    "LUMINANCE" ->
                        Json.Decode.succeed StickyNodeMaskTypeLUMINANCE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


stickyNodeTypeDecoder : Json.Decode.Decoder StickyNodeType
stickyNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "STICKY" ->
                        Json.Decode.succeed StickyNodeTypeSTICKY

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


strokeWeightsDecoder : Json.Decode.Decoder StrokeWeights
strokeWeightsDecoder =
    Json.Decode.succeed StrokeWeights
        |> decode "top" Json.Decode.float
        |> decode "right" Json.Decode.float
        |> decode "bottom" Json.Decode.float
        |> decode "left" Json.Decode.float


styleDecoder : Json.Decode.Decoder Style
styleDecoder =
    Json.Decode.succeed Style
        |> decode "key" Json.Decode.string
        |> decode "name" Json.Decode.string
        |> decode "description" Json.Decode.string
        |> decode "remote" Json.Decode.bool
        |> decode "styleType" styleTypeDecoder


styleTypeDecoder : Json.Decode.Decoder StyleType
styleTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "FILL" ->
                        Json.Decode.succeed StyleTypeFILL

                    "TEXT" ->
                        Json.Decode.succeed StyleTypeTEXT

                    "EFFECT" ->
                        Json.Decode.succeed StyleTypeEFFECT

                    "GRID" ->
                        Json.Decode.succeed StyleTypeGRID

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


subcanvasNodeListDecoder : Json.Decode.Decoder (List SubcanvasNode)
subcanvasNodeListDecoder =
    Json.Decode.oneOf
        [ subcanvasNodeDecoder |> Json.Decode.map Just
        , Json.Decode.succeed Nothing
        ]
        |> Json.Decode.list
        |> Json.Decode.map (List.filterMap identity)


subcanvasNodeDecoder : Json.Decode.Decoder SubcanvasNode
subcanvasNodeDecoder =
    Json.Decode.field "type" Json.Decode.string
        |> Json.Decode.andThen subcanvasNodeTagDecoder


subcanvasNodeTagDecoder : String -> Json.Decode.Decoder SubcanvasNode
subcanvasNodeTagDecoder tag =
    case tag of
        "COMPONENT" ->
            Json.Decode.map SubcanvasNodeComponentNode componentNodeDecoder

        "COMPONENT_SET" ->
            Json.Decode.map SubcanvasNodeComponentSetNode componentSetNodeDecoder

        "CONNECTOR" ->
            Json.Decode.map SubcanvasNodeConnectorNode connectorNodeDecoder

        "ELLIPSE" ->
            Json.Decode.map SubcanvasNodeEllipseNode ellipseNodeDecoder

        "FRAME" ->
            Json.Decode.map SubcanvasNodeFrameNode frameNodeDecoder

        "GROUP" ->
            Json.Decode.map SubcanvasNodeGroupNode groupNodeDecoder

        "INSTANCE" ->
            Json.Decode.map SubcanvasNodeInstanceNode instanceNodeDecoder

        "LINE" ->
            Json.Decode.map SubcanvasNodeLineNode lineNodeDecoder

        "LINK_UNFURL" ->
            Json.Decode.map SubcanvasNodeLinkUnfurlNode linkUnfurlNodeDecoder

        "RECTANGLE" ->
            Json.Decode.map SubcanvasNodeRectangleNode rectangleNodeDecoder

        "REGULAR_POLYGON" ->
            Json.Decode.map SubcanvasNodeRegularPolygonNode regularPolygonNodeDecoder

        "SECTION" ->
            Json.Decode.map SubcanvasNodeSectionNode sectionNodeDecoder

        "SHAPE_WITH_TEXT" ->
            Json.Decode.map SubcanvasNodeShapeWithTextNode shapeWithTextNodeDecoder

        "SLICE" ->
            Json.Decode.map SubcanvasNodeSliceNode sliceNodeDecoder

        "STAR" ->
            Json.Decode.map SubcanvasNodeStarNode starNodeDecoder

        "STICKY" ->
            Json.Decode.map SubcanvasNodeStickyNode stickyNodeDecoder

        "TABLE" ->
            Json.Decode.map SubcanvasNodeTableNode tableNodeDecoder

        "TABLE_CELL" ->
            Json.Decode.map SubcanvasNodeTableCellNode tableCellNodeDecoder

        "TEXT" ->
            Json.Decode.map SubcanvasNodeTextNode textNodeDecoder

        "VECTOR" ->
            Json.Decode.map SubcanvasNodeVectorNode vectorNodeDecoder

        _ ->
            Json.Decode.fail <| "Trying to decode SubcanvasNode, but type '" ++ tag ++ "' is not supported."


tableCellNodeDecoder : Json.Decode.Decoder TableCellNode
tableCellNodeDecoder =
    Json.Decode.succeed TableCellNode
        |> decodeChain hasLayoutTraitDecoder
        |> decodeChain hasTextSublayerTraitDecoder
        |> decodeChain isLayerTraitDecoder
        |> decodeChain minimalFillsTraitDecoder
        |> decode "fills" (Json.Decode.list paintDecoder)
        |> maybeDecode "styles" stylesDecoder Nothing
        |> decode "absoluteBoundingBox" rectangleDecoder
        |> decodeNullable "absoluteRenderBounds" rectangleDecoder
        |> maybeDecode "preserveRatio" Json.Decode.bool (Just False)
        |> maybeDecode "constraints" layoutConstraintDecoder Nothing
        |> maybeDecode "size" vectorDecoder Nothing
        |> maybeDecode "layoutAlign" layoutAlignDecoder Nothing
        |> maybeDecode "layoutGrow" layoutGrowDecoder (Just LayoutGrow0)
        |> maybeDecode "layoutPositioning" layoutPositioningDecoder (Just LayoutPositioningAUTO)
        |> maybeDecode "minWidth" Json.Decode.float Nothing
        |> maybeDecode "maxWidth" Json.Decode.float (Just 0)
        |> maybeDecode "minHeight" Json.Decode.float (Just 0)
        |> maybeDecode "maxHeight" Json.Decode.float (Just 0)
        |> maybeDecode "layoutSizingHorizontal" layoutSizingHorizontalDecoder Nothing
        |> maybeDecode "layoutSizingVertical" layoutSizingVerticalDecoder Nothing
        |> decode "characters" Json.Decode.string
        |> decode "type" tableCellNodeTypeDecoder


tableCellNodeTypeDecoder : Json.Decode.Decoder TableCellNodeType
tableCellNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "TABLE_CELL" ->
                        Json.Decode.succeed TableCellNodeTypeTABLECELL

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


tableNodeDecoder : Json.Decode.Decoder TableNode
tableNodeDecoder =
    Json.Decode.succeed TableNode
        |> decodeChain hasBlendModeAndOpacityTraitDecoder
        |> decodeChain hasChildrenTraitDecoder
        |> decodeChain hasEffectsTraitDecoder
        |> decodeChain hasLayoutTraitDecoder
        |> decodeChain isLayerTraitDecoder
        |> decodeChain minimalStrokesTraitDecoder
        |> decode "children" subcanvasNodeListDecoder
        |> decode "absoluteBoundingBox" rectangleDecoder
        |> decodeNullable "absoluteRenderBounds" rectangleDecoder
        |> maybeDecode "preserveRatio" Json.Decode.bool (Just False)
        |> maybeDecode "constraints" layoutConstraintDecoder Nothing
        |> maybeDecode "size" vectorDecoder Nothing
        |> maybeDecode "layoutAlign" layoutAlignDecoder Nothing
        |> maybeDecode "layoutGrow" layoutGrowDecoder (Just LayoutGrow0)
        |> maybeDecode "layoutPositioning" layoutPositioningDecoder (Just LayoutPositioningAUTO)
        |> maybeDecode "minWidth" Json.Decode.float Nothing
        |> maybeDecode "maxWidth" Json.Decode.float (Just 0)
        |> maybeDecode "minHeight" Json.Decode.float (Just 0)
        |> maybeDecode "maxHeight" Json.Decode.float (Just 0)
        |> maybeDecode "layoutSizingHorizontal" layoutSizingHorizontalDecoder Nothing
        |> maybeDecode "layoutSizingVertical" layoutSizingVerticalDecoder Nothing
        |> maybeDecode "strokes" (Json.Decode.list paintDecoder) Nothing
        |> maybeDecode "strokeWeight" Json.Decode.float (Just 1)
        |> maybeDecode "strokeAlign" strokeAlignDecoder Nothing
        |> maybeDecode "strokeJoin" strokeJoinDecoder (Just StrokeJoinMITER)
        |> decode "effects" (Json.Decode.list effectDecoder)
        |> decode "blendMode" blendModeDecoder
        |> maybeDecode "opacity" Json.Decode.float (Just 1)
        |> decode "type" tableNodeTypeDecoder


tableNodeTypeDecoder : Json.Decode.Decoder TableNodeType
tableNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "TABLE" ->
                        Json.Decode.succeed TableNodeTypeTABLE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


textNodeDecoder : Json.Decode.Decoder TextNode
textNodeDecoder =
    Json.Decode.succeed TextNode
        |> decodeChain defaultShapeTraitsDecoder
        |> decodeChain typePropertiesTraitDecoder
        |> decode "characters" Json.Decode.string
        |> decode "style" typeStyleDecoder
        |> decode "styleOverrideTable" typeStyleDecoder
        |> decode "lineTypes" (Json.Decode.list textNodeLineTypesDecoder)
        |> decode "type" textNodeTypeDecoder


textNodeLineTypesDecoder : Json.Decode.Decoder TextNodeLineTypes
textNodeLineTypesDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "NONE" ->
                        Json.Decode.succeed TextNodeLineTypesNONE

                    "ORDERED" ->
                        Json.Decode.succeed TextNodeLineTypesORDERED

                    "UNORDERED" ->
                        Json.Decode.succeed TextNodeLineTypesUNORDERED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


textNodeTypeDecoder : Json.Decode.Decoder TextNodeType
textNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "TEXT" ->
                        Json.Decode.succeed TextNodeTypeTEXT

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


transitionSourceTraitDecoder : Json.Decode.Decoder TransitionSourceTrait
transitionSourceTraitDecoder =
    Json.Decode.succeed TransitionSourceTrait
        |> maybeDecode "transitionNodeID" Json.Decode.string Nothing
        |> maybeDecode "transitionDuration" Json.Decode.float Nothing
        |> maybeDecode "transitionEasing" easingTypeDecoder Nothing


typePropertiesTraitDecoder : Json.Decode.Decoder TypePropertiesTrait
typePropertiesTraitDecoder =
    Json.Decode.succeed TypePropertiesTrait
        |> decode "characters" Json.Decode.string
        |> decode "style" typeStyleDecoder
        |> decode "characterStyleOverrides" (Json.Decode.list Json.Decode.float)
        |> decode "styleOverrideTable" typeStyleDecoder
        |> decode "lineTypes" (Json.Decode.list typePropertiesTraitLineTypesDecoder)
        |> decode "lineIndentations" (Json.Decode.list Json.Decode.float)


typePropertiesTraitLineTypesDecoder : Json.Decode.Decoder TypePropertiesTraitLineTypes
typePropertiesTraitLineTypesDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "NONE" ->
                        Json.Decode.succeed TypePropertiesTraitLineTypesNONE

                    "ORDERED" ->
                        Json.Decode.succeed TypePropertiesTraitLineTypesORDERED

                    "UNORDERED" ->
                        Json.Decode.succeed TypePropertiesTraitLineTypesUNORDERED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


typeStyleDecoder : Json.Decode.Decoder TypeStyle
typeStyleDecoder =
    Json.Decode.succeed TypeStyle
        |> maybeDecode "fontFamily" Json.Decode.string Nothing
        |> maybeDecodeNullable "fontPostScriptName" Json.Decode.string Nothing
        |> maybeDecode "paragraphSpacing" Json.Decode.float (Just 0)
        |> maybeDecode "paragraphIndent" Json.Decode.float (Just 0)
        |> maybeDecode "listSpacing" Json.Decode.float (Just 0)
        |> maybeDecode "italic" Json.Decode.bool (Just False)
        |> maybeDecode "fontWeight" Json.Decode.float Nothing
        |> maybeDecode "fontSize" Json.Decode.float Nothing
        |> maybeDecode "textCase" typeStyleTextCaseDecoder Nothing
        |> maybeDecode "textDecoration" typeStyleTextDecorationDecoder (Just TypeStyleTextDecorationNONE)
        |> maybeDecode "textAutoResize" typeStyleTextAutoResizeDecoder (Just TypeStyleTextAutoResizeNONE)
        |> maybeDecode "textTruncation" typeStyleTextTruncationDecoder (Just TypeStyleTextTruncationDISABLED)
        |> maybeDecode "maxLines" Json.Decode.float Nothing
        |> maybeDecode "textAlignHorizontal" typeStyleTextAlignHorizontalDecoder Nothing
        |> maybeDecode "textAlignVertical" typeStyleTextAlignVerticalDecoder Nothing
        |> maybeDecode "letterSpacing" Json.Decode.float Nothing
        |> maybeDecode "fills" (Json.Decode.list paintDecoder) Nothing
        |> maybeDecode "hyperlink" hyperlinkDecoder Nothing
        |> maybeDecode "opentypeFlags" Json.Decode.float Nothing
        |> maybeDecode "lineHeightPx" Json.Decode.float Nothing
        |> maybeDecode "lineHeightPercent" Json.Decode.float (Just 100)
        |> maybeDecode "lineHeightPercentFontSize" Json.Decode.float Nothing
        |> maybeDecode "lineHeightUnit" typeStyleLineHeightUnitDecoder Nothing
        |> maybeDecode "boundVariables" typeStyleBoundVariablesDecoder Nothing


typeStyleTextCaseDecoder : Json.Decode.Decoder TypeStyleTextCase
typeStyleTextCaseDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "UPPER" ->
                        Json.Decode.succeed TypeStyleTextCaseUPPER

                    "LOWER" ->
                        Json.Decode.succeed TypeStyleTextCaseLOWER

                    "TITLE" ->
                        Json.Decode.succeed TypeStyleTextCaseTITLE

                    "SMALL_CAPS" ->
                        Json.Decode.succeed TypeStyleTextCaseSMALLCAPS

                    "SMALL_CAPS_FORCED" ->
                        Json.Decode.succeed TypeStyleTextCaseSMALLCAPSFORCED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


typeStyleTextDecorationDecoder : Json.Decode.Decoder TypeStyleTextDecoration
typeStyleTextDecorationDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "NONE" ->
                        Json.Decode.succeed TypeStyleTextDecorationNONE

                    "STRIKETHROUGH" ->
                        Json.Decode.succeed TypeStyleTextDecorationSTRIKETHROUGH

                    "UNDERLINE" ->
                        Json.Decode.succeed TypeStyleTextDecorationUNDERLINE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


typeStyleTextAutoResizeDecoder : Json.Decode.Decoder TypeStyleTextAutoResize
typeStyleTextAutoResizeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "NONE" ->
                        Json.Decode.succeed TypeStyleTextAutoResizeNONE

                    "WIDTH_AND_HEIGHT" ->
                        Json.Decode.succeed TypeStyleTextAutoResizeWIDTHANDHEIGHT

                    "HEIGHT" ->
                        Json.Decode.succeed TypeStyleTextAutoResizeHEIGHT

                    "TRUNCATE" ->
                        Json.Decode.succeed TypeStyleTextAutoResizeTRUNCATE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


typeStyleTextTruncationDecoder : Json.Decode.Decoder TypeStyleTextTruncation
typeStyleTextTruncationDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "DISABLED" ->
                        Json.Decode.succeed TypeStyleTextTruncationDISABLED

                    "ENDING" ->
                        Json.Decode.succeed TypeStyleTextTruncationENDING

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


typeStyleTextAlignHorizontalDecoder : Json.Decode.Decoder TypeStyleTextAlignHorizontal
typeStyleTextAlignHorizontalDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "LEFT" ->
                        Json.Decode.succeed TypeStyleTextAlignHorizontalLEFT

                    "RIGHT" ->
                        Json.Decode.succeed TypeStyleTextAlignHorizontalRIGHT

                    "CENTER" ->
                        Json.Decode.succeed TypeStyleTextAlignHorizontalCENTER

                    "JUSTIFIED" ->
                        Json.Decode.succeed TypeStyleTextAlignHorizontalJUSTIFIED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


typeStyleTextAlignVerticalDecoder : Json.Decode.Decoder TypeStyleTextAlignVertical
typeStyleTextAlignVerticalDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "TOP" ->
                        Json.Decode.succeed TypeStyleTextAlignVerticalTOP

                    "CENTER" ->
                        Json.Decode.succeed TypeStyleTextAlignVerticalCENTER

                    "BOTTOM" ->
                        Json.Decode.succeed TypeStyleTextAlignVerticalBOTTOM

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


typeStyleLineHeightUnitDecoder : Json.Decode.Decoder TypeStyleLineHeightUnit
typeStyleLineHeightUnitDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "PIXELS" ->
                        Json.Decode.succeed TypeStyleLineHeightUnitPIXELS

                    "FONT_SIZE_%" ->
                        Json.Decode.succeed TypeStyleLineHeightUnitFONTSIZE

                    "INTRINSIC_%" ->
                        Json.Decode.succeed TypeStyleLineHeightUnitINTRINSIC

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


typeStyleBoundVariablesDecoder : Json.Decode.Decoder TypeStyleBoundVariables
typeStyleBoundVariablesDecoder =
    Json.Decode.succeed TypeStyleBoundVariables
        |> maybeDecode "fontFamily" variableAliasDecoder Nothing
        |> maybeDecode "fontSize" variableAliasDecoder Nothing
        |> maybeDecode "fontStyle" variableAliasDecoder Nothing
        |> maybeDecode "fontWeight" variableAliasDecoder Nothing
        |> maybeDecode "letterSpacing" variableAliasDecoder Nothing
        |> maybeDecode "lineHeight" variableAliasDecoder Nothing
        |> maybeDecode "paragraphSpacing" variableAliasDecoder Nothing
        |> maybeDecode "paragraphIndent" variableAliasDecoder Nothing


userDecoder : Json.Decode.Decoder User
userDecoder =
    Json.Decode.succeed User
        |> decode "id" Json.Decode.string
        |> decode "handle" Json.Decode.string
        |> decode "img_url" Json.Decode.string


variableAliasDecoder : Json.Decode.Decoder VariableAlias
variableAliasDecoder =
    Json.Decode.succeed VariableAlias
        |> decode "type" variableAliasTypeDecoder
        |> decode "id" Json.Decode.string


variableAliasTypeDecoder : Json.Decode.Decoder VariableAliasType
variableAliasTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "VARIABLE_ALIAS" ->
                        Json.Decode.succeed VariableAliasTypeVARIABLEALIAS

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


variableChangeDecoder : Json.Decode.Decoder VariableChange
variableChangeDecoder =
    Json.Decode.field "action" Json.Decode.string
        |> Json.Decode.andThen variableChangeTagDecoder


variableChangeTagDecoder : String -> Json.Decode.Decoder VariableChange
variableChangeTagDecoder tag =
    case tag of
        "CREATE" ->
            Json.Decode.map VariableChangeVariableCreate variableCreateDecoder

        "DELETE" ->
            Json.Decode.map VariableChangeVariableDelete variableDeleteDecoder

        "UPDATE" ->
            Json.Decode.map VariableChangeVariableUpdate variableUpdateDecoder

        _ ->
            Json.Decode.fail <| "Trying to decode VariableChange, but action '" ++ tag ++ "' is not supported."


variableCodeSyntaxDecoder : Json.Decode.Decoder VariableCodeSyntax
variableCodeSyntaxDecoder =
    Json.Decode.succeed VariableCodeSyntax
        |> maybeDecode "WEB" Json.Decode.string Nothing
        |> maybeDecode "ANDROID" Json.Decode.string Nothing
        |> maybeDecode "iOS" Json.Decode.string Nothing


variableCollectionChangeDecoder : Json.Decode.Decoder VariableCollectionChange
variableCollectionChangeDecoder =
    Json.Decode.field "action" Json.Decode.string
        |> Json.Decode.andThen variableCollectionChangeTagDecoder


variableCollectionChangeTagDecoder : String -> Json.Decode.Decoder VariableCollectionChange
variableCollectionChangeTagDecoder tag =
    case tag of
        "CREATE" ->
            Json.Decode.map VariableCollectionChangeVariableCollectionCreate variableCollectionCreateDecoder

        "DELETE" ->
            Json.Decode.map VariableCollectionChangeVariableCollectionDelete variableCollectionDeleteDecoder

        "UPDATE" ->
            Json.Decode.map VariableCollectionChangeVariableCollectionUpdate variableCollectionUpdateDecoder

        _ ->
            Json.Decode.fail <| "Trying to decode VariableCollectionChange, but action '" ++ tag ++ "' is not supported."


variableCollectionCreateDecoder : Json.Decode.Decoder VariableCollectionCreate
variableCollectionCreateDecoder =
    Json.Decode.succeed VariableCollectionCreate
        |> decode "action" variableCollectionCreateActionDecoder
        |> maybeDecode "id" Json.Decode.string Nothing
        |> decode "name" Json.Decode.string
        |> maybeDecode "initialModeId" Json.Decode.string Nothing
        |> maybeDecode "hiddenFromPublishing" Json.Decode.bool (Just False)


variableCollectionCreateActionDecoder : Json.Decode.Decoder VariableCollectionCreateAction
variableCollectionCreateActionDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "CREATE" ->
                        Json.Decode.succeed VariableCollectionCreateActionCREATE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


variableCollectionDeleteDecoder : Json.Decode.Decoder VariableCollectionDelete
variableCollectionDeleteDecoder =
    Json.Decode.succeed VariableCollectionDelete
        |> decode "action" variableCollectionDeleteActionDecoder
        |> decode "id" Json.Decode.string


variableCollectionDeleteActionDecoder : Json.Decode.Decoder VariableCollectionDeleteAction
variableCollectionDeleteActionDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "DELETE" ->
                        Json.Decode.succeed VariableCollectionDeleteActionDELETE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


variableCollectionUpdateDecoder : Json.Decode.Decoder VariableCollectionUpdate
variableCollectionUpdateDecoder =
    Json.Decode.succeed VariableCollectionUpdate
        |> decode "action" variableCollectionUpdateActionDecoder
        |> decode "id" Json.Decode.string
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "hiddenFromPublishing" Json.Decode.bool (Just False)


variableCollectionUpdateActionDecoder : Json.Decode.Decoder VariableCollectionUpdateAction
variableCollectionUpdateActionDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "UPDATE" ->
                        Json.Decode.succeed VariableCollectionUpdateActionUPDATE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


variableCreateDecoder : Json.Decode.Decoder VariableCreate
variableCreateDecoder =
    Json.Decode.succeed VariableCreate
        |> decode "action" variableCreateActionDecoder
        |> maybeDecode "id" Json.Decode.string Nothing
        |> decode "name" Json.Decode.string
        |> decode "variableCollectionId" Json.Decode.string
        |> decode "resolvedType" variableCreateResolvedTypeDecoder
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "hiddenFromPublishing" Json.Decode.bool (Just False)
        |> maybeDecode "scopes" (Json.Decode.list variableScopeDecoder) Nothing
        |> maybeDecode "codeSyntax" variableCodeSyntaxDecoder Nothing


variableCreateActionDecoder : Json.Decode.Decoder VariableCreateAction
variableCreateActionDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "CREATE" ->
                        Json.Decode.succeed VariableCreateActionCREATE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


variableCreateResolvedTypeDecoder : Json.Decode.Decoder VariableCreateResolvedType
variableCreateResolvedTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "BOOLEAN" ->
                        Json.Decode.succeed VariableCreateResolvedTypeBOOLEAN

                    "FLOAT" ->
                        Json.Decode.succeed VariableCreateResolvedTypeFLOAT

                    "STRING" ->
                        Json.Decode.succeed VariableCreateResolvedTypeSTRING

                    "COLOR" ->
                        Json.Decode.succeed VariableCreateResolvedTypeCOLOR

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


variableDeleteDecoder : Json.Decode.Decoder VariableDelete
variableDeleteDecoder =
    Json.Decode.succeed VariableDelete
        |> decode "action" variableDeleteActionDecoder
        |> decode "id" Json.Decode.string


variableDeleteActionDecoder : Json.Decode.Decoder VariableDeleteAction
variableDeleteActionDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "DELETE" ->
                        Json.Decode.succeed VariableDeleteActionDELETE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


variableModeChangeDecoder : Json.Decode.Decoder VariableModeChange
variableModeChangeDecoder =
    Json.Decode.field "action" Json.Decode.string
        |> Json.Decode.andThen variableModeChangeTagDecoder


variableModeChangeTagDecoder : String -> Json.Decode.Decoder VariableModeChange
variableModeChangeTagDecoder tag =
    case tag of
        "CREATE" ->
            Json.Decode.map VariableModeChangeVariableModeCreate variableModeCreateDecoder

        "DELETE" ->
            Json.Decode.map VariableModeChangeVariableModeDelete variableModeDeleteDecoder

        "UPDATE" ->
            Json.Decode.map VariableModeChangeVariableModeUpdate variableModeUpdateDecoder

        _ ->
            Json.Decode.fail <| "Trying to decode VariableModeChange, but action '" ++ tag ++ "' is not supported."


variableModeCreateDecoder : Json.Decode.Decoder VariableModeCreate
variableModeCreateDecoder =
    Json.Decode.succeed VariableModeCreate
        |> decode "action" variableModeCreateActionDecoder
        |> maybeDecode "id" Json.Decode.string Nothing
        |> decode "name" Json.Decode.string
        |> decode "variableCollectionId" Json.Decode.string


variableModeCreateActionDecoder : Json.Decode.Decoder VariableModeCreateAction
variableModeCreateActionDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "CREATE" ->
                        Json.Decode.succeed VariableModeCreateActionCREATE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


variableModeDeleteDecoder : Json.Decode.Decoder VariableModeDelete
variableModeDeleteDecoder =
    Json.Decode.succeed VariableModeDelete
        |> decode "action" variableModeDeleteActionDecoder
        |> decode "id" Json.Decode.string


variableModeDeleteActionDecoder : Json.Decode.Decoder VariableModeDeleteAction
variableModeDeleteActionDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "DELETE" ->
                        Json.Decode.succeed VariableModeDeleteActionDELETE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


variableModeUpdateDecoder : Json.Decode.Decoder VariableModeUpdate
variableModeUpdateDecoder =
    Json.Decode.succeed VariableModeUpdate
        |> decode "action" variableModeUpdateActionDecoder
        |> decode "id" Json.Decode.string
        |> maybeDecode "name" Json.Decode.string Nothing
        |> decode "variableCollectionId" Json.Decode.string


variableModeUpdateActionDecoder : Json.Decode.Decoder VariableModeUpdateAction
variableModeUpdateActionDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "UPDATE" ->
                        Json.Decode.succeed VariableModeUpdateActionUPDATE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


variableModeValueDecoder : Json.Decode.Decoder VariableModeValue
variableModeValueDecoder =
    Json.Decode.succeed VariableModeValue
        |> decode "variableId" Json.Decode.string
        |> decode "modeId" Json.Decode.string
        |> decode "value" variableValueDecoder


variableScopeDecoder : Json.Decode.Decoder VariableScope
variableScopeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ALL_SCOPES" ->
                        Json.Decode.succeed VariableScopeALLSCOPES

                    "TEXT_CONTENT" ->
                        Json.Decode.succeed VariableScopeTEXTCONTENT

                    "CORNER_RADIUS" ->
                        Json.Decode.succeed VariableScopeCORNERRADIUS

                    "WIDTH_HEIGHT" ->
                        Json.Decode.succeed VariableScopeWIDTHHEIGHT

                    "GAP" ->
                        Json.Decode.succeed VariableScopeGAP

                    "ALL_FILLS" ->
                        Json.Decode.succeed VariableScopeALLFILLS

                    "FRAME_FILL" ->
                        Json.Decode.succeed VariableScopeFRAMEFILL

                    "SHAPE_FILL" ->
                        Json.Decode.succeed VariableScopeSHAPEFILL

                    "TEXT_FILL" ->
                        Json.Decode.succeed VariableScopeTEXTFILL

                    "STROKE_COLOR" ->
                        Json.Decode.succeed VariableScopeSTROKECOLOR

                    "STROKE_FLOAT" ->
                        Json.Decode.succeed VariableScopeSTROKEFLOAT

                    "EFFECT_FLOAT" ->
                        Json.Decode.succeed VariableScopeEFFECTFLOAT

                    "EFFECT_COLOR" ->
                        Json.Decode.succeed VariableScopeEFFECTCOLOR

                    "OPACITY" ->
                        Json.Decode.succeed VariableScopeOPACITY

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


variableUpdateDecoder : Json.Decode.Decoder VariableUpdate
variableUpdateDecoder =
    Json.Decode.succeed VariableUpdate
        |> decode "action" variableUpdateActionDecoder
        |> decode "id" Json.Decode.string
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "hiddenFromPublishing" Json.Decode.bool (Just False)
        |> maybeDecode "scopes" (Json.Decode.list variableScopeDecoder) Nothing
        |> maybeDecode "codeSyntax" variableCodeSyntaxDecoder Nothing


variableUpdateActionDecoder : Json.Decode.Decoder VariableUpdateAction
variableUpdateActionDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "UPDATE" ->
                        Json.Decode.succeed VariableUpdateActionUPDATE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


variableValueDecoder : Json.Decode.Decoder VariableValue
variableValueDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map VariableValueBool Json.Decode.bool
        , Json.Decode.map VariableValueFloat Json.Decode.float
        , Json.Decode.map VariableValueRGB rGBDecoder
        , Json.Decode.map VariableValueRGBA rGBADecoder
        , Json.Decode.map VariableValueString Json.Decode.string
        , Json.Decode.map VariableValueVariableAlias variableAliasDecoder
        ]


vectorDecoder : Json.Decode.Decoder Vector
vectorDecoder =
    Json.Decode.succeed Vector
        |> decode "x" Json.Decode.float
        |> decode "y" Json.Decode.float


vectorNodeDecoder : Json.Decode.Decoder VectorNode
vectorNodeDecoder =
    Json.Decode.succeed VectorNode
        |> decodeChain cornerRadiusShapeTraitsDecoder
        |> decode "type" vectorNodeTypeDecoder


vectorNodeTypeDecoder : Json.Decode.Decoder VectorNodeType
vectorNodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "VECTOR" ->
                        Json.Decode.succeed VectorNodeTypeVECTOR

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


versionDecoder : Json.Decode.Decoder Version
versionDecoder =
    Json.Decode.succeed Version
        |> decode "id" Json.Decode.string
        |> decode "created_at" Api.Time.dateTimeDecoder
        |> decodeNullable "label" Json.Decode.string
        |> decodeNullable "description" Json.Decode.string
        |> decode "user" userDecoder
        |> maybeDecode "thumbnail_url" Json.Decode.string Nothing



-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f


objectDecoder : Json.Decode.Decoder Object
objectDecoder =
    Json.Decode.succeed {}


stylesDecoder : Json.Decode.Decoder Styles
stylesDecoder =
    Json.Decode.dict Json.Decode.string
