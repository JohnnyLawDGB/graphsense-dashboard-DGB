{-
   GraphSense API
   GraphSense API provides programmatic access to various ledgers' addresses, entities, blocks, transactions and tags for automated and highly efficient forensics tasks.

   The version of the OpenAPI document: 1.3.0
   Contact: contact@ikna.io

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( Actor
    , ActorContext
    , Address
    , AddressStatus(..)
    , AddressTag
    , AddressTags
    , AddressTx(..)
    , AddressTxUtxo
    , AddressTxs
    , Block
    , Concept
    , CurrencyStats
    , Entity
    , EntityAddresses
    , LabeledItemRef
    , Link(..)
    , LinkUtxo
    , Links
    , NeighborAddress
    , NeighborAddresses
    , NeighborEntities
    , NeighborEntity
    , Rate
    , Rates
    , SearchResult
    , SearchResultByCurrency
    , SearchResultLeaf
    , SearchResultLevel1
    , SearchResultLevel2
    , SearchResultLevel3
    , SearchResultLevel4
    , SearchResultLevel5
    , SearchResultLevel6
    , Stats
    , Taxonomy
    , TokenConfig
    , TokenConfigs
    , Tx(..)
    , TxAccount
    , TxSummary
    , TxUtxo
    , TxValue
    , Values
    , actorDecoder
    , addressDecoder
    , addressTagDecoder
    , addressTagsDecoder
    , addressTxsDecoder
    , blockDecoder
    , conceptDecoder
    , encodeSearchResult
    , encodeStats
    , entityAddressesDecoder
    , entityDecoder
    , linksDecoder
    , neighborAddressDecoder
    , neighborAddressesDecoder
    , neighborEntitiesDecoder
    , neighborEntityDecoder
    , ratesDecoder
    , searchResultDecoder
    , searchResultLevel1Decoder
    , statsDecoder
    , taxonomyDecoder
    , tokenConfigsDecoder
    , txAccountDecoder
    , txDecoder
    , txValueDecoder
    )

import Dict
import Json.Decode
import Json.Encode



-- MODEL


type alias Actor =
    { categories : List LabeledItemRef
    , context : Maybe ActorContext
    , id : String
    , jurisdictions : List LabeledItemRef
    , label : String
    , nrTags : Maybe Int
    , uri : String
    }


type alias ActorContext =
    { coingeckoIds : List String
    , defilamaIds : List String
    , githubOrganisation : Maybe String
    , images : List String
    , legalName : Maybe String
    , refs : List String
    , twitterHandle : Maybe String
    , uris : List String
    }


type alias Address =
    { actors : Maybe (List LabeledItemRef)
    , address : String
    , balance : Values
    , currency : String
    , entity : Int
    , firstTx : TxSummary
    , inDegree : Int
    , isContract : Maybe Bool
    , lastTx : TxSummary
    , noIncomingTxs : Int
    , noOutgoingTxs : Int
    , outDegree : Int
    , status : AddressStatus
    , tokenBalances : Maybe (Dict.Dict String Values)
    , totalReceived : Values
    , totalSpent : Values
    , totalTokensReceived : Maybe (Dict.Dict String Values)
    , totalTokensSpent : Maybe (Dict.Dict String Values)
    }


type AddressStatus
    = AddressStatusClean
    | AddressStatusDirty
    | AddressStatusNew


type alias AddressTag =
    { abuse : Maybe String
    , actor : Maybe String
    , category : Maybe String
    , confidence : Maybe String
    , confidenceLevel : Maybe Int
    , currency : String
    , isClusterDefiner : Bool
    , label : String
    , lastmod : Maybe Int
    , source : Maybe String
    , tagpackCreator : String
    , tagpackIsPublic : Bool
    , tagpackTitle : String
    , tagpackUri : Maybe String
    , address : String
    , entity : Int
    }


type alias AddressTags =
    { addressTags : List AddressTag
    , nextPage : Maybe String
    }


type AddressTx
    = AddressTxAddressTxUtxo AddressTxUtxo
    | AddressTxTxAccount TxAccount


type alias AddressTxUtxo =
    { coinbase : Bool
    , currency : String
    , height : Int
    , timestamp : Int
    , txHash : String
    , txType : String
    , value : Values
    }


type alias AddressTxs =
    { addressTxs : List AddressTx
    , nextPage : Maybe String
    }


type alias Block =
    { blockHash : String
    , currency : String
    , height : Int
    , noTxs : Int
    , timestamp : Int
    }


type alias Concept =
    { description : String
    , id : String
    , label : String
    , taxonomy : String
    , uri : String
    }


type alias CurrencyStats =
    { name : String
    , noAddressRelations : Int
    , noAddresses : Int
    , noBlocks : Int
    , noEntities : Int
    , noLabels : Int
    , noTaggedAddresses : Int
    , noTxs : Int
    , timestamp : Int
    }


type alias Entity =
    { actors : Maybe (List LabeledItemRef)
    , balance : Values
    , bestAddressTag : Maybe AddressTag
    , currency : String
    , entity : Int
    , firstTx : TxSummary
    , inDegree : Int
    , lastTx : TxSummary
    , noAddressTags : Int
    , noAddresses : Int
    , noIncomingTxs : Int
    , noOutgoingTxs : Int
    , outDegree : Int
    , rootAddress : String
    , tokenBalances : Maybe (Dict.Dict String Values)
    , totalReceived : Values
    , totalSpent : Values
    , totalTokensReceived : Maybe (Dict.Dict String Values)
    , totalTokensSpent : Maybe (Dict.Dict String Values)
    }


type alias EntityAddresses =
    { addresses : List Address
    , nextPage : Maybe String
    }


type alias LabeledItemRef =
    { id : String
    , label : String
    }


type Link
    = LinkLinkUtxo LinkUtxo
    | LinkTxAccount TxAccount


type alias LinkUtxo =
    { currency : String
    , height : Int
    , inputValue : Values
    , outputValue : Values
    , timestamp : Int
    , txHash : String
    , txType : String
    }


type alias Links =
    { links : List Link
    , nextPage : Maybe String
    }


type alias NeighborAddress =
    { address : Address
    , labels : Maybe (List String)
    , noTxs : Int
    , tokenValues : Maybe (Dict.Dict String Values)
    , value : Values
    }


type alias NeighborAddresses =
    { neighbors : List NeighborAddress
    , nextPage : Maybe String
    }


type alias NeighborEntities =
    { neighbors : List NeighborEntity
    , nextPage : Maybe String
    }


type alias NeighborEntity =
    { entity : Entity
    , labels : Maybe (List String)
    , noTxs : Int
    , tokenValues : Maybe (Dict.Dict String Values)
    , value : Values
    }


type alias Rate =
    { code : String
    , value : Float
    }


type alias Rates =
    { height : Maybe Int
    , rates : Maybe (List Rate)
    }


type alias SearchResult =
    { actors : Maybe (List LabeledItemRef)
    , currencies : List SearchResultByCurrency
    , labels : List String
    }


type alias SearchResultByCurrency =
    { addresses : List String
    , currency : String
    , txs : List String
    }


type alias SearchResultLeaf =
    { matchingAddresses : List Address
    , neighbor : NeighborEntity
    }


type alias SearchResultLevel1 =
    { matchingAddresses : List Address
    , neighbor : NeighborEntity
    , paths : List SearchResultLevel2
    }


type alias SearchResultLevel2 =
    { matchingAddresses : List Address
    , neighbor : NeighborEntity
    , paths : List SearchResultLevel3
    }


type alias SearchResultLevel3 =
    { matchingAddresses : List Address
    , neighbor : NeighborEntity
    , paths : List SearchResultLevel4
    }


type alias SearchResultLevel4 =
    { matchingAddresses : List Address
    , neighbor : NeighborEntity
    , paths : List SearchResultLevel5
    }


type alias SearchResultLevel5 =
    { matchingAddresses : List Address
    , neighbor : NeighborEntity
    , paths : List SearchResultLevel6
    }


type alias SearchResultLevel6 =
    { matchingAddresses : List Address
    , neighbor : NeighborEntity
    , paths : List SearchResultLeaf
    }


type alias Stats =
    { currencies : List CurrencyStats
    , requestTimestamp : String
    , version : String
    }


type alias Taxonomy =
    { taxonomy : String
    , uri : String
    }


type alias TokenConfig =
    { decimals : Int
    , pegCurrency : Maybe String
    , ticker : String
    }


type alias TokenConfigs =
    { tokenConfigs : List TokenConfig
    }


type Tx
    = TxTxAccount TxAccount
    | TxTxUtxo TxUtxo


type alias TxAccount =
    { contractCreation : Maybe Bool
    , currency : String
    , fromAddress : String
    , height : Int
    , timestamp : Int
    , toAddress : String
    , tokenTxId : Maybe Int
    , txHash : String
    , txType : String
    , value : Values
    }


type alias TxSummary =
    { height : Int
    , timestamp : Int
    , txHash : String
    }


type alias TxUtxo =
    { coinbase : Bool
    , currency : String
    , height : Int
    , inputs : Maybe (List TxValue)
    , noInputs : Int
    , noOutputs : Int
    , outputs : Maybe (List TxValue)
    , timestamp : Int
    , totalInput : Values
    , totalOutput : Values
    , txHash : String
    , txType : String
    }


type alias TxValue =
    { address : List String
    , value : Values
    }


type alias Values =
    { fiatValues : List Rate
    , value : Int
    }



-- ENCODER


encodeCurrencyStats : CurrencyStats -> Json.Encode.Value
encodeCurrencyStats =
    encodeObject << encodeCurrencyStatsPairs


encodeCurrencyStatsPairs : CurrencyStats -> List EncodedField
encodeCurrencyStatsPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "no_address_relations" Json.Encode.int model.noAddressRelations
            , encode "no_addresses" Json.Encode.int model.noAddresses
            , encode "no_blocks" Json.Encode.int model.noBlocks
            , encode "no_entities" Json.Encode.int model.noEntities
            , encode "no_labels" Json.Encode.int model.noLabels
            , encode "no_tagged_addresses" Json.Encode.int model.noTaggedAddresses
            , encode "no_txs" Json.Encode.int model.noTxs
            , encode "timestamp" Json.Encode.int model.timestamp
            ]
    in
    pairs


encodeLabeledItemRef : LabeledItemRef -> Json.Encode.Value
encodeLabeledItemRef =
    encodeObject << encodeLabeledItemRefPairs


encodeLabeledItemRefPairs : LabeledItemRef -> List EncodedField
encodeLabeledItemRefPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "label" Json.Encode.string model.label
            ]
    in
    pairs


encodeSearchResult : SearchResult -> Json.Encode.Value
encodeSearchResult =
    encodeObject << encodeSearchResultPairs


encodeSearchResultPairs : SearchResult -> List EncodedField
encodeSearchResultPairs model =
    let
        pairs =
            [ maybeEncode "actors" (Json.Encode.list encodeLabeledItemRef) model.actors
            , encode "currencies" (Json.Encode.list encodeSearchResultByCurrency) model.currencies
            , encode "labels" (Json.Encode.list Json.Encode.string) model.labels
            ]
    in
    pairs


encodeSearchResultByCurrency : SearchResultByCurrency -> Json.Encode.Value
encodeSearchResultByCurrency =
    encodeObject << encodeSearchResultByCurrencyPairs


encodeSearchResultByCurrencyPairs : SearchResultByCurrency -> List EncodedField
encodeSearchResultByCurrencyPairs model =
    let
        pairs =
            [ encode "addresses" (Json.Encode.list Json.Encode.string) model.addresses
            , encode "currency" Json.Encode.string model.currency
            , encode "txs" (Json.Encode.list Json.Encode.string) model.txs
            ]
    in
    pairs


encodeStats : Stats -> Json.Encode.Value
encodeStats =
    encodeObject << encodeStatsPairs


encodeStatsPairs : Stats -> List EncodedField
encodeStatsPairs model =
    let
        pairs =
            [ encode "currencies" (Json.Encode.list encodeCurrencyStats) model.currencies
            , encode "request_timestamp" Json.Encode.string model.requestTimestamp
            , encode "version" Json.Encode.string model.version
            ]
    in
    pairs



-- DECODER


actorDecoder : Json.Decode.Decoder Actor
actorDecoder =
    Json.Decode.succeed Actor
        |> decode "categories" (Json.Decode.list labeledItemRefDecoder)
        |> maybeDecode "context" actorContextDecoder Nothing
        |> decode "id" Json.Decode.string
        |> decode "jurisdictions" (Json.Decode.list labeledItemRefDecoder)
        |> decode "label" Json.Decode.string
        |> maybeDecode "nr_tags" Json.Decode.int Nothing
        |> decode "uri" Json.Decode.string


actorContextDecoder : Json.Decode.Decoder ActorContext
actorContextDecoder =
    Json.Decode.succeed ActorContext
        |> decode "coingecko_ids" (Json.Decode.list Json.Decode.string)
        |> decode "defilama_ids" (Json.Decode.list Json.Decode.string)
        |> maybeDecode "github_organisation" Json.Decode.string Nothing
        |> decode "images" (Json.Decode.list Json.Decode.string)
        |> maybeDecode "legal_name" Json.Decode.string Nothing
        |> decode "refs" (Json.Decode.list Json.Decode.string)
        |> maybeDecode "twitter_handle" Json.Decode.string Nothing
        |> decode "uris" (Json.Decode.list Json.Decode.string)


addressDecoder : Json.Decode.Decoder Address
addressDecoder =
    Json.Decode.succeed Address
        |> maybeDecode "actors" (Json.Decode.list labeledItemRefDecoder) Nothing
        |> decode "address" Json.Decode.string
        |> decode "balance" valuesDecoder
        |> decode "currency" Json.Decode.string
        |> decode "entity" Json.Decode.int
        |> decode "first_tx" txSummaryDecoder
        |> decode "in_degree" Json.Decode.int
        |> maybeDecode "is_contract" Json.Decode.bool Nothing
        |> decode "last_tx" txSummaryDecoder
        |> decode "no_incoming_txs" Json.Decode.int
        |> decode "no_outgoing_txs" Json.Decode.int
        |> decode "out_degree" Json.Decode.int
        |> decode "status" addressStatusDecoder
        |> maybeDecode "token_balances" (Json.Decode.dict valuesDecodervaluesDecoder) Nothing
        |> decode "total_received" valuesDecoder
        |> decode "total_spent" valuesDecoder
        |> maybeDecode "total_tokens_received" (Json.Decode.dict valuesDecodervaluesDecoder) Nothing
        |> maybeDecode "total_tokens_spent" (Json.Decode.dict valuesDecodervaluesDecoder) Nothing


addressStatusDecoder : Json.Decode.Decoder AddressStatus
addressStatusDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "clean" ->
                        Json.Decode.succeed AddressStatusClean

                    "dirty" ->
                        Json.Decode.succeed AddressStatusDirty

                    "new" ->
                        Json.Decode.succeed AddressStatusNew

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


addressTagDecoder : Json.Decode.Decoder AddressTag
addressTagDecoder =
    Json.Decode.succeed AddressTag
        |> maybeDecode "abuse" Json.Decode.string Nothing
        |> maybeDecode "actor" Json.Decode.string Nothing
        |> maybeDecode "category" Json.Decode.string Nothing
        |> maybeDecode "confidence" Json.Decode.string Nothing
        |> maybeDecode "confidence_level" Json.Decode.int Nothing
        |> decode "currency" Json.Decode.string
        |> decode "is_cluster_definer" Json.Decode.bool
        |> decode "label" Json.Decode.string
        |> maybeDecode "lastmod" Json.Decode.int Nothing
        |> maybeDecode "source" Json.Decode.string Nothing
        |> decode "tagpack_creator" Json.Decode.string
        |> decode "tagpack_is_public" Json.Decode.bool
        |> decode "tagpack_title" Json.Decode.string
        |> maybeDecode "tagpack_uri" Json.Decode.string Nothing
        |> decode "address" Json.Decode.string
        |> decode "entity" Json.Decode.int


addressTagsDecoder : Json.Decode.Decoder AddressTags
addressTagsDecoder =
    Json.Decode.succeed AddressTags
        |> decode "address_tags" (Json.Decode.list addressTagDecoder)
        |> maybeDecode "next_page" Json.Decode.string Nothing


addressTxDecoder : Json.Decode.Decoder AddressTx
addressTxDecoder =
    Json.Decode.field "tx_type" Json.Decode.string
        |> Json.Decode.andThen addressTxTagDecoder


addressTxTagDecoder : String -> Json.Decode.Decoder AddressTx
addressTxTagDecoder tag =
    case tag of
        "account" ->
            Json.Decode.map AddressTxTxAccount txAccountDecoder

        "utxo" ->
            Json.Decode.map AddressTxAddressTxUtxo addressTxUtxoDecoder

        _ ->
            Json.Decode.fail <| "Trying to decode AddressTx, but txType '" ++ tag ++ "' is not supported."


addressTxUtxoDecoder : Json.Decode.Decoder AddressTxUtxo
addressTxUtxoDecoder =
    Json.Decode.succeed AddressTxUtxo
        |> decode "coinbase" Json.Decode.bool
        |> decode "currency" Json.Decode.string
        |> decode "height" Json.Decode.int
        |> decode "timestamp" Json.Decode.int
        |> decode "tx_hash" Json.Decode.string
        |> decode "tx_type" Json.Decode.string
        |> decode "value" valuesDecoder


addressTxsDecoder : Json.Decode.Decoder AddressTxs
addressTxsDecoder =
    Json.Decode.succeed AddressTxs
        |> decode "address_txs" (Json.Decode.list addressTxDecoder)
        |> maybeDecode "next_page" Json.Decode.string Nothing


blockDecoder : Json.Decode.Decoder Block
blockDecoder =
    Json.Decode.succeed Block
        |> decode "block_hash" Json.Decode.string
        |> decode "currency" Json.Decode.string
        |> decode "height" Json.Decode.int
        |> decode "no_txs" Json.Decode.int
        |> decode "timestamp" Json.Decode.int


conceptDecoder : Json.Decode.Decoder Concept
conceptDecoder =
    Json.Decode.succeed Concept
        |> decode "description" Json.Decode.string
        |> decode "id" Json.Decode.string
        |> decode "label" Json.Decode.string
        |> decode "taxonomy" Json.Decode.string
        |> decode "uri" Json.Decode.string


currencyStatsDecoder : Json.Decode.Decoder CurrencyStats
currencyStatsDecoder =
    Json.Decode.succeed CurrencyStats
        |> decode "name" Json.Decode.string
        |> decode "no_address_relations" Json.Decode.int
        |> decode "no_addresses" Json.Decode.int
        |> decode "no_blocks" Json.Decode.int
        |> decode "no_entities" Json.Decode.int
        |> decode "no_labels" Json.Decode.int
        |> decode "no_tagged_addresses" Json.Decode.int
        |> decode "no_txs" Json.Decode.int
        |> decode "timestamp" Json.Decode.int


entityDecoder : Json.Decode.Decoder Entity
entityDecoder =
    Json.Decode.succeed Entity
        |> maybeDecode "actors" (Json.Decode.list labeledItemRefDecoder) Nothing
        |> decode "balance" valuesDecoder
        |> maybeDecode "best_address_tag" addressTagDecoder Nothing
        |> decode "currency" Json.Decode.string
        |> decode "entity" Json.Decode.int
        |> decode "first_tx" txSummaryDecoder
        |> decode "in_degree" Json.Decode.int
        |> decode "last_tx" txSummaryDecoder
        |> decode "no_address_tags" Json.Decode.int
        |> decode "no_addresses" Json.Decode.int
        |> decode "no_incoming_txs" Json.Decode.int
        |> decode "no_outgoing_txs" Json.Decode.int
        |> decode "out_degree" Json.Decode.int
        |> decode "root_address" Json.Decode.string
        |> maybeDecode "token_balances" (Json.Decode.dict valuesDecodervaluesDecoder) Nothing
        |> decode "total_received" valuesDecoder
        |> decode "total_spent" valuesDecoder
        |> maybeDecode "total_tokens_received" (Json.Decode.dict valuesDecodervaluesDecoder) Nothing
        |> maybeDecode "total_tokens_spent" (Json.Decode.dict valuesDecodervaluesDecoder) Nothing


entityAddressesDecoder : Json.Decode.Decoder EntityAddresses
entityAddressesDecoder =
    Json.Decode.succeed EntityAddresses
        |> decode "addresses" (Json.Decode.list addressDecoder)
        |> maybeDecode "next_page" Json.Decode.string Nothing


labeledItemRefDecoder : Json.Decode.Decoder LabeledItemRef
labeledItemRefDecoder =
    Json.Decode.succeed LabeledItemRef
        |> decode "id" Json.Decode.string
        |> decode "label" Json.Decode.string


linkDecoder : Json.Decode.Decoder Link
linkDecoder =
    Json.Decode.field "tx_type" Json.Decode.string
        |> Json.Decode.andThen linkTagDecoder


linkTagDecoder : String -> Json.Decode.Decoder Link
linkTagDecoder tag =
    case tag of
        "account" ->
            Json.Decode.map LinkTxAccount txAccountDecoder

        "utxo" ->
            Json.Decode.map LinkLinkUtxo linkUtxoDecoder

        _ ->
            Json.Decode.fail <| "Trying to decode Link, but txType '" ++ tag ++ "' is not supported."


linkUtxoDecoder : Json.Decode.Decoder LinkUtxo
linkUtxoDecoder =
    Json.Decode.succeed LinkUtxo
        |> decode "currency" Json.Decode.string
        |> decode "height" Json.Decode.int
        |> decode "input_value" valuesDecoder
        |> decode "output_value" valuesDecoder
        |> decode "timestamp" Json.Decode.int
        |> decode "tx_hash" Json.Decode.string
        |> decode "tx_type" Json.Decode.string


linksDecoder : Json.Decode.Decoder Links
linksDecoder =
    Json.Decode.succeed Links
        |> decode "links" (Json.Decode.list linkDecoder)
        |> maybeDecode "next_page" Json.Decode.string Nothing


neighborAddressDecoder : Json.Decode.Decoder NeighborAddress
neighborAddressDecoder =
    Json.Decode.succeed NeighborAddress
        |> decode "address" addressDecoder
        |> maybeDecode "labels" (Json.Decode.list Json.Decode.string) Nothing
        |> decode "no_txs" Json.Decode.int
        |> maybeDecode "token_values" (Json.Decode.dict valuesDecodervaluesDecoder) Nothing
        |> decode "value" valuesDecoder


neighborAddressesDecoder : Json.Decode.Decoder NeighborAddresses
neighborAddressesDecoder =
    Json.Decode.succeed NeighborAddresses
        |> decode "neighbors" (Json.Decode.list neighborAddressDecoder)
        |> maybeDecode "next_page" Json.Decode.string Nothing


neighborEntitiesDecoder : Json.Decode.Decoder NeighborEntities
neighborEntitiesDecoder =
    Json.Decode.succeed NeighborEntities
        |> decode "neighbors" (Json.Decode.list neighborEntityDecoder)
        |> maybeDecode "next_page" Json.Decode.string Nothing


neighborEntityDecoder : Json.Decode.Decoder NeighborEntity
neighborEntityDecoder =
    Json.Decode.succeed NeighborEntity
        |> decode "entity" entityDecoder
        |> maybeDecode "labels" (Json.Decode.list Json.Decode.string) Nothing
        |> decode "no_txs" Json.Decode.int
        |> maybeDecode "token_values" (Json.Decode.dict valuesDecodervaluesDecoder) Nothing
        |> decode "value" valuesDecoder


rateDecoder : Json.Decode.Decoder Rate
rateDecoder =
    Json.Decode.succeed Rate
        |> decode "code" Json.Decode.string
        |> decode "value" Json.Decode.float


ratesDecoder : Json.Decode.Decoder Rates
ratesDecoder =
    Json.Decode.succeed Rates
        |> maybeDecode "height" Json.Decode.int Nothing
        |> maybeDecode "rates" (Json.Decode.list rateDecoder) Nothing


searchResultDecoder : Json.Decode.Decoder SearchResult
searchResultDecoder =
    Json.Decode.succeed SearchResult
        |> maybeDecode "actors" (Json.Decode.list labeledItemRefDecoder) Nothing
        |> decode "currencies" (Json.Decode.list searchResultByCurrencyDecoder)
        |> decode "labels" (Json.Decode.list Json.Decode.string)


searchResultByCurrencyDecoder : Json.Decode.Decoder SearchResultByCurrency
searchResultByCurrencyDecoder =
    Json.Decode.succeed SearchResultByCurrency
        |> decode "addresses" (Json.Decode.list Json.Decode.string)
        |> decode "currency" Json.Decode.string
        |> decode "txs" (Json.Decode.list Json.Decode.string)


searchResultLeafDecoder : Json.Decode.Decoder SearchResultLeaf
searchResultLeafDecoder =
    Json.Decode.succeed SearchResultLeaf
        |> decode "matching_addresses" (Json.Decode.list addressDecoder)
        |> decode "neighbor" neighborEntityDecoder


searchResultLevel1Decoder : Json.Decode.Decoder SearchResultLevel1
searchResultLevel1Decoder =
    Json.Decode.succeed SearchResultLevel1
        |> decode "matching_addresses" (Json.Decode.list addressDecoder)
        |> decode "neighbor" neighborEntityDecoder
        |> decode "paths" (Json.Decode.list searchResultLevel2Decoder)


searchResultLevel2Decoder : Json.Decode.Decoder SearchResultLevel2
searchResultLevel2Decoder =
    Json.Decode.succeed SearchResultLevel2
        |> decode "matching_addresses" (Json.Decode.list addressDecoder)
        |> decode "neighbor" neighborEntityDecoder
        |> decode "paths" (Json.Decode.list searchResultLevel3Decoder)


searchResultLevel3Decoder : Json.Decode.Decoder SearchResultLevel3
searchResultLevel3Decoder =
    Json.Decode.succeed SearchResultLevel3
        |> decode "matching_addresses" (Json.Decode.list addressDecoder)
        |> decode "neighbor" neighborEntityDecoder
        |> decode "paths" (Json.Decode.list searchResultLevel4Decoder)


searchResultLevel4Decoder : Json.Decode.Decoder SearchResultLevel4
searchResultLevel4Decoder =
    Json.Decode.succeed SearchResultLevel4
        |> decode "matching_addresses" (Json.Decode.list addressDecoder)
        |> decode "neighbor" neighborEntityDecoder
        |> decode "paths" (Json.Decode.list searchResultLevel5Decoder)


searchResultLevel5Decoder : Json.Decode.Decoder SearchResultLevel5
searchResultLevel5Decoder =
    Json.Decode.succeed SearchResultLevel5
        |> decode "matching_addresses" (Json.Decode.list addressDecoder)
        |> decode "neighbor" neighborEntityDecoder
        |> decode "paths" (Json.Decode.list searchResultLevel6Decoder)


searchResultLevel6Decoder : Json.Decode.Decoder SearchResultLevel6
searchResultLevel6Decoder =
    Json.Decode.succeed SearchResultLevel6
        |> decode "matching_addresses" (Json.Decode.list addressDecoder)
        |> decode "neighbor" neighborEntityDecoder
        |> decode "paths" (Json.Decode.list searchResultLeafDecoder)


statsDecoder : Json.Decode.Decoder Stats
statsDecoder =
    Json.Decode.succeed Stats
        |> decode "currencies" (Json.Decode.list currencyStatsDecoder)
        |> decode "request_timestamp" Json.Decode.string
        |> decode "version" Json.Decode.string


taxonomyDecoder : Json.Decode.Decoder Taxonomy
taxonomyDecoder =
    Json.Decode.succeed Taxonomy
        |> decode "taxonomy" Json.Decode.string
        |> decode "uri" Json.Decode.string


tokenConfigDecoder : Json.Decode.Decoder TokenConfig
tokenConfigDecoder =
    Json.Decode.succeed TokenConfig
        |> decode "decimals" Json.Decode.int
        |> maybeDecode "peg_currency" Json.Decode.string Nothing
        |> decode "ticker" Json.Decode.string


tokenConfigsDecoder : Json.Decode.Decoder TokenConfigs
tokenConfigsDecoder =
    Json.Decode.succeed TokenConfigs
        |> decode "token_configs" (Json.Decode.list tokenConfigDecoder)


txDecoder : Json.Decode.Decoder Tx
txDecoder =
    Json.Decode.field "tx_type" Json.Decode.string
        |> Json.Decode.andThen txTagDecoder


txTagDecoder : String -> Json.Decode.Decoder Tx
txTagDecoder tag =
    case tag of
        "account" ->
            Json.Decode.map TxTxAccount txAccountDecoder

        "utxo" ->
            Json.Decode.map TxTxUtxo txUtxoDecoder

        _ ->
            Json.Decode.fail <| "Trying to decode Tx, but txType '" ++ tag ++ "' is not supported."


txAccountDecoder : Json.Decode.Decoder TxAccount
txAccountDecoder =
    Json.Decode.succeed TxAccount
        |> maybeDecode "contract_creation" Json.Decode.bool Nothing
        |> decode "currency" Json.Decode.string
        |> decode "from_address" Json.Decode.string
        |> decode "height" Json.Decode.int
        |> decode "timestamp" Json.Decode.int
        |> decode "to_address" Json.Decode.string
        |> maybeDecode "token_tx_id" Json.Decode.int Nothing
        |> decode "tx_hash" Json.Decode.string
        |> decode "tx_type" Json.Decode.string
        |> decode "value" valuesDecoder


txSummaryDecoder : Json.Decode.Decoder TxSummary
txSummaryDecoder =
    Json.Decode.succeed TxSummary
        |> decode "height" Json.Decode.int
        |> decode "timestamp" Json.Decode.int
        |> decode "tx_hash" Json.Decode.string


txUtxoDecoder : Json.Decode.Decoder TxUtxo
txUtxoDecoder =
    Json.Decode.succeed TxUtxo
        |> decode "coinbase" Json.Decode.bool
        |> decode "currency" Json.Decode.string
        |> decode "height" Json.Decode.int
        |> maybeDecode "inputs" (Json.Decode.list txValueDecoder) Nothing
        |> decode "no_inputs" Json.Decode.int
        |> decode "no_outputs" Json.Decode.int
        |> maybeDecode "outputs" (Json.Decode.list txValueDecoder) Nothing
        |> decode "timestamp" Json.Decode.int
        |> decode "total_input" valuesDecoder
        |> decode "total_output" valuesDecoder
        |> decode "tx_hash" Json.Decode.string
        |> decode "tx_type" Json.Decode.string


txValueDecoder : Json.Decode.Decoder TxValue
txValueDecoder =
    Json.Decode.succeed TxValue
        |> decode "address" (Json.Decode.list Json.Decode.string)
        |> decode "value" valuesDecoder


valuesDecoder : Json.Decode.Decoder Values
valuesDecoder =
    Json.Decode.succeed Values
        |> decode "fiat_values" (Json.Decode.list rateDecoder)
        |> decode "value" Json.Decode.int



-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


valuesDecodervaluesDecoder =
    valuesDecoder
