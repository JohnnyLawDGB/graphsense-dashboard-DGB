{-
   GraphSense API
   GraphSense API

   The version of the OpenAPI document: 0.5.2

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.Entities exposing
    ( Direction(..)
    , Key(..)
    , Level(..)
    , directionVariants
    , getEntity
    , keyVariants
    , levelVariants
    , listEntityAddresses
    , listEntityLinks
    , listEntityNeighbors
    , listEntityTxs
    , listTagsByEntity
    , searchEntityNeighbors
    )

import Api
import Api.Data
import Dict
import Http
import Json.Decode
import Json.Encode


type Level
    = LevelAddress
    | LevelEntity


levelVariants : List Level
levelVariants =
    [ LevelAddress
    , LevelEntity
    ]


stringFromLevel : Level -> String
stringFromLevel model =
    case model of
        LevelAddress ->
            "address"

        LevelEntity ->
            "entity"


type Direction
    = DirectionIn
    | DirectionOut


directionVariants : List Direction
directionVariants =
    [ DirectionIn
    , DirectionOut
    ]


stringFromDirection : Direction -> String
stringFromDirection model =
    case model of
        DirectionIn ->
            "in"

        DirectionOut ->
            "out"


type Key
    = KeyCategory
    | KeyAddresses
    | KeyEntities
    | KeyTotalReceived
    | KeyBalance


keyVariants : List Key
keyVariants =
    [ KeyCategory
    , KeyAddresses
    , KeyEntities
    , KeyTotalReceived
    , KeyBalance
    ]


stringFromKey : Key -> String
stringFromKey model =
    case model of
        KeyCategory ->
            "category"

        KeyAddresses ->
            "addresses"

        KeyEntities ->
            "entities"

        KeyTotalReceived ->
            "total_received"

        KeyBalance ->
            "balance"


getEntity : String -> Int -> Maybe Bool -> Api.Request Api.Data.Entity
getEntity currency_path entity_path includeTags_query =
    Api.request
        "GET"
        "/{currency}/entities/{entity}"
        [ ( "currency", identity currency_path ), ( "entity", String.fromInt entity_path ) ]
        [ ( "include_tags"
          , Maybe.map
                (\val ->
                    if val then
                        "true"

                    else
                        "false"
                )
                includeTags_query
          )
        ]
        []
        Nothing
        Api.Data.entityDecoder


listEntityAddresses : String -> Int -> Maybe String -> Maybe Int -> Api.Request Api.Data.EntityAddresses
listEntityAddresses currency_path entity_path page_query pagesize_query =
    Api.request
        "GET"
        "/{currency}/entities/{entity}/addresses"
        [ ( "currency", identity currency_path ), ( "entity", String.fromInt entity_path ) ]
        [ ( "page", Maybe.map identity page_query ), ( "pagesize", Maybe.map String.fromInt pagesize_query ) ]
        []
        Nothing
        Api.Data.entityAddressesDecoder


listEntityLinks : String -> Int -> Int -> Maybe String -> Maybe Int -> Api.Request Api.Data.Links
listEntityLinks currency_path entity_path neighbor_query page_query pagesize_query =
    Api.request
        "GET"
        "/{currency}/entities/{entity}/links"
        [ ( "currency", identity currency_path ), ( "entity", String.fromInt entity_path ) ]
        [ ( "neighbor", Just <| String.fromInt neighbor_query ), ( "page", Maybe.map identity page_query ), ( "pagesize", Maybe.map String.fromInt pagesize_query ) ]
        []
        Nothing
        Api.Data.linksDecoder


listEntityNeighbors : String -> Int -> Direction -> Maybe (List Int) -> Maybe Bool -> Maybe String -> Maybe Int -> Api.Request Api.Data.NeighborEntities
listEntityNeighbors currency_path entity_path direction_query onlyIds_query includeLabels_query page_query pagesize_query =
    Api.request
        "GET"
        "/{currency}/entities/{entity}/neighbors"
        [ ( "currency", identity currency_path ), ( "entity", String.fromInt entity_path ) ]
        [ ( "direction", Just <| stringFromDirection direction_query )
        , ( "only_ids", Maybe.map (String.join "," << List.map String.fromInt) onlyIds_query )
        , ( "include_labels"
          , Maybe.map
                (\val ->
                    if val then
                        "true"

                    else
                        "false"
                )
                includeLabels_query
          )
        , ( "page", Maybe.map identity page_query )
        , ( "pagesize", Maybe.map String.fromInt pagesize_query )
        ]
        []
        Nothing
        Api.Data.neighborEntitiesDecoder


listEntityTxs : String -> Int -> Maybe String -> Maybe Int -> Api.Request Api.Data.AddressTxs
listEntityTxs currency_path entity_path page_query pagesize_query =
    Api.request
        "GET"
        "/{currency}/entities/{entity}/txs"
        [ ( "currency", identity currency_path ), ( "entity", String.fromInt entity_path ) ]
        [ ( "page", Maybe.map identity page_query ), ( "pagesize", Maybe.map String.fromInt pagesize_query ) ]
        []
        Nothing
        Api.Data.addressTxsDecoder


listTagsByEntity : String -> Int -> Level -> Maybe String -> Maybe Int -> Api.Request Api.Data.Tags
listTagsByEntity currency_path entity_path level_query page_query pagesize_query =
    Api.request
        "GET"
        "/{currency}/entities/{entity}/tags"
        [ ( "currency", identity currency_path ), ( "entity", String.fromInt entity_path ) ]
        [ ( "level", Just <| stringFromLevel level_query ), ( "page", Maybe.map identity page_query ), ( "pagesize", Maybe.map String.fromInt pagesize_query ) ]
        []
        Nothing
        Api.Data.tagsDecoder


searchEntityNeighbors : String -> Int -> Direction -> Key -> List String -> Int -> Maybe Int -> Maybe Int -> Api.Request Api.Data.SearchResultLevel1
searchEntityNeighbors currency_path entity_path direction_query key_query value_query depth_query breadth_query skipNumAddresses_query =
    Api.request
        "GET"
        "/{currency}/entities/{entity}/search"
        [ ( "currency", identity currency_path ), ( "entity", String.fromInt entity_path ) ]
        [ ( "direction", Just <| stringFromDirection direction_query ), ( "key", Just <| stringFromKey key_query ), ( "value", Just <| (String.join "," << List.map identity) value_query ), ( "depth", Just <| String.fromInt depth_query ), ( "breadth", Maybe.map String.fromInt breadth_query ), ( "skip_num_addresses", Maybe.map String.fromInt skipNumAddresses_query ) ]
        []
        Nothing
        Api.Data.searchResultLevel1Decoder
