stringFrom{{^paramName}}{{classname}}{{/paramName}}{{enumName}} : {{^paramName}}{{classname}}{{/paramName}}{{enumName}} -> String
stringFrom{{^paramName}}{{classname}}{{/paramName}}{{enumName}}{{#isNumeric}} =
    String.fromInt << intFrom{{^paramName}}{{classname}}{{/paramName}}{{enumName}}

intFrom{{^paramName}}{{classname}}{{/paramName}}{{enumName}} : {{^paramName}}{{classname}}{{/paramName}}{{enumName}} -> Int
intFrom{{^paramName}}{{classname}}{{/paramName}}{{enumName}}{{/isNumeric}} model =
    case model of
{{#allowableValues}}
{{#enumVars}}
        {{^paramName}}{{classname}}{{/paramName}}{{enumName}}{{name}} ->
            {{#isString}}{{{value}}}{{/isString}}{{^isString}}{{name}}{{/isString}}

{{/enumVars}}
{{/allowableValues}}

make{{^paramName}}{{classname}}{{/paramName}}{{enumName}}FromString : String -> Maybe {{^paramName}}{{classname}}{{/paramName}}{{enumName}}
make{{^paramName}}{{classname}}{{/paramName}}{{enumName}}FromString str =
    case str of
{{#allowableValues}}
{{#enumVars}}
    {{#isString}}{{{value}}}{{/isString}}{{^isString}}{{name}}{{/isString}} ->
        Just {{^paramName}}{{classname}}{{/paramName}}{{enumName}}{{name}}

{{/enumVars}}
{{/allowableValues}}
    _ ->
        Nothing


